// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : streamciphercontext_proxy.h
//
// Purpose     : Implementation of file streamciphercontext_proxy.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_STREAMCIPHER_STREAMCIPHERCONTEXT_PROXY_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_STREAMCIPHER_STREAMCIPHERCONTEXT_PROXY_H_

#include <ara/com/internal/proxy/ara_proxy_base.h>
#include "ara/crypto/ipccom/cryp/streamcipher/streamciphercontext_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace streamcipher
{
namespace proxy
{

namespace methods
{
  /// @brief Using for CountBytesInCache.
  using CountBytesInCache = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::CountBytesInCacheOutput()>;
  /// @brief Using for FinishBytes.
  using FinishBytes = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::FinishBytesOutput(const CryptoReadOnlyMemRegion& )>;
  /// @brief Using for GetBlockService.
  using GetBlockService = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::GetBlockServiceOutput()>;
  /// @brief Using for GetCryptoPrimitiveId.
  using GetCryptoPrimitiveId = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::GetCryptoPrimitiveIdOutput()>;
  /// @brief Using for GetTransformation.
  using GetTransformation = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::GetTransformationOutput()>;
  /// @brief Using for IsBytewiseMode.
  using IsBytewiseMode = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::IsBytewiseModeOutput()>;
  /// @brief Using for IsInitialized.
  using IsInitialized = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::IsInitializedOutput()>;
  /// @brief Using for IsSeekableMode.
  using IsSeekableMode = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::IsSeekableModeOutput()>;
  /// @brief Using for ProcessBlocks.
  using ProcessBlocks = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::ProcessBlocksOutput(const CryptoReadOnlyMemRegion& )>;
  /// @brief Using for ProcessByte.
  using ProcessByte = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::ProcessByteOutput(const CryptoReadOnlyMemRegion& )>;
  /// @brief Using for Reset.
  using Reset = ara::com::internal::proxy::Method<void()>;
  /// @brief Using for Seek.
  using Seek = ara::com::internal::proxy::Method<void(const Int64& ,const Boolean& )>;
  /// @brief Using for SetKey.
  using SetKey = ara::com::internal::proxy::Method<void(const CryptoServiceInstanceId& ,const CryptoTransformDataType& )>;
  /// @brief Using for StartReadOnlyMem.
  using StartReadOnlyMem = ara::com::internal::proxy::Method<void(const CryptoReadOnlyMemRegion& )>;
  /// @brief Using for StartSecretSeed.
  using StartSecretSeed = ara::com::internal::proxy::Method<void(const CryptoServiceInstanceId& )>;
} // namespace methods



/// @brief Class for StreamCipherContextProxyBase.
class StreamCipherContextProxyBase : public ara::com::internal::proxy::ProxyBindingBase, public ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext {
 public:
  /// @brief Method for CountBytesInCache.
  virtual methods::CountBytesInCache& GetCountBytesInCache() = 0;
  /// @brief Method for FinishBytes.
  virtual methods::FinishBytes& GetFinishBytes() = 0;
  /// @brief Method for GetBlockService.
  virtual methods::GetBlockService& GetGetBlockService() = 0;
  /// @brief Method for GetCryptoPrimitiveId.
  virtual methods::GetCryptoPrimitiveId& GetGetCryptoPrimitiveId() = 0;
  /// @brief Method for GetTransformation.
  virtual methods::GetTransformation& GetGetTransformation() = 0;
  /// @brief Method for IsBytewiseMode.
  virtual methods::IsBytewiseMode& GetIsBytewiseMode() = 0;
  /// @brief Method for IsInitialized.
  virtual methods::IsInitialized& GetIsInitialized() = 0;
  /// @brief Method for IsSeekableMode.
  virtual methods::IsSeekableMode& GetIsSeekableMode() = 0;
  /// @brief Method for ProcessBlocks.
  virtual methods::ProcessBlocks& GetProcessBlocks() = 0;
  /// @brief Method for ProcessByte.
  virtual methods::ProcessByte& GetProcessByte() = 0;
  /// @brief Method for Reset.
  virtual methods::Reset& GetReset() = 0;
  /// @brief Method for Seek.
  virtual methods::Seek& GetSeek() = 0;
  /// @brief Method for SetKey.
  virtual methods::SetKey& GetSetKey() = 0;
  /// @brief Method for StartReadOnlyMem.
  virtual methods::StartReadOnlyMem& GetStartReadOnlyMem() = 0;
  /// @brief Method for StartSecretSeed.
  virtual methods::StartSecretSeed& GetStartSecretSeed() = 0;
};

/// @brief Class for StreamCipherContextProxy.
class StreamCipherContextProxy : public ara::com::internal::proxy::ProxyBase<StreamCipherContextProxyBase>, public ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext {
 public:
  /// @brief Definition for StreamCipherContextProxy.
  explicit StreamCipherContextProxy(const HandleType& proxy_base_factory) :
    ara::com::internal::proxy::ProxyBase<StreamCipherContextProxyBase>(proxy_base_factory),
    /// @brief Function GetCountBytesInCache.
    CountBytesInCache(proxy_base_->GetCountBytesInCache()),
    /// @brief Function GetFinishBytes.
    FinishBytes(proxy_base_->GetFinishBytes()),
    /// @brief Function GetGetBlockService.
    GetBlockService(proxy_base_->GetGetBlockService()),
    /// @brief Function GetGetCryptoPrimitiveId.
    GetCryptoPrimitiveId(proxy_base_->GetGetCryptoPrimitiveId()),
    /// @brief Function GetGetTransformation.
    GetTransformation(proxy_base_->GetGetTransformation()),
    /// @brief Function GetIsBytewiseMode.
    IsBytewiseMode(proxy_base_->GetIsBytewiseMode()),
    /// @brief Function GetIsInitialized.
    IsInitialized(proxy_base_->GetIsInitialized()),
    /// @brief Function GetIsSeekableMode.
    IsSeekableMode(proxy_base_->GetIsSeekableMode()),
    /// @brief Function GetProcessBlocks.
    ProcessBlocks(proxy_base_->GetProcessBlocks()),
    /// @brief Function GetProcessByte.
    ProcessByte(proxy_base_->GetProcessByte()),
    /// @brief Function GetReset.
    Reset(proxy_base_->GetReset()),
    /// @brief Function GetSeek.
    Seek(proxy_base_->GetSeek()),
    /// @brief Function GetSetKey.
    SetKey(proxy_base_->GetSetKey()),
    /// @brief Function GetStartReadOnlyMem.
    StartReadOnlyMem(proxy_base_->GetStartReadOnlyMem()),
    /// @brief Function GetStartSecretSeed.
    StartSecretSeed(proxy_base_->GetStartSecretSeed())
  {}

  /// @brief Proxy shall be move constructable.
  explicit StreamCipherContextProxy(StreamCipherContextProxy&&) = default;

  /// @brief Proxy shall be move assignable.
  StreamCipherContextProxy& operator=(StreamCipherContextProxy&&) = default;

  /// @brief Proxy shall not be copy constructable.
  explicit StreamCipherContextProxy(const StreamCipherContextProxy&) = delete;

  /// @brief Proxy shall not be copy assignable.
  StreamCipherContextProxy& operator=(const StreamCipherContextProxy&) = delete;

  /// @brief Method for CountBytesInCache.
  methods::CountBytesInCache& CountBytesInCache;
  /// @brief Method for FinishBytes.
  methods::FinishBytes& FinishBytes;
  /// @brief Method for GetBlockService.
  methods::GetBlockService& GetBlockService;
  /// @brief Method for GetCryptoPrimitiveId.
  methods::GetCryptoPrimitiveId& GetCryptoPrimitiveId;
  /// @brief Method for GetTransformation.
  methods::GetTransformation& GetTransformation;
  /// @brief Method for IsBytewiseMode.
  methods::IsBytewiseMode& IsBytewiseMode;
  /// @brief Method for IsInitialized.
  methods::IsInitialized& IsInitialized;
  /// @brief Method for IsSeekableMode.
  methods::IsSeekableMode& IsSeekableMode;
  /// @brief Method for ProcessBlocks.
  methods::ProcessBlocks& ProcessBlocks;
  /// @brief Method for ProcessByte.
  methods::ProcessByte& ProcessByte;
  /// @brief Method for Reset.
  methods::Reset& Reset;
  /// @brief Method for Seek.
  methods::Seek& Seek;
  /// @brief Method for SetKey.
  methods::SetKey& SetKey;
  /// @brief Method for StartReadOnlyMem.
  methods::StartReadOnlyMem& StartReadOnlyMem;
  /// @brief Method for StartSecretSeed.
  methods::StartSecretSeed& StartSecretSeed;
};
} // namespace proxy

} // namespace streamcipher
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_STREAMCIPHER_STREAMCIPHERCONTEXT_PROXY_H_

