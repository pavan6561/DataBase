// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : cryptoproviderinterface_proxy.h
//
// Purpose     : Implementation of file cryptoproviderinterface_proxy.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYPTOPROVIDER_CRYPTOPROVIDERINTERFACE_PROXY_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYPTOPROVIDER_CRYPTOPROVIDERINTERFACE_PROXY_H_

#include <ara/com/internal/proxy/ara_proxy_base.h>
#include "ara/crypto/ipccom/cryp/cryptoprovider/cryptoproviderinterface_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace cryptoprovider
{
namespace proxy
{

namespace methods
{
  /// @brief Using for CreateAuthCipher.
  using CreateAuthCipher = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateAuthCipherOutput(const CryptoAlgId& )>;
  /// @brief Using for CreateDecryptorPrivate.
  using CreateDecryptorPrivate = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateDecryptorPrivateOutput(const CryptoAlgId& )>;
  /// @brief Using for CreateEncryptorPublic.
  using CreateEncryptorPublic = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateEncryptorPublicOutput(const CryptoAlgId& )>;
  /// @brief Using for CreateHashDigest.
  using CreateHashDigest = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateHashDigestOutput(const CryptoAlgId& ,const CryptoReadOnlyMemRegion& )>;
  /// @brief Using for CreateHashFunction.
  using CreateHashFunction = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateHashFunctionOutput(const CryptoAlgId& )>;
  /// @brief Using for CreateKeyAgreementPrivate.
  using CreateKeyAgreementPrivate = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateKeyAgreementPrivateOutput(const CryptoAlgId& )>;
  /// @brief Using for CreateKeyDecapsulatorPrivate.
  using CreateKeyDecapsulatorPrivate = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateKeyDecapsulatorPrivateOutput(const CryptoAlgId& )>;
  /// @brief Using for CreateKeyDerivationFunction.
  using CreateKeyDerivationFunction = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateKeyDerivationFunctionOutput(const CryptoAlgId& )>;
  /// @brief Using for CreateKeyEncapsulatorPublic.
  using CreateKeyEncapsulatorPublic = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateKeyEncapsulatorPublicOutput(const CryptoAlgId& )>;
  /// @brief Using for CreateMessageAuthCode.
  using CreateMessageAuthCode = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateMessageAuthCodeOutput(const CryptoAlgId& )>;
  /// @brief Using for CreateMsgRecoveryPublic.
  using CreateMsgRecoveryPublic = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateMsgRecoveryPublicOutput(const CryptoAlgId& )>;
  /// @brief Using for CreateRandomGenerator.
  using CreateRandomGenerator = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateRandomGeneratorOutput(const CryptoAlgId& ,const Boolean& )>;
  /// @brief Using for CreateSigEncodePrivate.
  using CreateSigEncodePrivate = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateSigEncodePrivateOutput(const CryptoAlgId& )>;
  /// @brief Using for CreateSignature.
  using CreateSignature = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateSignatureOutput(const CryptoAlgId& ,const CryptoReadOnlyMemRegion& ,const RestrictedUseObjectStructure& ,const CryptoAlgId& )>;
  /// @brief Using for CreateSignerPrivate.
  using CreateSignerPrivate = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateSignerPrivateOutput(const CryptoAlgId& )>;
  /// @brief Using for CreateStreamCipher.
  using CreateStreamCipher = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateStreamCipherOutput(const CryptoAlgId& )>;
  /// @brief Using for CreateSymmetricBlockCipher.
  using CreateSymmetricBlockCipher = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateSymmetricBlockCipherOutput(const CryptoAlgId& )>;
  /// @brief Using for CreateSymmetricKeyWrapper.
  using CreateSymmetricKeyWrapper = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateSymmetricKeyWrapperOutput(const CryptoAlgId& )>;
  /// @brief Using for CreateVerifierPublic.
  using CreateVerifierPublic = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateVerifierPublicOutput(const CryptoAlgId& )>;
  /// @brief Using for GenPrivateKey.
  using GenPrivateKey = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::GenPrivateKeyOutput(const CryptoAlgId& ,const CryptoAllowedUsageFlags& ,const Boolean& ,const Boolean& )>;
  /// @brief Using for GenSeed.
  using GenSeed = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::GenSeedOutput(const CryptoAlgId& ,const CryptoAllowedUsageFlags& ,const Boolean& ,const Boolean& )>;
  /// @brief Using for GenSymmetricKey.
  using GenSymmetricKey = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::GenSymmetricKeyOutput(const CryptoAlgId& ,const CryptoAllowedUsageFlags& ,const Boolean& ,const Boolean& )>;
  /// @brief Using for LoadObject.
  using LoadObject = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::LoadObjectOutput(const CryptoServiceInstanceId& )>;
  /// @brief Using for LoadPrivateKey.
  using LoadPrivateKey = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::LoadPrivateKeyOutput(const CryptoServiceInstanceId& )>;
  /// @brief Using for LoadPublicKey.
  using LoadPublicKey = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::LoadPublicKeyOutput(const CryptoServiceInstanceId& )>;
  /// @brief Using for LoadSecretSeed.
  using LoadSecretSeed = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::LoadSecretSeedOutput(const CryptoServiceInstanceId& )>;
  /// @brief Using for LoadSymmetricKey.
  using LoadSymmetricKey = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::LoadSymmetricKeyOutput(const CryptoServiceInstanceId& )>;
  /// @brief Using for StopCryptoProviderService.
  using StopCryptoProviderService = ara::com::internal::proxy::Method<void(const CryptoProviderServiceType& ,const CryptoServiceInstanceId& )>;
} // namespace methods



/// @brief Class for CryptoProviderInterfaceProxyBase.
class CryptoProviderInterfaceProxyBase : public ara::com::internal::proxy::ProxyBindingBase, public ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface {
 public:
  /// @brief Method for CreateAuthCipher.
  virtual methods::CreateAuthCipher& GetCreateAuthCipher() = 0;
  /// @brief Method for CreateDecryptorPrivate.
  virtual methods::CreateDecryptorPrivate& GetCreateDecryptorPrivate() = 0;
  /// @brief Method for CreateEncryptorPublic.
  virtual methods::CreateEncryptorPublic& GetCreateEncryptorPublic() = 0;
  /// @brief Method for CreateHashDigest.
  virtual methods::CreateHashDigest& GetCreateHashDigest() = 0;
  /// @brief Method for CreateHashFunction.
  virtual methods::CreateHashFunction& GetCreateHashFunction() = 0;
  /// @brief Method for CreateKeyAgreementPrivate.
  virtual methods::CreateKeyAgreementPrivate& GetCreateKeyAgreementPrivate() = 0;
  /// @brief Method for CreateKeyDecapsulatorPrivate.
  virtual methods::CreateKeyDecapsulatorPrivate& GetCreateKeyDecapsulatorPrivate() = 0;
  /// @brief Method for CreateKeyDerivationFunction.
  virtual methods::CreateKeyDerivationFunction& GetCreateKeyDerivationFunction() = 0;
  /// @brief Method for CreateKeyEncapsulatorPublic.
  virtual methods::CreateKeyEncapsulatorPublic& GetCreateKeyEncapsulatorPublic() = 0;
  /// @brief Method for CreateMessageAuthCode.
  virtual methods::CreateMessageAuthCode& GetCreateMessageAuthCode() = 0;
  /// @brief Method for CreateMsgRecoveryPublic.
  virtual methods::CreateMsgRecoveryPublic& GetCreateMsgRecoveryPublic() = 0;
  /// @brief Method for CreateRandomGenerator.
  virtual methods::CreateRandomGenerator& GetCreateRandomGenerator() = 0;
  /// @brief Method for CreateSigEncodePrivate.
  virtual methods::CreateSigEncodePrivate& GetCreateSigEncodePrivate() = 0;
  /// @brief Method for CreateSignature.
  virtual methods::CreateSignature& GetCreateSignature() = 0;
  /// @brief Method for CreateSignerPrivate.
  virtual methods::CreateSignerPrivate& GetCreateSignerPrivate() = 0;
  /// @brief Method for CreateStreamCipher.
  virtual methods::CreateStreamCipher& GetCreateStreamCipher() = 0;
  /// @brief Method for CreateSymmetricBlockCipher.
  virtual methods::CreateSymmetricBlockCipher& GetCreateSymmetricBlockCipher() = 0;
  /// @brief Method for CreateSymmetricKeyWrapper.
  virtual methods::CreateSymmetricKeyWrapper& GetCreateSymmetricKeyWrapper() = 0;
  /// @brief Method for CreateVerifierPublic.
  virtual methods::CreateVerifierPublic& GetCreateVerifierPublic() = 0;
  /// @brief Method for GenPrivateKey.
  virtual methods::GenPrivateKey& GetGenPrivateKey() = 0;
  /// @brief Method for GenSeed.
  virtual methods::GenSeed& GetGenSeed() = 0;
  /// @brief Method for GenSymmetricKey.
  virtual methods::GenSymmetricKey& GetGenSymmetricKey() = 0;
  /// @brief Method for LoadObject.
  virtual methods::LoadObject& GetLoadObject() = 0;
  /// @brief Method for LoadPrivateKey.
  virtual methods::LoadPrivateKey& GetLoadPrivateKey() = 0;
  /// @brief Method for LoadPublicKey.
  virtual methods::LoadPublicKey& GetLoadPublicKey() = 0;
  /// @brief Method for LoadSecretSeed.
  virtual methods::LoadSecretSeed& GetLoadSecretSeed() = 0;
  /// @brief Method for LoadSymmetricKey.
  virtual methods::LoadSymmetricKey& GetLoadSymmetricKey() = 0;
  /// @brief Method for StopCryptoProviderService.
  virtual methods::StopCryptoProviderService& GetStopCryptoProviderService() = 0;
};

/// @brief Class for CryptoProviderInterfaceProxy.
class CryptoProviderInterfaceProxy : public ara::com::internal::proxy::ProxyBase<CryptoProviderInterfaceProxyBase>, public ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface {
 public:
  /// @brief Definition for CryptoProviderInterfaceProxy.
  explicit CryptoProviderInterfaceProxy(const HandleType& proxy_base_factory) :
    ara::com::internal::proxy::ProxyBase<CryptoProviderInterfaceProxyBase>(proxy_base_factory),
    /// @brief Function GetCreateAuthCipher.
    CreateAuthCipher(proxy_base_->GetCreateAuthCipher()),
    /// @brief Function GetCreateDecryptorPrivate.
    CreateDecryptorPrivate(proxy_base_->GetCreateDecryptorPrivate()),
    /// @brief Function GetCreateEncryptorPublic.
    CreateEncryptorPublic(proxy_base_->GetCreateEncryptorPublic()),
    /// @brief Function GetCreateHashDigest.
    CreateHashDigest(proxy_base_->GetCreateHashDigest()),
    /// @brief Function GetCreateHashFunction.
    CreateHashFunction(proxy_base_->GetCreateHashFunction()),
    /// @brief Function GetCreateKeyAgreementPrivate.
    CreateKeyAgreementPrivate(proxy_base_->GetCreateKeyAgreementPrivate()),
    /// @brief Function GetCreateKeyDecapsulatorPrivate.
    CreateKeyDecapsulatorPrivate(proxy_base_->GetCreateKeyDecapsulatorPrivate()),
    /// @brief Function GetCreateKeyDerivationFunction.
    CreateKeyDerivationFunction(proxy_base_->GetCreateKeyDerivationFunction()),
    /// @brief Function GetCreateKeyEncapsulatorPublic.
    CreateKeyEncapsulatorPublic(proxy_base_->GetCreateKeyEncapsulatorPublic()),
    /// @brief Function GetCreateMessageAuthCode.
    CreateMessageAuthCode(proxy_base_->GetCreateMessageAuthCode()),
    /// @brief Function GetCreateMsgRecoveryPublic.
    CreateMsgRecoveryPublic(proxy_base_->GetCreateMsgRecoveryPublic()),
    /// @brief Function GetCreateRandomGenerator.
    CreateRandomGenerator(proxy_base_->GetCreateRandomGenerator()),
    /// @brief Function GetCreateSigEncodePrivate.
    CreateSigEncodePrivate(proxy_base_->GetCreateSigEncodePrivate()),
    /// @brief Function GetCreateSignature.
    CreateSignature(proxy_base_->GetCreateSignature()),
    /// @brief Function GetCreateSignerPrivate.
    CreateSignerPrivate(proxy_base_->GetCreateSignerPrivate()),
    /// @brief Function GetCreateStreamCipher.
    CreateStreamCipher(proxy_base_->GetCreateStreamCipher()),
    /// @brief Function GetCreateSymmetricBlockCipher.
    CreateSymmetricBlockCipher(proxy_base_->GetCreateSymmetricBlockCipher()),
    /// @brief Function GetCreateSymmetricKeyWrapper.
    CreateSymmetricKeyWrapper(proxy_base_->GetCreateSymmetricKeyWrapper()),
    /// @brief Function GetCreateVerifierPublic.
    CreateVerifierPublic(proxy_base_->GetCreateVerifierPublic()),
    /// @brief Function GetGenPrivateKey.
    GenPrivateKey(proxy_base_->GetGenPrivateKey()),
    /// @brief Function GetGenSeed.
    GenSeed(proxy_base_->GetGenSeed()),
    /// @brief Function GetGenSymmetricKey.
    GenSymmetricKey(proxy_base_->GetGenSymmetricKey()),
    /// @brief Function GetLoadObject.
    LoadObject(proxy_base_->GetLoadObject()),
    /// @brief Function GetLoadPrivateKey.
    LoadPrivateKey(proxy_base_->GetLoadPrivateKey()),
    /// @brief Function GetLoadPublicKey.
    LoadPublicKey(proxy_base_->GetLoadPublicKey()),
    /// @brief Function GetLoadSecretSeed.
    LoadSecretSeed(proxy_base_->GetLoadSecretSeed()),
    /// @brief Function GetLoadSymmetricKey.
    LoadSymmetricKey(proxy_base_->GetLoadSymmetricKey()),
    /// @brief Function GetStopCryptoProviderService.
    StopCryptoProviderService(proxy_base_->GetStopCryptoProviderService())
  {}

  /// @brief Proxy shall be move constructable.
  explicit CryptoProviderInterfaceProxy(CryptoProviderInterfaceProxy&&) = default;

  /// @brief Proxy shall be move assignable.
  CryptoProviderInterfaceProxy& operator=(CryptoProviderInterfaceProxy&&) = default;

  /// @brief Proxy shall not be copy constructable.
  explicit CryptoProviderInterfaceProxy(const CryptoProviderInterfaceProxy&) = delete;

  /// @brief Proxy shall not be copy assignable.
  CryptoProviderInterfaceProxy& operator=(const CryptoProviderInterfaceProxy&) = delete;

  /// @brief Method for CreateAuthCipher.
  methods::CreateAuthCipher& CreateAuthCipher;
  /// @brief Method for CreateDecryptorPrivate.
  methods::CreateDecryptorPrivate& CreateDecryptorPrivate;
  /// @brief Method for CreateEncryptorPublic.
  methods::CreateEncryptorPublic& CreateEncryptorPublic;
  /// @brief Method for CreateHashDigest.
  methods::CreateHashDigest& CreateHashDigest;
  /// @brief Method for CreateHashFunction.
  methods::CreateHashFunction& CreateHashFunction;
  /// @brief Method for CreateKeyAgreementPrivate.
  methods::CreateKeyAgreementPrivate& CreateKeyAgreementPrivate;
  /// @brief Method for CreateKeyDecapsulatorPrivate.
  methods::CreateKeyDecapsulatorPrivate& CreateKeyDecapsulatorPrivate;
  /// @brief Method for CreateKeyDerivationFunction.
  methods::CreateKeyDerivationFunction& CreateKeyDerivationFunction;
  /// @brief Method for CreateKeyEncapsulatorPublic.
  methods::CreateKeyEncapsulatorPublic& CreateKeyEncapsulatorPublic;
  /// @brief Method for CreateMessageAuthCode.
  methods::CreateMessageAuthCode& CreateMessageAuthCode;
  /// @brief Method for CreateMsgRecoveryPublic.
  methods::CreateMsgRecoveryPublic& CreateMsgRecoveryPublic;
  /// @brief Method for CreateRandomGenerator.
  methods::CreateRandomGenerator& CreateRandomGenerator;
  /// @brief Method for CreateSigEncodePrivate.
  methods::CreateSigEncodePrivate& CreateSigEncodePrivate;
  /// @brief Method for CreateSignature.
  methods::CreateSignature& CreateSignature;
  /// @brief Method for CreateSignerPrivate.
  methods::CreateSignerPrivate& CreateSignerPrivate;
  /// @brief Method for CreateStreamCipher.
  methods::CreateStreamCipher& CreateStreamCipher;
  /// @brief Method for CreateSymmetricBlockCipher.
  methods::CreateSymmetricBlockCipher& CreateSymmetricBlockCipher;
  /// @brief Method for CreateSymmetricKeyWrapper.
  methods::CreateSymmetricKeyWrapper& CreateSymmetricKeyWrapper;
  /// @brief Method for CreateVerifierPublic.
  methods::CreateVerifierPublic& CreateVerifierPublic;
  /// @brief Method for GenPrivateKey.
  methods::GenPrivateKey& GenPrivateKey;
  /// @brief Method for GenSeed.
  methods::GenSeed& GenSeed;
  /// @brief Method for GenSymmetricKey.
  methods::GenSymmetricKey& GenSymmetricKey;
  /// @brief Method for LoadObject.
  methods::LoadObject& LoadObject;
  /// @brief Method for LoadPrivateKey.
  methods::LoadPrivateKey& LoadPrivateKey;
  /// @brief Method for LoadPublicKey.
  methods::LoadPublicKey& LoadPublicKey;
  /// @brief Method for LoadSecretSeed.
  methods::LoadSecretSeed& LoadSecretSeed;
  /// @brief Method for LoadSymmetricKey.
  methods::LoadSymmetricKey& LoadSymmetricKey;
  /// @brief Method for StopCryptoProviderService.
  methods::StopCryptoProviderService& StopCryptoProviderService;
};
} // namespace proxy

} // namespace cryptoprovider
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYPTOPROVIDER_CRYPTOPROVIDERINTERFACE_PROXY_H_

