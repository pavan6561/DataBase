// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : service_desc_certificate.h
//
// Purpose     : Implementation of file service_desc_certificate.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_VSOMEIP_ARA_CRYPTO_IPCCOM_X509_CERTIFICATE_SERVICE_DESC_CERTIFICATE_H_
#define CRYPTOCLIENTEXE_VSOMEIP_ARA_CRYPTO_IPCCOM_X509_CERTIFICATE_SERVICE_DESC_CERTIFICATE_H_

#include "ara/crypto/ipccom/x509/certificate/certificate_common.h"


#include <ara/com/internal/vsomeip/vsomeip_types.h>


namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace x509
{
namespace certificate
{

namespace certificate_binding
{
namespace vsomeip
{
namespace descriptors
{

namespace internal
{

/// @brief class for Service.
class Service {
 public:
  /// @brief Service Destructor.
  virtual ~Service() noexcept {};
  static constexpr ara::com::internal::vsomeip::types::ServiceId service_id{0x26AE};
  static constexpr ara::com::internal::vsomeip::types::ServiceVersionMajor service_version_major{0x1};
  static constexpr ara::com::internal::vsomeip::types::ServiceVersionMinor service_version_minor{0x0};
  static constexpr ara::com::internal::vsomeip::types::ServiceVersionMinor required_minimum_minor_version{0xFFFFFFFFU};
  
  static constexpr bool is_minimum_minor_policy_enabled{false};
  static constexpr uint32_t blacklisted_versions_length{0};
  static constexpr ara::com::internal::vsomeip::types::BlacklistedVersion blacklisted_versions[1] {
            // If blacklistedVersions are absence then just a placeholder  { 0x0, 0x0 } is added. Value will never be used but required for compilation.
            { 0x0, 0x0 }
      };
    };
}
/// @brief class for AuthorityKeyId.
class AuthorityKeyId : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x7};
  static constexpr bool is_reliable{false};
};
/// @brief class for EndTime.
class EndTime : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x5};
  static constexpr bool is_reliable{false};
};
/// @brief class for ExportPublicly.
class ExportPublicly : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x12};
  static constexpr bool is_reliable{false};
};
/// @brief class for GetConstraints.
class GetConstraints : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x10};
  static constexpr bool is_reliable{false};
};
/// @brief class for GetFingerprint.
class GetFingerprint : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0xA};
  static constexpr bool is_reliable{false};
};
/// @brief class for GetPathLimit.
class GetPathLimit : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0xF};
  static constexpr bool is_reliable{false};
};
/// @brief class for GetStatus.
class GetStatus : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0xB};
  static constexpr bool is_reliable{false};
};
/// @brief class for IsCa.
class IsCa : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0xE};
  static constexpr bool is_reliable{false};
};
/// @brief class for IsRoot.
class IsRoot : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x2};
  static constexpr bool is_reliable{false};
};
/// @brief class for IssuerDn.
class IssuerDn : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x3};
  static constexpr bool is_reliable{false};
};
/// @brief class for MyProvider.
class MyProvider : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x11};
  static constexpr bool is_reliable{false};
};
/// @brief class for SerialNumber.
class SerialNumber : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x6};
  static constexpr bool is_reliable{false};
};
/// @brief class for StartTime.
class StartTime : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x4};
  static constexpr bool is_reliable{false};
};
/// @brief class for SubjectDn.
class SubjectDn : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0xD};
  static constexpr bool is_reliable{false};
};
/// @brief class for SubjectKeyId.
class SubjectKeyId : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x8};
  static constexpr bool is_reliable{false};
};
/// @brief class for SubjectPubKey.
class SubjectPubKey : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0xC};
  static constexpr bool is_reliable{false};
};
/// @brief class for VerifyMe.
class VerifyMe : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x9};
  static constexpr bool is_reliable{false};
};
/// @brief class for X509Version.
class X509Version : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x1};
  static constexpr bool is_reliable{false};
};



} // namespace descriptors
} // namespace vsomeip
} // namespace certificate_binding
} // namespace certificate
} // namespace x509
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_VSOMEIP_ARA_CRYPTO_IPCCOM_X509_CERTIFICATE_SERVICE_DESC_CERTIFICATE_H_


