// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : verifierpubliccontext_proxy.h
//
// Purpose     : Implementation of file verifierpubliccontext_proxy.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_VERIFIERPUBLICCONTEXT_VERIFIERPUBLICCONTEXT_PROXY_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_VERIFIERPUBLICCONTEXT_VERIFIERPUBLICCONTEXT_PROXY_H_

#include <ara/com/internal/proxy/ara_proxy_base.h>
#include "ara/crypto/ipccom/cryp/verifierpubliccontext/verifierpubliccontext_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace verifierpubliccontext
{
namespace proxy
{

namespace methods
{
  /// @brief Using for GetCryptoPrimitiveId.
  using GetCryptoPrimitiveId = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::verifierpubliccontext::VerifierPublicContext::GetCryptoPrimitiveIdOutput()>;
  /// @brief Using for GetSignatureService.
  using GetSignatureService = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::verifierpubliccontext::VerifierPublicContext::GetSignatureServiceOutput()>;
  /// @brief Using for IsInitialized.
  using IsInitialized = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::verifierpubliccontext::VerifierPublicContext::IsInitializedOutput()>;
  /// @brief Using for Reset.
  using Reset = ara::com::internal::proxy::Method<void()>;
  /// @brief Using for SetKey.
  using SetKey = ara::com::internal::proxy::Method<void(const CryptoServiceInstanceId& )>;
  /// @brief Using for VerifyPrehashedHashFunction.
  using VerifyPrehashedHashFunction = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::verifierpubliccontext::VerifierPublicContext::VerifyPrehashedHashFunctionOutput(const CryptoServiceInstanceId& ,const CryptoReadOnlyMemRegion& ,const CryptoReadOnlyMemRegion& )>;
  /// @brief Using for VerifyPrehashedHashFunctionSignature.
  using VerifyPrehashedHashFunctionSignature = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::verifierpubliccontext::VerifierPublicContext::VerifyPrehashedHashFunctionSignatureOutput(const CryptoServiceInstanceId& ,const CryptoServiceInstanceId& ,const CryptoReadOnlyMemRegion& )>;
  /// @brief Using for VerifyPrehashedReadOnly.
  using VerifyPrehashedReadOnly = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::verifierpubliccontext::VerifierPublicContext::VerifyPrehashedReadOnlyOutput(const CryptoAlgId& ,const CryptoReadOnlyMemRegion& ,const CryptoServiceInstanceId& ,const CryptoReadOnlyMemRegion& )>;
  /// @brief Using for VerifyReadOnly.
  using VerifyReadOnly = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::verifierpubliccontext::VerifierPublicContext::VerifyReadOnlyOutput(const CryptoReadOnlyMemRegion& ,const CryptoReadOnlyMemRegion& ,const CryptoReadOnlyMemRegion& )>;
} // namespace methods



/// @brief Class for VerifierPublicContextProxyBase.
class VerifierPublicContextProxyBase : public ara::com::internal::proxy::ProxyBindingBase, public ara::crypto::ipccom::cryp::verifierpubliccontext::VerifierPublicContext {
 public:
  /// @brief Method for GetCryptoPrimitiveId.
  virtual methods::GetCryptoPrimitiveId& GetGetCryptoPrimitiveId() = 0;
  /// @brief Method for GetSignatureService.
  virtual methods::GetSignatureService& GetGetSignatureService() = 0;
  /// @brief Method for IsInitialized.
  virtual methods::IsInitialized& GetIsInitialized() = 0;
  /// @brief Method for Reset.
  virtual methods::Reset& GetReset() = 0;
  /// @brief Method for SetKey.
  virtual methods::SetKey& GetSetKey() = 0;
  /// @brief Method for VerifyPrehashedHashFunction.
  virtual methods::VerifyPrehashedHashFunction& GetVerifyPrehashedHashFunction() = 0;
  /// @brief Method for VerifyPrehashedHashFunctionSignature.
  virtual methods::VerifyPrehashedHashFunctionSignature& GetVerifyPrehashedHashFunctionSignature() = 0;
  /// @brief Method for VerifyPrehashedReadOnly.
  virtual methods::VerifyPrehashedReadOnly& GetVerifyPrehashedReadOnly() = 0;
  /// @brief Method for VerifyReadOnly.
  virtual methods::VerifyReadOnly& GetVerifyReadOnly() = 0;
};

/// @brief Class for VerifierPublicContextProxy.
class VerifierPublicContextProxy : public ara::com::internal::proxy::ProxyBase<VerifierPublicContextProxyBase>, public ara::crypto::ipccom::cryp::verifierpubliccontext::VerifierPublicContext {
 public:
  /// @brief Definition for VerifierPublicContextProxy.
  explicit VerifierPublicContextProxy(const HandleType& proxy_base_factory) :
    ara::com::internal::proxy::ProxyBase<VerifierPublicContextProxyBase>(proxy_base_factory),
    /// @brief Function GetGetCryptoPrimitiveId.
    GetCryptoPrimitiveId(proxy_base_->GetGetCryptoPrimitiveId()),
    /// @brief Function GetGetSignatureService.
    GetSignatureService(proxy_base_->GetGetSignatureService()),
    /// @brief Function GetIsInitialized.
    IsInitialized(proxy_base_->GetIsInitialized()),
    /// @brief Function GetReset.
    Reset(proxy_base_->GetReset()),
    /// @brief Function GetSetKey.
    SetKey(proxy_base_->GetSetKey()),
    /// @brief Function GetVerifyPrehashedHashFunction.
    VerifyPrehashedHashFunction(proxy_base_->GetVerifyPrehashedHashFunction()),
    /// @brief Function GetVerifyPrehashedHashFunctionSignature.
    VerifyPrehashedHashFunctionSignature(proxy_base_->GetVerifyPrehashedHashFunctionSignature()),
    /// @brief Function GetVerifyPrehashedReadOnly.
    VerifyPrehashedReadOnly(proxy_base_->GetVerifyPrehashedReadOnly()),
    /// @brief Function GetVerifyReadOnly.
    VerifyReadOnly(proxy_base_->GetVerifyReadOnly())
  {}

  /// @brief Proxy shall be move constructable.
  explicit VerifierPublicContextProxy(VerifierPublicContextProxy&&) = default;

  /// @brief Proxy shall be move assignable.
  VerifierPublicContextProxy& operator=(VerifierPublicContextProxy&&) = default;

  /// @brief Proxy shall not be copy constructable.
  explicit VerifierPublicContextProxy(const VerifierPublicContextProxy&) = delete;

  /// @brief Proxy shall not be copy assignable.
  VerifierPublicContextProxy& operator=(const VerifierPublicContextProxy&) = delete;

  /// @brief Method for GetCryptoPrimitiveId.
  methods::GetCryptoPrimitiveId& GetCryptoPrimitiveId;
  /// @brief Method for GetSignatureService.
  methods::GetSignatureService& GetSignatureService;
  /// @brief Method for IsInitialized.
  methods::IsInitialized& IsInitialized;
  /// @brief Method for Reset.
  methods::Reset& Reset;
  /// @brief Method for SetKey.
  methods::SetKey& SetKey;
  /// @brief Method for VerifyPrehashedHashFunction.
  methods::VerifyPrehashedHashFunction& VerifyPrehashedHashFunction;
  /// @brief Method for VerifyPrehashedHashFunctionSignature.
  methods::VerifyPrehashedHashFunctionSignature& VerifyPrehashedHashFunctionSignature;
  /// @brief Method for VerifyPrehashedReadOnly.
  methods::VerifyPrehashedReadOnly& VerifyPrehashedReadOnly;
  /// @brief Method for VerifyReadOnly.
  methods::VerifyReadOnly& VerifyReadOnly;
};
} // namespace proxy

} // namespace verifierpubliccontext
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_VERIFIERPUBLICCONTEXT_VERIFIERPUBLICCONTEXT_PROXY_H_

