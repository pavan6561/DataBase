// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : x509extensions_proxy.h
//
// Purpose     : Implementation of file x509extensions_proxy.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_EXT_X509EXTENSIONS_PROXY_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_EXT_X509EXTENSIONS_PROXY_H_

#include <ara/com/internal/proxy/ara_proxy_base.h>
#include "ara/crypto/ipccom/x509/ext/x509extensions_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace x509
{
namespace ext
{
namespace proxy
{

namespace methods
{
  /// @brief Using for Count.
  using Count = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::ext::X509Extensions::CountOutput()>;
  /// @brief Using for ExportPublicly.
  using ExportPublicly = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::ext::X509Extensions::ExportPubliclyOutput(const uint32& )>;
  /// @brief Using for MyProvider.
  using MyProvider = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::ext::X509Extensions::MyProviderOutput()>;
} // namespace methods



/// @brief Class for X509ExtensionsProxyBase.
class X509ExtensionsProxyBase : public ara::com::internal::proxy::ProxyBindingBase, public ara::crypto::ipccom::x509::ext::X509Extensions {
 public:
  /// @brief Method for Count.
  virtual methods::Count& GetCount() = 0;
  /// @brief Method for ExportPublicly.
  virtual methods::ExportPublicly& GetExportPublicly() = 0;
  /// @brief Method for MyProvider.
  virtual methods::MyProvider& GetMyProvider() = 0;
};

/// @brief Class for X509ExtensionsProxy.
class X509ExtensionsProxy : public ara::com::internal::proxy::ProxyBase<X509ExtensionsProxyBase>, public ara::crypto::ipccom::x509::ext::X509Extensions {
 public:
  /// @brief Definition for X509ExtensionsProxy.
  explicit X509ExtensionsProxy(const HandleType& proxy_base_factory) :
    ara::com::internal::proxy::ProxyBase<X509ExtensionsProxyBase>(proxy_base_factory),
    /// @brief Function GetCount.
    Count(proxy_base_->GetCount()),
    /// @brief Function GetExportPublicly.
    ExportPublicly(proxy_base_->GetExportPublicly()),
    /// @brief Function GetMyProvider.
    MyProvider(proxy_base_->GetMyProvider())
  {}

  /// @brief Proxy shall be move constructable.
  explicit X509ExtensionsProxy(X509ExtensionsProxy&&) = default;

  /// @brief Proxy shall be move assignable.
  X509ExtensionsProxy& operator=(X509ExtensionsProxy&&) = default;

  /// @brief Proxy shall not be copy constructable.
  explicit X509ExtensionsProxy(const X509ExtensionsProxy&) = delete;

  /// @brief Proxy shall not be copy assignable.
  X509ExtensionsProxy& operator=(const X509ExtensionsProxy&) = delete;

  /// @brief Method for Count.
  methods::Count& Count;
  /// @brief Method for ExportPublicly.
  methods::ExportPublicly& ExportPublicly;
  /// @brief Method for MyProvider.
  methods::MyProvider& MyProvider;
};
} // namespace proxy

} // namespace ext
} // namespace x509
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_EXT_X509EXTENSIONS_PROXY_H_

