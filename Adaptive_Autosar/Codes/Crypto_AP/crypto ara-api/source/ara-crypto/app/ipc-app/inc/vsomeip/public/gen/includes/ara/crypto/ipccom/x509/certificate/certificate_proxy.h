// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : certificate_proxy.h
//
// Purpose     : Implementation of file certificate_proxy.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_CERTIFICATE_CERTIFICATE_PROXY_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_CERTIFICATE_CERTIFICATE_PROXY_H_

#include <ara/com/internal/proxy/ara_proxy_base.h>
#include "ara/crypto/ipccom/x509/certificate/certificate_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace x509
{
namespace certificate
{
namespace proxy
{

namespace methods
{
  /// @brief Using for AuthorityKeyId.
  using AuthorityKeyId = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::certificate::Certificate::AuthorityKeyIdOutput()>;
  /// @brief Using for EndTime.
  using EndTime = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::certificate::Certificate::EndTimeOutput()>;
  /// @brief Using for ExportPublicly.
  using ExportPublicly = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::certificate::Certificate::ExportPubliclyOutput(const uint32& )>;
  /// @brief Using for GetConstraints.
  using GetConstraints = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::certificate::Certificate::GetConstraintsOutput()>;
  /// @brief Using for GetFingerprint.
  using GetFingerprint = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::certificate::Certificate::GetFingerprintOutput(const CryptoServiceInstanceId&,const uint32& )>;
  /// @brief Using for GetPathLimit.
  using GetPathLimit = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::certificate::Certificate::GetPathLimitOutput()>;
  /// @brief Using for GetStatus.
  using GetStatus = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::certificate::Certificate::GetStatusOutput()>;
  /// @brief Using for IsCa.
  using IsCa = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::certificate::Certificate::IsCaOutput()>;
  /// @brief Using for IsRoot.
  using IsRoot = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::certificate::Certificate::IsRootOutput()>;
  /// @brief Using for IssuerDn.
  using IssuerDn = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::certificate::Certificate::IssuerDnOutput()>;
  /// @brief Using for MyProvider.
  using MyProvider = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::certificate::Certificate::MyProviderOutput()>;
  /// @brief Using for SerialNumber.
  using SerialNumber = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::certificate::Certificate::SerialNumberOutput()>;
  /// @brief Using for StartTime.
  using StartTime = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::certificate::Certificate::StartTimeOutput()>;
  /// @brief Using for SubjectDn.
  using SubjectDn = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::certificate::Certificate::SubjectDnOutput()>;
  /// @brief Using for SubjectKeyId.
  using SubjectKeyId = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::certificate::Certificate::SubjectKeyIdOutput()>;
  /// @brief Using for SubjectPubKey.
  using SubjectPubKey = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::certificate::Certificate::SubjectPubKeyOutput(const CryptoServiceInstanceId& )>;
  /// @brief Using for VerifyMe.
  using VerifyMe = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::certificate::Certificate::VerifyMeOutput(const CryptoServiceInstanceId& )>;
  /// @brief Using for X509Version.
  using X509Version = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::certificate::Certificate::X509VersionOutput()>;
} // namespace methods



/// @brief Class for CertificateProxyBase.
class CertificateProxyBase : public ara::com::internal::proxy::ProxyBindingBase, public ara::crypto::ipccom::x509::certificate::Certificate {
 public:
  /// @brief Method for AuthorityKeyId.
  virtual methods::AuthorityKeyId& GetAuthorityKeyId() = 0;
  /// @brief Method for EndTime.
  virtual methods::EndTime& GetEndTime() = 0;
  /// @brief Method for ExportPublicly.
  virtual methods::ExportPublicly& GetExportPublicly() = 0;
  /// @brief Method for GetConstraints.
  virtual methods::GetConstraints& GetGetConstraints() = 0;
  /// @brief Method for GetFingerprint.
  virtual methods::GetFingerprint& GetGetFingerprint() = 0;
  /// @brief Method for GetPathLimit.
  virtual methods::GetPathLimit& GetGetPathLimit() = 0;
  /// @brief Method for GetStatus.
  virtual methods::GetStatus& GetGetStatus() = 0;
  /// @brief Method for IsCa.
  virtual methods::IsCa& GetIsCa() = 0;
  /// @brief Method for IsRoot.
  virtual methods::IsRoot& GetIsRoot() = 0;
  /// @brief Method for IssuerDn.
  virtual methods::IssuerDn& GetIssuerDn() = 0;
  /// @brief Method for MyProvider.
  virtual methods::MyProvider& GetMyProvider() = 0;
  /// @brief Method for SerialNumber.
  virtual methods::SerialNumber& GetSerialNumber() = 0;
  /// @brief Method for StartTime.
  virtual methods::StartTime& GetStartTime() = 0;
  /// @brief Method for SubjectDn.
  virtual methods::SubjectDn& GetSubjectDn() = 0;
  /// @brief Method for SubjectKeyId.
  virtual methods::SubjectKeyId& GetSubjectKeyId() = 0;
  /// @brief Method for SubjectPubKey.
  virtual methods::SubjectPubKey& GetSubjectPubKey() = 0;
  /// @brief Method for VerifyMe.
  virtual methods::VerifyMe& GetVerifyMe() = 0;
  /// @brief Method for X509Version.
  virtual methods::X509Version& GetX509Version() = 0;
};

/// @brief Class for CertificateProxy.
class CertificateProxy : public ara::com::internal::proxy::ProxyBase<CertificateProxyBase>, public ara::crypto::ipccom::x509::certificate::Certificate {
 public:
  /// @brief Definition for CertificateProxy.
  explicit CertificateProxy(const HandleType& proxy_base_factory) :
    ara::com::internal::proxy::ProxyBase<CertificateProxyBase>(proxy_base_factory),
    /// @brief Function GetAuthorityKeyId.
    AuthorityKeyId(proxy_base_->GetAuthorityKeyId()),
    /// @brief Function GetEndTime.
    EndTime(proxy_base_->GetEndTime()),
    /// @brief Function GetExportPublicly.
    ExportPublicly(proxy_base_->GetExportPublicly()),
    /// @brief Function GetGetConstraints.
    GetConstraints(proxy_base_->GetGetConstraints()),
    /// @brief Function GetGetFingerprint.
    GetFingerprint(proxy_base_->GetGetFingerprint()),
    /// @brief Function GetGetPathLimit.
    GetPathLimit(proxy_base_->GetGetPathLimit()),
    /// @brief Function GetGetStatus.
    GetStatus(proxy_base_->GetGetStatus()),
    /// @brief Function GetIsCa.
    IsCa(proxy_base_->GetIsCa()),
    /// @brief Function GetIsRoot.
    IsRoot(proxy_base_->GetIsRoot()),
    /// @brief Function GetIssuerDn.
    IssuerDn(proxy_base_->GetIssuerDn()),
    /// @brief Function GetMyProvider.
    MyProvider(proxy_base_->GetMyProvider()),
    /// @brief Function GetSerialNumber.
    SerialNumber(proxy_base_->GetSerialNumber()),
    /// @brief Function GetStartTime.
    StartTime(proxy_base_->GetStartTime()),
    /// @brief Function GetSubjectDn.
    SubjectDn(proxy_base_->GetSubjectDn()),
    /// @brief Function GetSubjectKeyId.
    SubjectKeyId(proxy_base_->GetSubjectKeyId()),
    /// @brief Function GetSubjectPubKey.
    SubjectPubKey(proxy_base_->GetSubjectPubKey()),
    /// @brief Function GetVerifyMe.
    VerifyMe(proxy_base_->GetVerifyMe()),
    /// @brief Function GetX509Version.
    X509Version(proxy_base_->GetX509Version())
  {}

  /// @brief Proxy shall be move constructable.
  explicit CertificateProxy(CertificateProxy&&) = default;

  /// @brief Proxy shall be move assignable.
  CertificateProxy& operator=(CertificateProxy&&) = default;

  /// @brief Proxy shall not be copy constructable.
  explicit CertificateProxy(const CertificateProxy&) = delete;

  /// @brief Proxy shall not be copy assignable.
  CertificateProxy& operator=(const CertificateProxy&) = delete;

  /// @brief Method for AuthorityKeyId.
  methods::AuthorityKeyId& AuthorityKeyId;
  /// @brief Method for EndTime.
  methods::EndTime& EndTime;
  /// @brief Method for ExportPublicly.
  methods::ExportPublicly& ExportPublicly;
  /// @brief Method for GetConstraints.
  methods::GetConstraints& GetConstraints;
  /// @brief Method for GetFingerprint.
  methods::GetFingerprint& GetFingerprint;
  /// @brief Method for GetPathLimit.
  methods::GetPathLimit& GetPathLimit;
  /// @brief Method for GetStatus.
  methods::GetStatus& GetStatus;
  /// @brief Method for IsCa.
  methods::IsCa& IsCa;
  /// @brief Method for IsRoot.
  methods::IsRoot& IsRoot;
  /// @brief Method for IssuerDn.
  methods::IssuerDn& IssuerDn;
  /// @brief Method for MyProvider.
  methods::MyProvider& MyProvider;
  /// @brief Method for SerialNumber.
  methods::SerialNumber& SerialNumber;
  /// @brief Method for StartTime.
  methods::StartTime& StartTime;
  /// @brief Method for SubjectDn.
  methods::SubjectDn& SubjectDn;
  /// @brief Method for SubjectKeyId.
  methods::SubjectKeyId& SubjectKeyId;
  /// @brief Method for SubjectPubKey.
  methods::SubjectPubKey& SubjectPubKey;
  /// @brief Method for VerifyMe.
  methods::VerifyMe& VerifyMe;
  /// @brief Method for X509Version.
  methods::X509Version& X509Version;
};
} // namespace proxy

} // namespace certificate
} // namespace x509
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_CERTIFICATE_CERTIFICATE_PROXY_H_

