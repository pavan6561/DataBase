// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : x509provider_proxy.h
//
// Purpose     : Implementation of file x509provider_proxy.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-15T10:49:48+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_X509PROVIDER_PROXY_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_X509PROVIDER_PROXY_H_

#include <ara/com/internal/proxy/ara_proxy_base.h>
#include "ara/crypto/ipccom/x509/x509provider_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace x509
{
namespace proxy
{

namespace methods
{
  /// @brief Using for BuildDn.
  using BuildDn = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::BuildDnOutput(const String& )>;
  /// @brief Using for CheckCertStatus.
  using CheckCertStatus = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::CheckCertStatusOutput(const CryptoServiceInstanceId& ,const CryptoServiceInstanceId& )>;
  /// @brief Using for CheckCertStatusWithCertList.
  using CheckCertStatusWithCertList = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::CheckCertStatusWithCertListOutput(const ByteVectorCertType& ,const CryptoServiceInstanceId& )>;
  /// @brief Using for CleanupVolatileStorage.
  using CleanupVolatileStorage = ara::com::internal::proxy::Method<void()>;
  /// @brief Using for CountCertsInChain.
  using CountCertsInChain = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::CountCertsInChainOutput(const CryptoReadOnlyMemRegion& ,const uint32& )>;
  /// @brief Using for CreateCertSignRequest.
  using CreateCertSignRequest = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::CreateCertSignRequestOutput(const CryptoServiceInstanceId& ,const CryptoReadOnlyMemRegion& ,const CryptoReadOnlyMemRegion& ,const uint64& )>;
  /// @brief Using for CreateEmptyDn.
  using CreateEmptyDn = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::CreateEmptyDnOutput(const uint64& )>;
  /// @brief Using for CreateEmptyExtensions.
  using CreateEmptyExtensions = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::CreateEmptyExtensionsOutput(const uint64& )>;
  /// @brief Using for CreateOcspRequest.
  using CreateOcspRequest = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::CreateOcspRequestOutput(const CryptoServiceInstanceId& ,const CryptoServiceInstanceId& )>;
  /// @brief Using for CreateOcspRequestWithCertList.
  using CreateOcspRequestWithCertList = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::CreateOcspRequestWithCertListOutput(const ByteVectorCertType& ,const CryptoServiceInstanceId& )>;
  /// @brief Using for DecodeDn.
  using DecodeDn = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::DecodeDnOutput(const CryptoReadOnlyMemRegion& ,const uint32& )>;
  /// @brief Using for FindCertByDn.
  using FindCertByDn = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::FindCertByDnOutput(const CryptoServiceInstanceId& ,const CryptoServiceInstanceId& ,const Int64& )>;
  /// @brief Using for FindCertByKeyIds.
  using FindCertByKeyIds = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::FindCertByKeyIdsOutput(const CryptoReadOnlyMemRegion& ,const CryptoReadOnlyMemRegion& )>;
  /// @brief Using for FindCertBySn.
  using FindCertBySn = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::FindCertBySnOutput(const CryptoReadOnlyMemRegion& ,const CryptoServiceInstanceId& )>;
  /// @brief Using for Import.
  using Import = ara::com::internal::proxy::Method<void(const CryptoServiceInstanceId& ,const String& )>;
  /// @brief Using for ImportCrl.
  using ImportCrl = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::ImportCrlOutput(const CryptoReadOnlyMemRegion& )>;
  /// @brief Using for LoadCertificate.
  using LoadCertificate = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::LoadCertificateOutput(const String& )>;
  /// @brief Using for ParseCert.
  using ParseCert = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::ParseCertOutput(const CryptoReadOnlyMemRegion& ,const uint32& )>;
  /// @brief Using for ParseCertChain.
  using ParseCertChain = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::ParseCertChainOutput(const uint32& ,const CryptoReadOnlyMemRegion& )>;
  /// @brief Using for ParseCertChainVectorReadOnlyMemRegion.
  using ParseCertChainVectorReadOnlyMemRegion = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::ParseCertChainVectorReadOnlyMemRegionOutput(const ByteVectorReadOnlyMemRegion& ,const uint32& )>;
  /// @brief Using for ParseCertSignRequest.
  using ParseCertSignRequest = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::ParseCertSignRequestOutput(const CryptoReadOnlyMemRegion& ,const Boolean& )>;
  /// @brief Using for ParseOcspResponse.
  using ParseOcspResponse = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::ParseOcspResponseOutput(const CryptoReadOnlyMemRegion& )>;
  /// @brief Using for Remove.
  using Remove = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::RemoveOutput(const CryptoServiceInstanceId& )>;
  /// @brief Using for SetAsRootOfTrust.
  using SetAsRootOfTrust = ara::com::internal::proxy::Method<void(const CryptoServiceInstanceId& )>;
  /// @brief Using for SetPendingStatus.
  using SetPendingStatus = ara::com::internal::proxy::Method<void(const CryptoServiceInstanceId& )>;
  /// @brief Using for VerifyCert.
  using VerifyCert = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::VerifyCertOutput(const CryptoServiceInstanceId& ,const CryptoServiceInstanceId& )>;
  /// @brief Using for VerifyCertChain.
  using VerifyCertChain = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::X509Provider::VerifyCertChainOutput(const ByteVectorCertType& ,const CryptoServiceInstanceId& )>;
} // namespace methods



/// @brief Class for X509ProviderProxyBase.
class X509ProviderProxyBase : public ara::com::internal::proxy::ProxyBindingBase, public ara::crypto::ipccom::x509::X509Provider {
 public:
  /// @brief Method for BuildDn.
  virtual methods::BuildDn& GetBuildDn() = 0;
  /// @brief Method for CheckCertStatus.
  virtual methods::CheckCertStatus& GetCheckCertStatus() = 0;
  /// @brief Method for CheckCertStatusWithCertList.
  virtual methods::CheckCertStatusWithCertList& GetCheckCertStatusWithCertList() = 0;
  /// @brief Method for CleanupVolatileStorage.
  virtual methods::CleanupVolatileStorage& GetCleanupVolatileStorage() = 0;
  /// @brief Method for CountCertsInChain.
  virtual methods::CountCertsInChain& GetCountCertsInChain() = 0;
  /// @brief Method for CreateCertSignRequest.
  virtual methods::CreateCertSignRequest& GetCreateCertSignRequest() = 0;
  /// @brief Method for CreateEmptyDn.
  virtual methods::CreateEmptyDn& GetCreateEmptyDn() = 0;
  /// @brief Method for CreateEmptyExtensions.
  virtual methods::CreateEmptyExtensions& GetCreateEmptyExtensions() = 0;
  /// @brief Method for CreateOcspRequest.
  virtual methods::CreateOcspRequest& GetCreateOcspRequest() = 0;
  /// @brief Method for CreateOcspRequestWithCertList.
  virtual methods::CreateOcspRequestWithCertList& GetCreateOcspRequestWithCertList() = 0;
  /// @brief Method for DecodeDn.
  virtual methods::DecodeDn& GetDecodeDn() = 0;
  /// @brief Method for FindCertByDn.
  virtual methods::FindCertByDn& GetFindCertByDn() = 0;
  /// @brief Method for FindCertByKeyIds.
  virtual methods::FindCertByKeyIds& GetFindCertByKeyIds() = 0;
  /// @brief Method for FindCertBySn.
  virtual methods::FindCertBySn& GetFindCertBySn() = 0;
  /// @brief Method for Import.
  virtual methods::Import& GetImport() = 0;
  /// @brief Method for ImportCrl.
  virtual methods::ImportCrl& GetImportCrl() = 0;
  /// @brief Method for LoadCertificate.
  virtual methods::LoadCertificate& GetLoadCertificate() = 0;
  /// @brief Method for ParseCert.
  virtual methods::ParseCert& GetParseCert() = 0;
  /// @brief Method for ParseCertChain.
  virtual methods::ParseCertChain& GetParseCertChain() = 0;
  /// @brief Method for ParseCertChainVectorReadOnlyMemRegion.
  virtual methods::ParseCertChainVectorReadOnlyMemRegion& GetParseCertChainVectorReadOnlyMemRegion() = 0;
  /// @brief Method for ParseCertSignRequest.
  virtual methods::ParseCertSignRequest& GetParseCertSignRequest() = 0;
  /// @brief Method for ParseOcspResponse.
  virtual methods::ParseOcspResponse& GetParseOcspResponse() = 0;
  /// @brief Method for Remove.
  virtual methods::Remove& GetRemove() = 0;
  /// @brief Method for SetAsRootOfTrust.
  virtual methods::SetAsRootOfTrust& GetSetAsRootOfTrust() = 0;
  /// @brief Method for SetPendingStatus.
  virtual methods::SetPendingStatus& GetSetPendingStatus() = 0;
  /// @brief Method for VerifyCert.
  virtual methods::VerifyCert& GetVerifyCert() = 0;
  /// @brief Method for VerifyCertChain.
  virtual methods::VerifyCertChain& GetVerifyCertChain() = 0;
};

/// @brief Class for X509ProviderProxy.
class X509ProviderProxy : public ara::com::internal::proxy::ProxyBase<X509ProviderProxyBase>, public ara::crypto::ipccom::x509::X509Provider {
 public:
  /// @brief Definition for X509ProviderProxy.
  explicit X509ProviderProxy(const HandleType& proxy_base_factory) :
    ara::com::internal::proxy::ProxyBase<X509ProviderProxyBase>(proxy_base_factory),
    /// @brief Function GetBuildDn.
    BuildDn(proxy_base_->GetBuildDn()),
    /// @brief Function GetCheckCertStatus.
    CheckCertStatus(proxy_base_->GetCheckCertStatus()),
    /// @brief Function GetCheckCertStatusWithCertList.
    CheckCertStatusWithCertList(proxy_base_->GetCheckCertStatusWithCertList()),
    /// @brief Function GetCleanupVolatileStorage.
    CleanupVolatileStorage(proxy_base_->GetCleanupVolatileStorage()),
    /// @brief Function GetCountCertsInChain.
    CountCertsInChain(proxy_base_->GetCountCertsInChain()),
    /// @brief Function GetCreateCertSignRequest.
    CreateCertSignRequest(proxy_base_->GetCreateCertSignRequest()),
    /// @brief Function GetCreateEmptyDn.
    CreateEmptyDn(proxy_base_->GetCreateEmptyDn()),
    /// @brief Function GetCreateEmptyExtensions.
    CreateEmptyExtensions(proxy_base_->GetCreateEmptyExtensions()),
    /// @brief Function GetCreateOcspRequest.
    CreateOcspRequest(proxy_base_->GetCreateOcspRequest()),
    /// @brief Function GetCreateOcspRequestWithCertList.
    CreateOcspRequestWithCertList(proxy_base_->GetCreateOcspRequestWithCertList()),
    /// @brief Function GetDecodeDn.
    DecodeDn(proxy_base_->GetDecodeDn()),
    /// @brief Function GetFindCertByDn.
    FindCertByDn(proxy_base_->GetFindCertByDn()),
    /// @brief Function GetFindCertByKeyIds.
    FindCertByKeyIds(proxy_base_->GetFindCertByKeyIds()),
    /// @brief Function GetFindCertBySn.
    FindCertBySn(proxy_base_->GetFindCertBySn()),
    /// @brief Function GetImport.
    Import(proxy_base_->GetImport()),
    /// @brief Function GetImportCrl.
    ImportCrl(proxy_base_->GetImportCrl()),
    /// @brief Function GetLoadCertificate.
    LoadCertificate(proxy_base_->GetLoadCertificate()),
    /// @brief Function GetParseCert.
    ParseCert(proxy_base_->GetParseCert()),
    /// @brief Function GetParseCertChain.
    ParseCertChain(proxy_base_->GetParseCertChain()),
    /// @brief Function GetParseCertChainVectorReadOnlyMemRegion.
    ParseCertChainVectorReadOnlyMemRegion(proxy_base_->GetParseCertChainVectorReadOnlyMemRegion()),
    /// @brief Function GetParseCertSignRequest.
    ParseCertSignRequest(proxy_base_->GetParseCertSignRequest()),
    /// @brief Function GetParseOcspResponse.
    ParseOcspResponse(proxy_base_->GetParseOcspResponse()),
    /// @brief Function GetRemove.
    Remove(proxy_base_->GetRemove()),
    /// @brief Function GetSetAsRootOfTrust.
    SetAsRootOfTrust(proxy_base_->GetSetAsRootOfTrust()),
    /// @brief Function GetSetPendingStatus.
    SetPendingStatus(proxy_base_->GetSetPendingStatus()),
    /// @brief Function GetVerifyCert.
    VerifyCert(proxy_base_->GetVerifyCert()),
    /// @brief Function GetVerifyCertChain.
    VerifyCertChain(proxy_base_->GetVerifyCertChain())
  {}

  /// @brief Proxy shall be move constructable.
  explicit X509ProviderProxy(X509ProviderProxy&&) = default;

  /// @brief Proxy shall be move assignable.
  X509ProviderProxy& operator=(X509ProviderProxy&&) = default;

  /// @brief Proxy shall not be copy constructable.
  explicit X509ProviderProxy(const X509ProviderProxy&) = delete;

  /// @brief Proxy shall not be copy assignable.
  X509ProviderProxy& operator=(const X509ProviderProxy&) = delete;

  /// @brief Method for BuildDn.
  methods::BuildDn& BuildDn;
  /// @brief Method for CheckCertStatus.
  methods::CheckCertStatus& CheckCertStatus;
  /// @brief Method for CheckCertStatusWithCertList.
  methods::CheckCertStatusWithCertList& CheckCertStatusWithCertList;
  /// @brief Method for CleanupVolatileStorage.
  methods::CleanupVolatileStorage& CleanupVolatileStorage;
  /// @brief Method for CountCertsInChain.
  methods::CountCertsInChain& CountCertsInChain;
  /// @brief Method for CreateCertSignRequest.
  methods::CreateCertSignRequest& CreateCertSignRequest;
  /// @brief Method for CreateEmptyDn.
  methods::CreateEmptyDn& CreateEmptyDn;
  /// @brief Method for CreateEmptyExtensions.
  methods::CreateEmptyExtensions& CreateEmptyExtensions;
  /// @brief Method for CreateOcspRequest.
  methods::CreateOcspRequest& CreateOcspRequest;
  /// @brief Method for CreateOcspRequestWithCertList.
  methods::CreateOcspRequestWithCertList& CreateOcspRequestWithCertList;
  /// @brief Method for DecodeDn.
  methods::DecodeDn& DecodeDn;
  /// @brief Method for FindCertByDn.
  methods::FindCertByDn& FindCertByDn;
  /// @brief Method for FindCertByKeyIds.
  methods::FindCertByKeyIds& FindCertByKeyIds;
  /// @brief Method for FindCertBySn.
  methods::FindCertBySn& FindCertBySn;
  /// @brief Method for Import.
  methods::Import& Import;
  /// @brief Method for ImportCrl.
  methods::ImportCrl& ImportCrl;
  /// @brief Method for LoadCertificate.
  methods::LoadCertificate& LoadCertificate;
  /// @brief Method for ParseCert.
  methods::ParseCert& ParseCert;
  /// @brief Method for ParseCertChain.
  methods::ParseCertChain& ParseCertChain;
  /// @brief Method for ParseCertChainVectorReadOnlyMemRegion.
  methods::ParseCertChainVectorReadOnlyMemRegion& ParseCertChainVectorReadOnlyMemRegion;
  /// @brief Method for ParseCertSignRequest.
  methods::ParseCertSignRequest& ParseCertSignRequest;
  /// @brief Method for ParseOcspResponse.
  methods::ParseOcspResponse& ParseOcspResponse;
  /// @brief Method for Remove.
  methods::Remove& Remove;
  /// @brief Method for SetAsRootOfTrust.
  methods::SetAsRootOfTrust& SetAsRootOfTrust;
  /// @brief Method for SetPendingStatus.
  methods::SetPendingStatus& SetPendingStatus;
  /// @brief Method for VerifyCert.
  methods::VerifyCert& VerifyCert;
  /// @brief Method for VerifyCertChain.
  methods::VerifyCertChain& VerifyCertChain;
};
} // namespace proxy

} // namespace x509
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_X509PROVIDER_PROXY_H_

