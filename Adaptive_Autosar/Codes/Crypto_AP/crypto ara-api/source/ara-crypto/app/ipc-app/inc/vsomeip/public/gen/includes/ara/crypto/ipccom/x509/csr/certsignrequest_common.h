// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : certsignrequest_common.h
//
// Purpose     : Implementation of file certsignrequest_common.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_CSR_CERTSIGNREQUEST_COMMON_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_CSR_CERTSIGNREQUEST_COMMON_H_

#include <cstring>
#include <ara/core/array.h>

#include <ara/com/types.h>

#include <ara/com/exception.h>
#include <ara/core/error_code.h>

#include "ara/crypto/ipccom/common/error/error_domain_cryptoerrordomain.h"
#include "impl_type_boolean.h"
#include "impl_type_bytevectortype.h"
#include "impl_type_cryptoserviceinstanceid.h"
#include "impl_type_uint32.h"
#include "impl_type_uint64.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace x509
{
namespace csr
{

/// @brief Class for CertSignRequest.
class  CertSignRequest {
 public:
  /// @brief Definition for CertSignRequest.
  virtual ~CertSignRequest() noexcept
  {}
  static constexpr ara::com::internal::ServiceId service_id{0x1678};
  static constexpr ara::com::internal::ServiceVersion service_version_major{0x1};
  static constexpr ara::com::internal::ServiceVersion service_version_minor{0x0};
  static constexpr ara::core::Array<ara::core::ErrorCode, 1>ExportASN1CertSignRequest_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidUsageOrder, 0),
    }
  };
  /// @brief class for ExportASN1CertSignRequestOutput.
  class ExportASN1CertSignRequestOutput
  {
    public:
    /// @brief Argument for result.
    ByteVectorType result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 3>ExportPublicly_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnknownIdentifier, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInsufficientCapacity, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnsupportedFormat, 0),
    }
  };
  /// @brief class for ExportPubliclyOutput.
  class ExportPubliclyOutput
  {
    public:
    /// @brief Argument for resultByteVector.
    ByteVectorType resultByteVector;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(resultByteVector);
    }
  };
  /// @brief class for GetConstraintsOutput.
  class GetConstraintsOutput
  {
    public:
    /// @brief Argument for keyConstraints.
    uint32 keyConstraints;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(keyConstraints);
    }
  };
  /// @brief class for GetPathLimitOutput.
  class GetPathLimitOutput
  {
    public:
    /// @brief Argument for pathLimit.
    uint32 pathLimit;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(pathLimit);
    }
  };
  /// @brief class for GetSignatureOutput.
  class GetSignatureOutput
  {
    public:
    /// @brief Argument for signatureInstanceId.
    CryptoServiceInstanceId signatureInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(signatureInstanceId);
    }
  };
  /// @brief class for IsCaOutput.
  class IsCaOutput
  {
    public:
    /// @brief Argument for result.
    Boolean result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  /// @brief class for MyProviderOutput.
  class MyProviderOutput
  {
    public:
    /// @brief Argument for myProviderInstanceId.
    CryptoServiceInstanceId myProviderInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(myProviderInstanceId);
    }
  };
  /// @brief class for SubjectDnOutput.
  class SubjectDnOutput
  {
    public:
    /// @brief Argument for x509DnInstanceId.
    CryptoServiceInstanceId x509DnInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(x509DnInstanceId);
    }
  };
  /// @brief class for SubjectPubKeyOutput.
  class SubjectPubKeyOutput
  {
    public:
    /// @brief Argument for x509PublicKeyInfoInstanceId.
    CryptoServiceInstanceId x509PublicKeyInfoInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(x509PublicKeyInfoInstanceId);
    }
  };
  /// @brief class for VerifyOutput.
  class VerifyOutput
  {
    public:
    /// @brief Argument for result.
    Boolean result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  /// @brief class for VersionOutput.
  class VersionOutput
  {
    public:
    /// @brief Argument for result.
    uint64 result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
};

} // namespace csr
} // namespace x509
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_CSR_CERTSIGNREQUEST_COMMON_H_

