// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : keystorageprovider_proxy.h
//
// Purpose     : Implementation of file keystorageprovider_proxy.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_KEYS_KEYSTORAGEPROVIDER_KEYSTORAGEPROVIDER_PROXY_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_KEYS_KEYSTORAGEPROVIDER_KEYSTORAGEPROVIDER_PROXY_H_

#include <ara/com/internal/proxy/ara_proxy_base.h>
#include "ara/crypto/ipccom/keys/keystorageprovider/keystorageprovider_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace keys
{
namespace keystorageprovider
{
namespace proxy
{

namespace methods
{
  /// @brief Using for BeginTransaction.
  using BeginTransaction = ara::com::internal::proxy::Method<void(const uint64& )>;
  /// @brief Using for GetRegisteredObserver.
  using GetRegisteredObserver = ara::com::internal::proxy::Method<ara::crypto::ipccom::keys::keystorageprovider::KeyStorageProvider::GetRegisteredObserverOutput()>;
  /// @brief Using for LoadKeySlot.
  using LoadKeySlot = ara::com::internal::proxy::Method<ara::crypto::ipccom::keys::keystorageprovider::KeyStorageProvider::LoadKeySlotOutput(const String& )>;
  /// @brief Using for RegisterObserver.
  using RegisterObserver = ara::com::internal::proxy::Method<ara::crypto::ipccom::keys::keystorageprovider::KeyStorageProvider::RegisterObserverOutput(const CryptoServiceInstanceId& )>;
  /// @brief Using for RollbackTransaction.
  using RollbackTransaction = ara::com::internal::proxy::Method<void(const uint64& )>;
  /// @brief Using for UnsubscribeObserver.
  using UnsubscribeObserver = ara::com::internal::proxy::Method<void(const CryptoServiceInstanceId& )>;
} // namespace methods



/// @brief Class for KeyStorageProviderProxyBase.
class KeyStorageProviderProxyBase : public ara::com::internal::proxy::ProxyBindingBase, public ara::crypto::ipccom::keys::keystorageprovider::KeyStorageProvider {
 public:
  /// @brief Method for BeginTransaction.
  virtual methods::BeginTransaction& GetBeginTransaction() = 0;
  /// @brief Method for GetRegisteredObserver.
  virtual methods::GetRegisteredObserver& GetGetRegisteredObserver() = 0;
  /// @brief Method for LoadKeySlot.
  virtual methods::LoadKeySlot& GetLoadKeySlot() = 0;
  /// @brief Method for RegisterObserver.
  virtual methods::RegisterObserver& GetRegisterObserver() = 0;
  /// @brief Method for RollbackTransaction.
  virtual methods::RollbackTransaction& GetRollbackTransaction() = 0;
  /// @brief Method for UnsubscribeObserver.
  virtual methods::UnsubscribeObserver& GetUnsubscribeObserver() = 0;
};

/// @brief Class for KeyStorageProviderProxy.
class KeyStorageProviderProxy : public ara::com::internal::proxy::ProxyBase<KeyStorageProviderProxyBase>, public ara::crypto::ipccom::keys::keystorageprovider::KeyStorageProvider {
 public:
  /// @brief Definition for KeyStorageProviderProxy.
  explicit KeyStorageProviderProxy(const HandleType& proxy_base_factory) :
    ara::com::internal::proxy::ProxyBase<KeyStorageProviderProxyBase>(proxy_base_factory),
    /// @brief Function GetBeginTransaction.
    BeginTransaction(proxy_base_->GetBeginTransaction()),
    /// @brief Function GetGetRegisteredObserver.
    GetRegisteredObserver(proxy_base_->GetGetRegisteredObserver()),
    /// @brief Function GetLoadKeySlot.
    LoadKeySlot(proxy_base_->GetLoadKeySlot()),
    /// @brief Function GetRegisterObserver.
    RegisterObserver(proxy_base_->GetRegisterObserver()),
    /// @brief Function GetRollbackTransaction.
    RollbackTransaction(proxy_base_->GetRollbackTransaction()),
    /// @brief Function GetUnsubscribeObserver.
    UnsubscribeObserver(proxy_base_->GetUnsubscribeObserver())
  {}

  /// @brief Proxy shall be move constructable.
  explicit KeyStorageProviderProxy(KeyStorageProviderProxy&&) = default;

  /// @brief Proxy shall be move assignable.
  KeyStorageProviderProxy& operator=(KeyStorageProviderProxy&&) = default;

  /// @brief Proxy shall not be copy constructable.
  explicit KeyStorageProviderProxy(const KeyStorageProviderProxy&) = delete;

  /// @brief Proxy shall not be copy assignable.
  KeyStorageProviderProxy& operator=(const KeyStorageProviderProxy&) = delete;

  /// @brief Method for BeginTransaction.
  methods::BeginTransaction& BeginTransaction;
  /// @brief Method for GetRegisteredObserver.
  methods::GetRegisteredObserver& GetRegisteredObserver;
  /// @brief Method for LoadKeySlot.
  methods::LoadKeySlot& LoadKeySlot;
  /// @brief Method for RegisterObserver.
  methods::RegisterObserver& RegisterObserver;
  /// @brief Method for RollbackTransaction.
  methods::RollbackTransaction& RollbackTransaction;
  /// @brief Method for UnsubscribeObserver.
  methods::UnsubscribeObserver& UnsubscribeObserver;
};
} // namespace proxy

} // namespace keystorageprovider
} // namespace keys
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_KEYS_KEYSTORAGEPROVIDER_KEYSTORAGEPROVIDER_PROXY_H_

