// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : iointerface_proxy.h
//
// Purpose     : Implementation of file iointerface_proxy.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_COMMON_IOINTERFACE_IOINTERFACE_PROXY_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_COMMON_IOINTERFACE_IOINTERFACE_PROXY_H_

#include <ara/com/internal/proxy/ara_proxy_base.h>
#include "ara/crypto/ipccom/common/iointerface/iointerface_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace common
{
namespace iointerface
{
namespace proxy
{

namespace methods
{
  /// @brief Using for GetAllowedUsage.
  using GetAllowedUsage = ara::com::internal::proxy::Method<ara::crypto::ipccom::common::iointerface::IOInterface::GetAllowedUsageOutput()>;
  /// @brief Using for GetCapacity.
  using GetCapacity = ara::com::internal::proxy::Method<ara::crypto::ipccom::common::iointerface::IOInterface::GetCapacityOutput()>;
  /// @brief Using for GetCryptoObjectType.
  using GetCryptoObjectType = ara::com::internal::proxy::Method<ara::crypto::ipccom::common::iointerface::IOInterface::GetCryptoObjectTypeOutput()>;
  /// @brief Using for GetObjectId.
  using GetObjectId = ara::com::internal::proxy::Method<ara::crypto::ipccom::common::iointerface::IOInterface::GetObjectIdOutput()>;
  /// @brief Using for GetPayloadSize.
  using GetPayloadSize = ara::com::internal::proxy::Method<ara::crypto::ipccom::common::iointerface::IOInterface::GetPayloadSizeOutput()>;
  /// @brief Using for GetPrimitiveId.
  using GetPrimitiveId = ara::com::internal::proxy::Method<ara::crypto::ipccom::common::iointerface::IOInterface::GetPrimitiveIdOutput()>;
  /// @brief Using for GetTypeRestriction.
  using GetTypeRestriction = ara::com::internal::proxy::Method<ara::crypto::ipccom::common::iointerface::IOInterface::GetTypeRestrictionOutput()>;
  /// @brief Using for IsObjectExportable.
  using IsObjectExportable = ara::com::internal::proxy::Method<ara::crypto::ipccom::common::iointerface::IOInterface::IsObjectExportableOutput()>;
  /// @brief Using for IsObjectSession.
  using IsObjectSession = ara::com::internal::proxy::Method<ara::crypto::ipccom::common::iointerface::IOInterface::IsObjectSessionOutput()>;
  /// @brief Using for IsValid.
  using IsValid = ara::com::internal::proxy::Method<ara::crypto::ipccom::common::iointerface::IOInterface::IsValidOutput()>;
  /// @brief Using for IsVolatile.
  using IsVolatile = ara::com::internal::proxy::Method<ara::crypto::ipccom::common::iointerface::IOInterface::IsVolatileOutput()>;
  /// @brief Using for IsWritable.
  using IsWritable = ara::com::internal::proxy::Method<ara::crypto::ipccom::common::iointerface::IOInterface::IsWritableOutput()>;
} // namespace methods



/// @brief Class for IOInterfaceProxyBase.
class IOInterfaceProxyBase : public ara::com::internal::proxy::ProxyBindingBase, public ara::crypto::ipccom::common::iointerface::IOInterface {
 public:
  /// @brief Method for GetAllowedUsage.
  virtual methods::GetAllowedUsage& GetGetAllowedUsage() = 0;
  /// @brief Method for GetCapacity.
  virtual methods::GetCapacity& GetGetCapacity() = 0;
  /// @brief Method for GetCryptoObjectType.
  virtual methods::GetCryptoObjectType& GetGetCryptoObjectType() = 0;
  /// @brief Method for GetObjectId.
  virtual methods::GetObjectId& GetGetObjectId() = 0;
  /// @brief Method for GetPayloadSize.
  virtual methods::GetPayloadSize& GetGetPayloadSize() = 0;
  /// @brief Method for GetPrimitiveId.
  virtual methods::GetPrimitiveId& GetGetPrimitiveId() = 0;
  /// @brief Method for GetTypeRestriction.
  virtual methods::GetTypeRestriction& GetGetTypeRestriction() = 0;
  /// @brief Method for IsObjectExportable.
  virtual methods::IsObjectExportable& GetIsObjectExportable() = 0;
  /// @brief Method for IsObjectSession.
  virtual methods::IsObjectSession& GetIsObjectSession() = 0;
  /// @brief Method for IsValid.
  virtual methods::IsValid& GetIsValid() = 0;
  /// @brief Method for IsVolatile.
  virtual methods::IsVolatile& GetIsVolatile() = 0;
  /// @brief Method for IsWritable.
  virtual methods::IsWritable& GetIsWritable() = 0;
};

/// @brief Class for IOInterfaceProxy.
class IOInterfaceProxy : public ara::com::internal::proxy::ProxyBase<IOInterfaceProxyBase>, public ara::crypto::ipccom::common::iointerface::IOInterface {
 public:
  /// @brief Definition for IOInterfaceProxy.
  explicit IOInterfaceProxy(const HandleType& proxy_base_factory) :
    ara::com::internal::proxy::ProxyBase<IOInterfaceProxyBase>(proxy_base_factory),
    /// @brief Function GetGetAllowedUsage.
    GetAllowedUsage(proxy_base_->GetGetAllowedUsage()),
    /// @brief Function GetGetCapacity.
    GetCapacity(proxy_base_->GetGetCapacity()),
    /// @brief Function GetGetCryptoObjectType.
    GetCryptoObjectType(proxy_base_->GetGetCryptoObjectType()),
    /// @brief Function GetGetObjectId.
    GetObjectId(proxy_base_->GetGetObjectId()),
    /// @brief Function GetGetPayloadSize.
    GetPayloadSize(proxy_base_->GetGetPayloadSize()),
    /// @brief Function GetGetPrimitiveId.
    GetPrimitiveId(proxy_base_->GetGetPrimitiveId()),
    /// @brief Function GetGetTypeRestriction.
    GetTypeRestriction(proxy_base_->GetGetTypeRestriction()),
    /// @brief Function GetIsObjectExportable.
    IsObjectExportable(proxy_base_->GetIsObjectExportable()),
    /// @brief Function GetIsObjectSession.
    IsObjectSession(proxy_base_->GetIsObjectSession()),
    /// @brief Function GetIsValid.
    IsValid(proxy_base_->GetIsValid()),
    /// @brief Function GetIsVolatile.
    IsVolatile(proxy_base_->GetIsVolatile()),
    /// @brief Function GetIsWritable.
    IsWritable(proxy_base_->GetIsWritable())
  {}

  /// @brief Proxy shall be move constructable.
  explicit IOInterfaceProxy(IOInterfaceProxy&&) = default;

  /// @brief Proxy shall be move assignable.
  IOInterfaceProxy& operator=(IOInterfaceProxy&&) = default;

  /// @brief Proxy shall not be copy constructable.
  explicit IOInterfaceProxy(const IOInterfaceProxy&) = delete;

  /// @brief Proxy shall not be copy assignable.
  IOInterfaceProxy& operator=(const IOInterfaceProxy&) = delete;

  /// @brief Method for GetAllowedUsage.
  methods::GetAllowedUsage& GetAllowedUsage;
  /// @brief Method for GetCapacity.
  methods::GetCapacity& GetCapacity;
  /// @brief Method for GetCryptoObjectType.
  methods::GetCryptoObjectType& GetCryptoObjectType;
  /// @brief Method for GetObjectId.
  methods::GetObjectId& GetObjectId;
  /// @brief Method for GetPayloadSize.
  methods::GetPayloadSize& GetPayloadSize;
  /// @brief Method for GetPrimitiveId.
  methods::GetPrimitiveId& GetPrimitiveId;
  /// @brief Method for GetTypeRestriction.
  methods::GetTypeRestriction& GetTypeRestriction;
  /// @brief Method for IsObjectExportable.
  methods::IsObjectExportable& IsObjectExportable;
  /// @brief Method for IsObjectSession.
  methods::IsObjectSession& IsObjectSession;
  /// @brief Method for IsValid.
  methods::IsValid& IsValid;
  /// @brief Method for IsVolatile.
  methods::IsVolatile& IsVolatile;
  /// @brief Method for IsWritable.
  methods::IsWritable& IsWritable;
};
} // namespace proxy

} // namespace iointerface
} // namespace common
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_COMMON_IOINTERFACE_IOINTERFACE_PROXY_H_

