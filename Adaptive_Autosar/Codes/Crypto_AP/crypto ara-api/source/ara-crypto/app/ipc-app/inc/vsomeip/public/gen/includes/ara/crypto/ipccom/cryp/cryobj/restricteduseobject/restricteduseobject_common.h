// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : restricteduseobject_common.h
//
// Purpose     : Implementation of file restricteduseobject_common.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYOBJ_RESTRICTEDUSEOBJECT_RESTRICTEDUSEOBJECT_COMMON_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYOBJ_RESTRICTEDUSEOBJECT_RESTRICTEDUSEOBJECT_COMMON_H_

#include <cstring>
#include <ara/core/array.h>

#include <ara/com/types.h>

#include <ara/com/exception.h>
#include <ara/core/error_code.h>

#include "ara/crypto/ipccom/common/error/error_domain_cryptoerrordomain.h"
#include "impl_type_boolean.h"
#include "impl_type_cryptoallowedusageflags.h"
#include "impl_type_cryptoobjectidentifier.h"
#include "impl_type_cryptoprimitiveiduptrstructure.h"
#include "impl_type_cryptoserviceinstanceid.h"
#include "impl_type_uint32.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace cryobj
{
namespace restricteduseobject
{

/// @brief Class for RestrictedUseObject.
class  RestrictedUseObject {
 public:
  /// @brief Definition for RestrictedUseObject.
  virtual ~RestrictedUseObject() noexcept
  {}
  static constexpr ara::com::internal::ServiceId service_id{0x6B77};
  static constexpr ara::com::internal::ServiceVersion service_version_major{0x1};
  static constexpr ara::com::internal::ServiceVersion service_version_minor{0x0};
  /// @brief class for GetAllowedUsageOutput.
  class GetAllowedUsageOutput
  {
    public:
    /// @brief Argument for Usages.
    CryptoAllowedUsageFlags Usages;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(Usages);
    }
  };
  /// @brief class for GetCryptoPrimitiveIdOutput.
  class GetCryptoPrimitiveIdOutput
  {
    public:
    /// @brief Argument for cryptoPrimitiveIdUptrStruct.
    cryptoPrimitiveIdUptrStructure cryptoPrimitiveIdUptrStruct;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(cryptoPrimitiveIdUptrStruct);
    }
  };
  /// @brief class for GetObjectIdOutput.
  class GetObjectIdOutput
  {
    public:
    /// @brief Argument for COIdentifier.
    CryptoObjectIdentifier COIdentifier;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(COIdentifier);
    }
  };
  /// @brief class for GetPayloadSizeOutput.
  class GetPayloadSizeOutput
  {
    public:
    /// @brief Argument for size.
    uint32 size;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(size);
    }
  };
  /// @brief class for HasDependenceOutput.
  class HasDependenceOutput
  {
    public:
    /// @brief Argument for COIdentifier.
    CryptoObjectIdentifier COIdentifier;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(COIdentifier);
    }
  };
  /// @brief class for IsExportableOutput.
  class IsExportableOutput
  {
    public:
    /// @brief Argument for Bool.
    Boolean Bool;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(Bool);
    }
  };
  /// @brief class for IsSessionOutput.
  class IsSessionOutput
  {
    public:
    /// @brief Argument for Bool.
    Boolean Bool;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(Bool);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 5>Save_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnreservedResource, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kModifiedResource, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInsufficientCapacity, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kContentRestrictions, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kIncompatibleObject, 0),
    }
  };
};

} // namespace restricteduseobject
} // namespace cryobj
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYOBJ_RESTRICTEDUSEOBJECT_RESTRICTEDUSEOBJECT_COMMON_H_

