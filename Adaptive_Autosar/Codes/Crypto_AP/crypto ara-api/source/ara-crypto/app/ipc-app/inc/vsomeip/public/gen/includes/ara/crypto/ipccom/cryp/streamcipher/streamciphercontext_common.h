// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : streamciphercontext_common.h
//
// Purpose     : Implementation of file streamciphercontext_common.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_STREAMCIPHER_STREAMCIPHERCONTEXT_COMMON_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_STREAMCIPHER_STREAMCIPHERCONTEXT_COMMON_H_

#include <cstring>
#include <ara/core/array.h>

#include <ara/com/types.h>

#include <ara/com/exception.h>
#include <ara/core/error_code.h>

#include "ara/crypto/ipccom/common/error/error_domain_cryptoerrordomain.h"
#include "impl_type_boolean.h"
#include "impl_type_bytevectortype.h"
#include "impl_type_cryptoprimitiveiduptrstructure.h"
#include "impl_type_cryptoreadonlymemregion.h"
#include "impl_type_cryptoserviceinstanceid.h"
#include "impl_type_cryptotransformdatatype.h"
#include "impl_type_int64.h"
#include "impl_type_uint64.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace streamcipher
{

/// @brief Class for StreamCipherContext.
class  StreamCipherContext {
 public:
  /// @brief Definition for StreamCipherContext.
  virtual ~StreamCipherContext() noexcept
  {}
  static constexpr ara::com::internal::ServiceId service_id{0x2014};
  static constexpr ara::com::internal::ServiceVersion service_version_major{0x0};
  static constexpr ara::com::internal::ServiceVersion service_version_minor{0x1};
  /// @brief class for CountBytesInCacheOutput.
  class CountBytesInCacheOutput
  {
    public:
    /// @brief Argument for countSize.
    uint64 countSize;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(countSize);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 3>FinishBytes_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInsufficientCapacity, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInOutBuffersIntersect, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kProcessingNotStarted, 0),
    }
  };
  /// @brief class for FinishBytesOutput.
  class FinishBytesOutput
  {
    public:
    /// @brief Argument for vtrByte.
    ByteVectorType vtrByte;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(vtrByte);
    }
  };
  /// @brief class for GetBlockServiceOutput.
  class GetBlockServiceOutput
  {
    public:
    /// @brief Argument for blockServiceInstanceId.
    CryptoServiceInstanceId blockServiceInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(blockServiceInstanceId);
    }
  };
  /// @brief class for GetCryptoPrimitiveIdOutput.
  class GetCryptoPrimitiveIdOutput
  {
    public:
    /// @brief Argument for cryptoPrimitiveIdUptrStruct.
    cryptoPrimitiveIdUptrStructure cryptoPrimitiveIdUptrStruct;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(cryptoPrimitiveIdUptrStruct);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 1>GetTransformation_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUninitializedContext, 0),
    }
  };
  /// @brief class for GetTransformationOutput.
  class GetTransformationOutput
  {
    public:
    /// @brief Argument for transfor.
    CryptoTransformDataType transfor;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(transfor);
    }
  };
  /// @brief class for IsBytewiseModeOutput.
  class IsBytewiseModeOutput
  {
    public:
    /// @brief Argument for isSuccess.
    Boolean isSuccess;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(isSuccess);
    }
  };
  /// @brief class for IsInitializedOutput.
  class IsInitializedOutput
  {
    public:
    /// @brief Argument for result.
    Boolean result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  /// @brief class for IsSeekableModeOutput.
  class IsSeekableModeOutput
  {
    public:
    /// @brief Argument for isSuccess.
    Boolean isSuccess;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(isSuccess);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 5>ProcessBlocks_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidInputSize, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kIncompatibleArguments, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInOutBuffersIntersect, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidUsageOrder, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kProcessingNotStarted, 0),
    }
  };
  /// @brief class for ProcessBlocksOutput.
  class ProcessBlocksOutput
  {
    public:
    /// @brief Argument for vtrByte.
    ByteVectorType vtrByte;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(vtrByte);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 3>ProcessByte_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInsufficientCapacity, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInOutBuffersIntersect, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kProcessingNotStarted, 0),
    }
  };
  /// @brief class for ProcessByteOutput.
  class ProcessByteOutput
  {
    public:
    /// @brief Argument for vtrByte.
    ByteVectorType vtrByte;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(vtrByte);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 4>Seek_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kBelowBoundary, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnsupported, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kProcessingNotStarted, 0),
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>SetKey_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kIncompatibleObject, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUsageViolation, 0),
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 3>StartReadOnlyMem_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidInputSize, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnsupported, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUninitializedContext, 0),
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 4>StartSecretSeed_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidInputSize, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnsupported, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUninitializedContext, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUsageViolation, 0),
    }
  };
};

} // namespace streamcipher
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_STREAMCIPHER_STREAMCIPHERCONTEXT_COMMON_H_

