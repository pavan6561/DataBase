// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : certsignrequest_proxy.h
//
// Purpose     : Implementation of file certsignrequest_proxy.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_CSR_CERTSIGNREQUEST_PROXY_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_CSR_CERTSIGNREQUEST_PROXY_H_

#include <ara/com/internal/proxy/ara_proxy_base.h>
#include "ara/crypto/ipccom/x509/csr/certsignrequest_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace x509
{
namespace csr
{
namespace proxy
{

namespace methods
{
  /// @brief Using for ExportASN1CertSignRequest.
  using ExportASN1CertSignRequest = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::csr::CertSignRequest::ExportASN1CertSignRequestOutput()>;
  /// @brief Using for ExportPublicly.
  using ExportPublicly = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::csr::CertSignRequest::ExportPubliclyOutput(const CryptoServiceInstanceId& )>;
  /// @brief Using for GetConstraints.
  using GetConstraints = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::csr::CertSignRequest::GetConstraintsOutput()>;
  /// @brief Using for GetPathLimit.
  using GetPathLimit = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::csr::CertSignRequest::GetPathLimitOutput()>;
  /// @brief Using for GetSignature.
  using GetSignature = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::csr::CertSignRequest::GetSignatureOutput()>;
  /// @brief Using for IsCa.
  using IsCa = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::csr::CertSignRequest::IsCaOutput()>;
  /// @brief Using for MyProvider.
  using MyProvider = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::csr::CertSignRequest::MyProviderOutput()>;
  /// @brief Using for SubjectDn.
  using SubjectDn = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::csr::CertSignRequest::SubjectDnOutput()>;
  /// @brief Using for SubjectPubKey.
  using SubjectPubKey = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::csr::CertSignRequest::SubjectPubKeyOutput(const CryptoServiceInstanceId& )>;
  /// @brief Using for Verify.
  using Verify = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::csr::CertSignRequest::VerifyOutput()>;
  /// @brief Using for Version.
  using Version = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::csr::CertSignRequest::VersionOutput()>;
} // namespace methods



/// @brief Class for CertSignRequestProxyBase.
class CertSignRequestProxyBase : public ara::com::internal::proxy::ProxyBindingBase, public ara::crypto::ipccom::x509::csr::CertSignRequest {
 public:
  /// @brief Method for ExportASN1CertSignRequest.
  virtual methods::ExportASN1CertSignRequest& GetExportASN1CertSignRequest() = 0;
  /// @brief Method for ExportPublicly.
  virtual methods::ExportPublicly& GetExportPublicly() = 0;
  /// @brief Method for GetConstraints.
  virtual methods::GetConstraints& GetGetConstraints() = 0;
  /// @brief Method for GetPathLimit.
  virtual methods::GetPathLimit& GetGetPathLimit() = 0;
  /// @brief Method for GetSignature.
  virtual methods::GetSignature& GetGetSignature() = 0;
  /// @brief Method for IsCa.
  virtual methods::IsCa& GetIsCa() = 0;
  /// @brief Method for MyProvider.
  virtual methods::MyProvider& GetMyProvider() = 0;
  /// @brief Method for SubjectDn.
  virtual methods::SubjectDn& GetSubjectDn() = 0;
  /// @brief Method for SubjectPubKey.
  virtual methods::SubjectPubKey& GetSubjectPubKey() = 0;
  /// @brief Method for Verify.
  virtual methods::Verify& GetVerify() = 0;
  /// @brief Method for Version.
  virtual methods::Version& GetVersion() = 0;
};

/// @brief Class for CertSignRequestProxy.
class CertSignRequestProxy : public ara::com::internal::proxy::ProxyBase<CertSignRequestProxyBase>, public ara::crypto::ipccom::x509::csr::CertSignRequest {
 public:
  /// @brief Definition for CertSignRequestProxy.
  explicit CertSignRequestProxy(const HandleType& proxy_base_factory) :
    ara::com::internal::proxy::ProxyBase<CertSignRequestProxyBase>(proxy_base_factory),
    /// @brief Function GetExportASN1CertSignRequest.
    ExportASN1CertSignRequest(proxy_base_->GetExportASN1CertSignRequest()),
    /// @brief Function GetExportPublicly.
    ExportPublicly(proxy_base_->GetExportPublicly()),
    /// @brief Function GetGetConstraints.
    GetConstraints(proxy_base_->GetGetConstraints()),
    /// @brief Function GetGetPathLimit.
    GetPathLimit(proxy_base_->GetGetPathLimit()),
    /// @brief Function GetGetSignature.
    GetSignature(proxy_base_->GetGetSignature()),
    /// @brief Function GetIsCa.
    IsCa(proxy_base_->GetIsCa()),
    /// @brief Function GetMyProvider.
    MyProvider(proxy_base_->GetMyProvider()),
    /// @brief Function GetSubjectDn.
    SubjectDn(proxy_base_->GetSubjectDn()),
    /// @brief Function GetSubjectPubKey.
    SubjectPubKey(proxy_base_->GetSubjectPubKey()),
    /// @brief Function GetVerify.
    Verify(proxy_base_->GetVerify()),
    /// @brief Function GetVersion.
    Version(proxy_base_->GetVersion())
  {}

  /// @brief Proxy shall be move constructable.
  explicit CertSignRequestProxy(CertSignRequestProxy&&) = default;

  /// @brief Proxy shall be move assignable.
  CertSignRequestProxy& operator=(CertSignRequestProxy&&) = default;

  /// @brief Proxy shall not be copy constructable.
  explicit CertSignRequestProxy(const CertSignRequestProxy&) = delete;

  /// @brief Proxy shall not be copy assignable.
  CertSignRequestProxy& operator=(const CertSignRequestProxy&) = delete;

  /// @brief Method for ExportASN1CertSignRequest.
  methods::ExportASN1CertSignRequest& ExportASN1CertSignRequest;
  /// @brief Method for ExportPublicly.
  methods::ExportPublicly& ExportPublicly;
  /// @brief Method for GetConstraints.
  methods::GetConstraints& GetConstraints;
  /// @brief Method for GetPathLimit.
  methods::GetPathLimit& GetPathLimit;
  /// @brief Method for GetSignature.
  methods::GetSignature& GetSignature;
  /// @brief Method for IsCa.
  methods::IsCa& IsCa;
  /// @brief Method for MyProvider.
  methods::MyProvider& MyProvider;
  /// @brief Method for SubjectDn.
  methods::SubjectDn& SubjectDn;
  /// @brief Method for SubjectPubKey.
  methods::SubjectPubKey& SubjectPubKey;
  /// @brief Method for Verify.
  methods::Verify& Verify;
  /// @brief Method for Version.
  methods::Version& Version;
};
} // namespace proxy

} // namespace csr
} // namespace x509
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_CSR_CERTSIGNREQUEST_PROXY_H_

