// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : messageauthncode_proxy.h
//
// Purpose     : Implementation of file messageauthncode_proxy.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_MESSAGEAUTHENTICATIONCODE_MESSAGEAUTHNCODE_PROXY_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_MESSAGEAUTHENTICATIONCODE_MESSAGEAUTHNCODE_PROXY_H_

#include <ara/com/internal/proxy/ara_proxy_base.h>
#include "ara/crypto/ipccom/cryp/messageauthenticationcode/messageauthncode_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace messageauthenticationcode
{
namespace proxy
{

namespace methods
{
  /// @brief Using for Check.
  using Check = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::messageauthenticationcode::MessageAuthnCode::CheckOutput(const CryptoServiceInstanceId& )>;
  /// @brief Using for Finish.
  using Finish = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::messageauthenticationcode::MessageAuthnCode::FinishOutput(const Boolean& )>;
  /// @brief Using for GetCryptoPrimitiveId.
  using GetCryptoPrimitiveId = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::messageauthenticationcode::MessageAuthnCode::GetCryptoPrimitiveIdOutput()>;
  /// @brief Using for GetDigest.
  using GetDigest = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::messageauthenticationcode::MessageAuthnCode::GetDigestOutput(const uint64& )>;
  /// @brief Using for GetDigestService.
  using GetDigestService = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::messageauthenticationcode::MessageAuthnCode::GetDigestServiceOutput()>;
  /// @brief Using for IsInitialized.
  using IsInitialized = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::messageauthenticationcode::MessageAuthnCode::IsInitializedOutput()>;
  /// @brief Using for Reset.
  using Reset = ara::com::internal::proxy::Method<void()>;
  /// @brief Using for SetKey.
  using SetKey = ara::com::internal::proxy::Method<void(const CryptoServiceInstanceId& ,const CryptoTransformDataType& )>;
  /// @brief Using for StartReadOnlyMem.
  using StartReadOnlyMem = ara::com::internal::proxy::Method<void(const CryptoReadOnlyMemRegion& )>;
  /// @brief Using for StartSecretSeed.
  using StartSecretSeed = ara::com::internal::proxy::Method<void(const CryptoServiceInstanceId& )>;
  /// @brief Using for Update.
  using Update = ara::com::internal::proxy::Method<void(const uint8& )>;
  /// @brief Using for UpdateReadOnlyMem.
  using UpdateReadOnlyMem = ara::com::internal::proxy::Method<void(const CryptoReadOnlyMemRegion& )>;
  /// @brief Using for UpdateRestrictedUseObject.
  using UpdateRestrictedUseObject = ara::com::internal::proxy::Method<void(const RestrictedUseObjectStructure& )>;
} // namespace methods



/// @brief Class for MessageAuthnCodeProxyBase.
class MessageAuthnCodeProxyBase : public ara::com::internal::proxy::ProxyBindingBase, public ara::crypto::ipccom::cryp::messageauthenticationcode::MessageAuthnCode {
 public:
  /// @brief Method for Check.
  virtual methods::Check& GetCheck() = 0;
  /// @brief Method for Finish.
  virtual methods::Finish& GetFinish() = 0;
  /// @brief Method for GetCryptoPrimitiveId.
  virtual methods::GetCryptoPrimitiveId& GetGetCryptoPrimitiveId() = 0;
  /// @brief Method for GetDigest.
  virtual methods::GetDigest& GetGetDigest() = 0;
  /// @brief Method for GetDigestService.
  virtual methods::GetDigestService& GetGetDigestService() = 0;
  /// @brief Method for IsInitialized.
  virtual methods::IsInitialized& GetIsInitialized() = 0;
  /// @brief Method for Reset.
  virtual methods::Reset& GetReset() = 0;
  /// @brief Method for SetKey.
  virtual methods::SetKey& GetSetKey() = 0;
  /// @brief Method for StartReadOnlyMem.
  virtual methods::StartReadOnlyMem& GetStartReadOnlyMem() = 0;
  /// @brief Method for StartSecretSeed.
  virtual methods::StartSecretSeed& GetStartSecretSeed() = 0;
  /// @brief Method for Update.
  virtual methods::Update& GetUpdate() = 0;
  /// @brief Method for UpdateReadOnlyMem.
  virtual methods::UpdateReadOnlyMem& GetUpdateReadOnlyMem() = 0;
  /// @brief Method for UpdateRestrictedUseObject.
  virtual methods::UpdateRestrictedUseObject& GetUpdateRestrictedUseObject() = 0;
};

/// @brief Class for MessageAuthnCodeProxy.
class MessageAuthnCodeProxy : public ara::com::internal::proxy::ProxyBase<MessageAuthnCodeProxyBase>, public ara::crypto::ipccom::cryp::messageauthenticationcode::MessageAuthnCode {
 public:
  /// @brief Definition for MessageAuthnCodeProxy.
  explicit MessageAuthnCodeProxy(const HandleType& proxy_base_factory) :
    ara::com::internal::proxy::ProxyBase<MessageAuthnCodeProxyBase>(proxy_base_factory),
    /// @brief Function GetCheck.
    Check(proxy_base_->GetCheck()),
    /// @brief Function GetFinish.
    Finish(proxy_base_->GetFinish()),
    /// @brief Function GetGetCryptoPrimitiveId.
    GetCryptoPrimitiveId(proxy_base_->GetGetCryptoPrimitiveId()),
    /// @brief Function GetGetDigest.
    GetDigest(proxy_base_->GetGetDigest()),
    /// @brief Function GetGetDigestService.
    GetDigestService(proxy_base_->GetGetDigestService()),
    /// @brief Function GetIsInitialized.
    IsInitialized(proxy_base_->GetIsInitialized()),
    /// @brief Function GetReset.
    Reset(proxy_base_->GetReset()),
    /// @brief Function GetSetKey.
    SetKey(proxy_base_->GetSetKey()),
    /// @brief Function GetStartReadOnlyMem.
    StartReadOnlyMem(proxy_base_->GetStartReadOnlyMem()),
    /// @brief Function GetStartSecretSeed.
    StartSecretSeed(proxy_base_->GetStartSecretSeed()),
    /// @brief Function GetUpdate.
    Update(proxy_base_->GetUpdate()),
    /// @brief Function GetUpdateReadOnlyMem.
    UpdateReadOnlyMem(proxy_base_->GetUpdateReadOnlyMem()),
    /// @brief Function GetUpdateRestrictedUseObject.
    UpdateRestrictedUseObject(proxy_base_->GetUpdateRestrictedUseObject())
  {}

  /// @brief Proxy shall be move constructable.
  explicit MessageAuthnCodeProxy(MessageAuthnCodeProxy&&) = default;

  /// @brief Proxy shall be move assignable.
  MessageAuthnCodeProxy& operator=(MessageAuthnCodeProxy&&) = default;

  /// @brief Proxy shall not be copy constructable.
  explicit MessageAuthnCodeProxy(const MessageAuthnCodeProxy&) = delete;

  /// @brief Proxy shall not be copy assignable.
  MessageAuthnCodeProxy& operator=(const MessageAuthnCodeProxy&) = delete;

  /// @brief Method for Check.
  methods::Check& Check;
  /// @brief Method for Finish.
  methods::Finish& Finish;
  /// @brief Method for GetCryptoPrimitiveId.
  methods::GetCryptoPrimitiveId& GetCryptoPrimitiveId;
  /// @brief Method for GetDigest.
  methods::GetDigest& GetDigest;
  /// @brief Method for GetDigestService.
  methods::GetDigestService& GetDigestService;
  /// @brief Method for IsInitialized.
  methods::IsInitialized& IsInitialized;
  /// @brief Method for Reset.
  methods::Reset& Reset;
  /// @brief Method for SetKey.
  methods::SetKey& SetKey;
  /// @brief Method for StartReadOnlyMem.
  methods::StartReadOnlyMem& StartReadOnlyMem;
  /// @brief Method for StartSecretSeed.
  methods::StartSecretSeed& StartSecretSeed;
  /// @brief Method for Update.
  methods::Update& Update;
  /// @brief Method for UpdateReadOnlyMem.
  methods::UpdateReadOnlyMem& UpdateReadOnlyMem;
  /// @brief Method for UpdateRestrictedUseObject.
  methods::UpdateRestrictedUseObject& UpdateRestrictedUseObject;
};
} // namespace proxy

} // namespace messageauthenticationcode
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_MESSAGEAUTHENTICATIONCODE_MESSAGEAUTHNCODE_PROXY_H_

