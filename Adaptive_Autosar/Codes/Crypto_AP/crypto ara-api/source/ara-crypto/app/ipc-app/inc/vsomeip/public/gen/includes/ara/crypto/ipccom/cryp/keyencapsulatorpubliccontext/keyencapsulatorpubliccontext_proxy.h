// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : keyencapsulatorpubliccontext_proxy.h
//
// Purpose     : Implementation of file keyencapsulatorpubliccontext_proxy.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_KEYENCAPSULATORPUBLICCONTEXT_KEYENCAPSULATORPUBLICCONTEXT_PROXY_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_KEYENCAPSULATORPUBLICCONTEXT_KEYENCAPSULATORPUBLICCONTEXT_PROXY_H_

#include <ara/com/internal/proxy/ara_proxy_base.h>
#include "ara/crypto/ipccom/cryp/keyencapsulatorpubliccontext/keyencapsulatorpubliccontext_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace keyencapsulatorpubliccontext
{
namespace proxy
{

namespace methods
{
  /// @brief Using for AddKeyingData.
  using AddKeyingData = ara::com::internal::proxy::Method<void(const CryptoServiceInstanceId& )>;
  /// @brief Using for Encapsulate.
  using Encapsulate = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::keyencapsulatorpubliccontext::KeyEncapsulatorPublicContext::EncapsulateOutput(const CryptoServiceInstanceId& ,const CryptoAlgId& ,const CryptoReadOnlyMemRegion& ,const CryptoReadOnlyMemRegion& )>;
  /// @brief Using for GetCryptoPrimitiveId.
  using GetCryptoPrimitiveId = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::keyencapsulatorpubliccontext::KeyEncapsulatorPublicContext::GetCryptoPrimitiveIdOutput()>;
  /// @brief Using for GetEncapsulatedSize.
  using GetEncapsulatedSize = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::keyencapsulatorpubliccontext::KeyEncapsulatorPublicContext::GetEncapsulatedSizeOutput()>;
  /// @brief Using for GetExtensionService.
  using GetExtensionService = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::keyencapsulatorpubliccontext::KeyEncapsulatorPublicContext::GetExtensionServiceOutput()>;
  /// @brief Using for GetKekEntropy.
  using GetKekEntropy = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::keyencapsulatorpubliccontext::KeyEncapsulatorPublicContext::GetKekEntropyOutput()>;
  /// @brief Using for IsInitialized.
  using IsInitialized = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::keyencapsulatorpubliccontext::KeyEncapsulatorPublicContext::IsInitializedOutput()>;
  /// @brief Using for Reset.
  using Reset = ara::com::internal::proxy::Method<void()>;
  /// @brief Using for SetKey.
  using SetKey = ara::com::internal::proxy::Method<void(const CryptoServiceInstanceId& )>;
} // namespace methods



/// @brief Class for KeyEncapsulatorPublicContextProxyBase.
class KeyEncapsulatorPublicContextProxyBase : public ara::com::internal::proxy::ProxyBindingBase, public ara::crypto::ipccom::cryp::keyencapsulatorpubliccontext::KeyEncapsulatorPublicContext {
 public:
  /// @brief Method for AddKeyingData.
  virtual methods::AddKeyingData& GetAddKeyingData() = 0;
  /// @brief Method for Encapsulate.
  virtual methods::Encapsulate& GetEncapsulate() = 0;
  /// @brief Method for GetCryptoPrimitiveId.
  virtual methods::GetCryptoPrimitiveId& GetGetCryptoPrimitiveId() = 0;
  /// @brief Method for GetEncapsulatedSize.
  virtual methods::GetEncapsulatedSize& GetGetEncapsulatedSize() = 0;
  /// @brief Method for GetExtensionService.
  virtual methods::GetExtensionService& GetGetExtensionService() = 0;
  /// @brief Method for GetKekEntropy.
  virtual methods::GetKekEntropy& GetGetKekEntropy() = 0;
  /// @brief Method for IsInitialized.
  virtual methods::IsInitialized& GetIsInitialized() = 0;
  /// @brief Method for Reset.
  virtual methods::Reset& GetReset() = 0;
  /// @brief Method for SetKey.
  virtual methods::SetKey& GetSetKey() = 0;
};

/// @brief Class for KeyEncapsulatorPublicContextProxy.
class KeyEncapsulatorPublicContextProxy : public ara::com::internal::proxy::ProxyBase<KeyEncapsulatorPublicContextProxyBase>, public ara::crypto::ipccom::cryp::keyencapsulatorpubliccontext::KeyEncapsulatorPublicContext {
 public:
  /// @brief Definition for KeyEncapsulatorPublicContextProxy.
  explicit KeyEncapsulatorPublicContextProxy(const HandleType& proxy_base_factory) :
    ara::com::internal::proxy::ProxyBase<KeyEncapsulatorPublicContextProxyBase>(proxy_base_factory),
    /// @brief Function GetAddKeyingData.
    AddKeyingData(proxy_base_->GetAddKeyingData()),
    /// @brief Function GetEncapsulate.
    Encapsulate(proxy_base_->GetEncapsulate()),
    /// @brief Function GetGetCryptoPrimitiveId.
    GetCryptoPrimitiveId(proxy_base_->GetGetCryptoPrimitiveId()),
    /// @brief Function GetGetEncapsulatedSize.
    GetEncapsulatedSize(proxy_base_->GetGetEncapsulatedSize()),
    /// @brief Function GetGetExtensionService.
    GetExtensionService(proxy_base_->GetGetExtensionService()),
    /// @brief Function GetGetKekEntropy.
    GetKekEntropy(proxy_base_->GetGetKekEntropy()),
    /// @brief Function GetIsInitialized.
    IsInitialized(proxy_base_->GetIsInitialized()),
    /// @brief Function GetReset.
    Reset(proxy_base_->GetReset()),
    /// @brief Function GetSetKey.
    SetKey(proxy_base_->GetSetKey())
  {}

  /// @brief Proxy shall be move constructable.
  explicit KeyEncapsulatorPublicContextProxy(KeyEncapsulatorPublicContextProxy&&) = default;

  /// @brief Proxy shall be move assignable.
  KeyEncapsulatorPublicContextProxy& operator=(KeyEncapsulatorPublicContextProxy&&) = default;

  /// @brief Proxy shall not be copy constructable.
  explicit KeyEncapsulatorPublicContextProxy(const KeyEncapsulatorPublicContextProxy&) = delete;

  /// @brief Proxy shall not be copy assignable.
  KeyEncapsulatorPublicContextProxy& operator=(const KeyEncapsulatorPublicContextProxy&) = delete;

  /// @brief Method for AddKeyingData.
  methods::AddKeyingData& AddKeyingData;
  /// @brief Method for Encapsulate.
  methods::Encapsulate& Encapsulate;
  /// @brief Method for GetCryptoPrimitiveId.
  methods::GetCryptoPrimitiveId& GetCryptoPrimitiveId;
  /// @brief Method for GetEncapsulatedSize.
  methods::GetEncapsulatedSize& GetEncapsulatedSize;
  /// @brief Method for GetExtensionService.
  methods::GetExtensionService& GetExtensionService;
  /// @brief Method for GetKekEntropy.
  methods::GetKekEntropy& GetKekEntropy;
  /// @brief Method for IsInitialized.
  methods::IsInitialized& IsInitialized;
  /// @brief Method for Reset.
  methods::Reset& Reset;
  /// @brief Method for SetKey.
  methods::SetKey& SetKey;
};
} // namespace proxy

} // namespace keyencapsulatorpubliccontext
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_KEYENCAPSULATORPUBLICCONTEXT_KEYENCAPSULATORPUBLICCONTEXT_PROXY_H_

