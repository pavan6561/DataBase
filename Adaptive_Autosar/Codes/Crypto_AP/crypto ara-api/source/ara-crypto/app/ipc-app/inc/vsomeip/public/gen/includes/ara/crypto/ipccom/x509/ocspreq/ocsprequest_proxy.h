// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : ocsprequest_proxy.h
//
// Purpose     : Implementation of file ocsprequest_proxy.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_OCSPREQ_OCSPREQUEST_PROXY_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_OCSPREQ_OCSPREQUEST_PROXY_H_

#include <ara/com/internal/proxy/ara_proxy_base.h>
#include "ara/crypto/ipccom/x509/ocspreq/ocsprequest_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace x509
{
namespace ocspreq
{
namespace proxy
{

namespace methods
{
  /// @brief Using for ExportPublicly.
  using ExportPublicly = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::ocspreq::OcspRequest::ExportPubliclyOutput(const uint32& )>;
  /// @brief Using for MyProvider.
  using MyProvider = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::ocspreq::OcspRequest::MyProviderOutput()>;
  /// @brief Using for Version.
  using Version = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::ocspreq::OcspRequest::VersionOutput()>;
} // namespace methods



/// @brief Class for OcspRequestProxyBase.
class OcspRequestProxyBase : public ara::com::internal::proxy::ProxyBindingBase, public ara::crypto::ipccom::x509::ocspreq::OcspRequest {
 public:
  /// @brief Method for ExportPublicly.
  virtual methods::ExportPublicly& GetExportPublicly() = 0;
  /// @brief Method for MyProvider.
  virtual methods::MyProvider& GetMyProvider() = 0;
  /// @brief Method for Version.
  virtual methods::Version& GetVersion() = 0;
};

/// @brief Class for OcspRequestProxy.
class OcspRequestProxy : public ara::com::internal::proxy::ProxyBase<OcspRequestProxyBase>, public ara::crypto::ipccom::x509::ocspreq::OcspRequest {
 public:
  /// @brief Definition for OcspRequestProxy.
  explicit OcspRequestProxy(const HandleType& proxy_base_factory) :
    ara::com::internal::proxy::ProxyBase<OcspRequestProxyBase>(proxy_base_factory),
    /// @brief Function GetExportPublicly.
    ExportPublicly(proxy_base_->GetExportPublicly()),
    /// @brief Function GetMyProvider.
    MyProvider(proxy_base_->GetMyProvider()),
    /// @brief Function GetVersion.
    Version(proxy_base_->GetVersion())
  {}

  /// @brief Proxy shall be move constructable.
  explicit OcspRequestProxy(OcspRequestProxy&&) = default;

  /// @brief Proxy shall be move assignable.
  OcspRequestProxy& operator=(OcspRequestProxy&&) = default;

  /// @brief Proxy shall not be copy constructable.
  explicit OcspRequestProxy(const OcspRequestProxy&) = delete;

  /// @brief Proxy shall not be copy assignable.
  OcspRequestProxy& operator=(const OcspRequestProxy&) = delete;

  /// @brief Method for ExportPublicly.
  methods::ExportPublicly& ExportPublicly;
  /// @brief Method for MyProvider.
  methods::MyProvider& MyProvider;
  /// @brief Method for Version.
  methods::Version& Version;
};
} // namespace proxy

} // namespace ocspreq
} // namespace x509
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_OCSPREQ_OCSPREQUEST_PROXY_H_

