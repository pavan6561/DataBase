// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : x509publickeyinfo_proxy.h
//
// Purpose     : Implementation of file x509publickeyinfo_proxy.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_PKI_X509PUBLICKEYINFO_PROXY_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_PKI_X509PUBLICKEYINFO_PROXY_H_

#include <ara/com/internal/proxy/ara_proxy_base.h>
#include "ara/crypto/ipccom/x509/pki/x509publickeyinfo_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace x509
{
namespace pki
{
namespace proxy
{

namespace methods
{
  /// @brief Using for ExportPublicly.
  using ExportPublicly = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::pki::X509PublicKeyInfo::ExportPubliclyOutput(const uint32& )>;
  /// @brief Using for GetAlgorithmId.
  using GetAlgorithmId = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::pki::X509PublicKeyInfo::GetAlgorithmIdOutput()>;
  /// @brief Using for GetPublicKey.
  using GetPublicKey = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::pki::X509PublicKeyInfo::GetPublicKeyOutput()>;
  /// @brief Using for GetRequiredHashAlgId.
  using GetRequiredHashAlgId = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::pki::X509PublicKeyInfo::GetRequiredHashAlgIdOutput()>;
  /// @brief Using for GetRequiredHashSize.
  using GetRequiredHashSize = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::pki::X509PublicKeyInfo::GetRequiredHashSizeOutput()>;
  /// @brief Using for GetSignatureSize.
  using GetSignatureSize = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::pki::X509PublicKeyInfo::GetSignatureSizeOutput()>;
  /// @brief Using for IsSameKey.
  using IsSameKey = ara::com::internal::proxy::Method<ara::crypto::ipccom::x509::pki::X509PublicKeyInfo::IsSameKeyOutput(const CryptoServiceInstanceId& )>;
} // namespace methods



/// @brief Class for X509PublicKeyInfoProxyBase.
class X509PublicKeyInfoProxyBase : public ara::com::internal::proxy::ProxyBindingBase, public ara::crypto::ipccom::x509::pki::X509PublicKeyInfo {
 public:
  /// @brief Method for ExportPublicly.
  virtual methods::ExportPublicly& GetExportPublicly() = 0;
  /// @brief Method for GetAlgorithmId.
  virtual methods::GetAlgorithmId& GetGetAlgorithmId() = 0;
  /// @brief Method for GetPublicKey.
  virtual methods::GetPublicKey& GetGetPublicKey() = 0;
  /// @brief Method for GetRequiredHashAlgId.
  virtual methods::GetRequiredHashAlgId& GetGetRequiredHashAlgId() = 0;
  /// @brief Method for GetRequiredHashSize.
  virtual methods::GetRequiredHashSize& GetGetRequiredHashSize() = 0;
  /// @brief Method for GetSignatureSize.
  virtual methods::GetSignatureSize& GetGetSignatureSize() = 0;
  /// @brief Method for IsSameKey.
  virtual methods::IsSameKey& GetIsSameKey() = 0;
};

/// @brief Class for X509PublicKeyInfoProxy.
class X509PublicKeyInfoProxy : public ara::com::internal::proxy::ProxyBase<X509PublicKeyInfoProxyBase>, public ara::crypto::ipccom::x509::pki::X509PublicKeyInfo {
 public:
  /// @brief Definition for X509PublicKeyInfoProxy.
  explicit X509PublicKeyInfoProxy(const HandleType& proxy_base_factory) :
    ara::com::internal::proxy::ProxyBase<X509PublicKeyInfoProxyBase>(proxy_base_factory),
    /// @brief Function GetExportPublicly.
    ExportPublicly(proxy_base_->GetExportPublicly()),
    /// @brief Function GetGetAlgorithmId.
    GetAlgorithmId(proxy_base_->GetGetAlgorithmId()),
    /// @brief Function GetGetPublicKey.
    GetPublicKey(proxy_base_->GetGetPublicKey()),
    /// @brief Function GetGetRequiredHashAlgId.
    GetRequiredHashAlgId(proxy_base_->GetGetRequiredHashAlgId()),
    /// @brief Function GetGetRequiredHashSize.
    GetRequiredHashSize(proxy_base_->GetGetRequiredHashSize()),
    /// @brief Function GetGetSignatureSize.
    GetSignatureSize(proxy_base_->GetGetSignatureSize()),
    /// @brief Function GetIsSameKey.
    IsSameKey(proxy_base_->GetIsSameKey())
  {}

  /// @brief Proxy shall be move constructable.
  explicit X509PublicKeyInfoProxy(X509PublicKeyInfoProxy&&) = default;

  /// @brief Proxy shall be move assignable.
  X509PublicKeyInfoProxy& operator=(X509PublicKeyInfoProxy&&) = default;

  /// @brief Proxy shall not be copy constructable.
  explicit X509PublicKeyInfoProxy(const X509PublicKeyInfoProxy&) = delete;

  /// @brief Proxy shall not be copy assignable.
  X509PublicKeyInfoProxy& operator=(const X509PublicKeyInfoProxy&) = delete;

  /// @brief Method for ExportPublicly.
  methods::ExportPublicly& ExportPublicly;
  /// @brief Method for GetAlgorithmId.
  methods::GetAlgorithmId& GetAlgorithmId;
  /// @brief Method for GetPublicKey.
  methods::GetPublicKey& GetPublicKey;
  /// @brief Method for GetRequiredHashAlgId.
  methods::GetRequiredHashAlgId& GetRequiredHashAlgId;
  /// @brief Method for GetRequiredHashSize.
  methods::GetRequiredHashSize& GetRequiredHashSize;
  /// @brief Method for GetSignatureSize.
  methods::GetSignatureSize& GetSignatureSize;
  /// @brief Method for IsSameKey.
  methods::IsSameKey& IsSameKey;
};
} // namespace proxy

} // namespace pki
} // namespace x509
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_PKI_X509PUBLICKEYINFO_PROXY_H_

