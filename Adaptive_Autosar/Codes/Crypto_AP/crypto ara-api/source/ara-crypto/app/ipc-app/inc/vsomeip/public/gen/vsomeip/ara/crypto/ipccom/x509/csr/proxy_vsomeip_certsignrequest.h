// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : proxy_vsomeip_certsignrequest.h
//
// Purpose     : Implementation of file proxy_vsomeip_certsignrequest.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_VSOMEIP_ARA_CRYPTO_IPCCOM_X509_CSR_PROXY_VSOMEIP_CERTSIGNREQUEST_H_
#define CRYPTOCLIENTEXE_VSOMEIP_ARA_CRYPTO_IPCCOM_X509_CSR_PROXY_VSOMEIP_CERTSIGNREQUEST_H_

#include "service_desc_certsignrequest.h"
#include "ara/crypto/ipccom/x509/csr/certsignrequest_proxy.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace x509
{
namespace csr
{
namespace certsignrequest_binding
{
namespace vsomeip
{

/// @brief Class for CertSignRequestImpl.
class CertSignRequestImpl : public proxy::CertSignRequestProxyBase, public ::ara::com::internal::vsomeip::proxy::ProxyImplBase {
 public :
  /// @brief Using for ProxyInterface.
  using ProxyInterface = proxy::CertSignRequestProxy;
  /// @brief Using for ServiceDescriptor.
  using ServiceDescriptor = descriptors::internal::Service;

  /// @brief Definition for CertSignRequestImpl.
  explicit CertSignRequestImpl(ara::com::internal::vsomeip::types::InstanceId instance) :
  ::ara::com::internal::vsomeip::proxy::ProxyImplBase(ServiceDescriptor::service_id, instance, ServiceDescriptor::service_version_major, ServiceDescriptor::service_version_minor),
  /// @brief Definition for ExportASN1CertSignRequest(instance).
    ExportASN1CertSignRequest(instance),
  /// @brief Definition for ExportPublicly(instance).
    ExportPublicly(instance),
  /// @brief Definition for GetConstraints(instance).
    GetConstraints(instance),
  /// @brief Definition for GetPathLimit(instance).
    GetPathLimit(instance),
  /// @brief Definition for GetSignature(instance).
    GetSignature(instance),
  /// @brief Definition for IsCa(instance).
    IsCa(instance),
  /// @brief Definition for MyProvider(instance).
    MyProvider(instance),
  /// @brief Definition for SubjectDn(instance).
    SubjectDn(instance),
  /// @brief Definition for SubjectPubKey(instance).
    SubjectPubKey(instance),
  /// @brief Definition for Verify(instance).
    Verify(instance),
  /// @brief Definition for Version(instance).
    Version(instance)
  {}
  /// @brief Definition for CertSignRequestImpl.
  ~CertSignRequestImpl() noexcept override {}

  /// @brief Definition for GetExportASN1CertSignRequest.
        ara::crypto::ipccom::x509::csr::proxy::methods::ExportASN1CertSignRequest& GetExportASN1CertSignRequest() noexcept override { return ExportASN1CertSignRequest; }
  /// @brief Definition for GetExportPublicly.
        ara::crypto::ipccom::x509::csr::proxy::methods::ExportPublicly& GetExportPublicly() noexcept override { return ExportPublicly; }
  /// @brief Definition for GetGetConstraints.
        ara::crypto::ipccom::x509::csr::proxy::methods::GetConstraints& GetGetConstraints() noexcept override { return GetConstraints; }
  /// @brief Definition for GetGetPathLimit.
        ara::crypto::ipccom::x509::csr::proxy::methods::GetPathLimit& GetGetPathLimit() noexcept override { return GetPathLimit; }
  /// @brief Definition for GetGetSignature.
        ara::crypto::ipccom::x509::csr::proxy::methods::GetSignature& GetGetSignature() noexcept override { return GetSignature; }
  /// @brief Definition for GetIsCa.
        ara::crypto::ipccom::x509::csr::proxy::methods::IsCa& GetIsCa() noexcept override { return IsCa; }
  /// @brief Definition for GetMyProvider.
        ara::crypto::ipccom::x509::csr::proxy::methods::MyProvider& GetMyProvider() noexcept override { return MyProvider; }
  /// @brief Definition for GetSubjectDn.
        ara::crypto::ipccom::x509::csr::proxy::methods::SubjectDn& GetSubjectDn() noexcept override { return SubjectDn; }
  /// @brief Definition for GetSubjectPubKey.
        ara::crypto::ipccom::x509::csr::proxy::methods::SubjectPubKey& GetSubjectPubKey() noexcept override { return SubjectPubKey; }
  /// @brief Definition for GetVerify.
        ara::crypto::ipccom::x509::csr::proxy::methods::Verify& GetVerify() noexcept override { return Verify; }
  /// @brief Definition for GetVersion.
        ara::crypto::ipccom::x509::csr::proxy::methods::Version& GetVersion() noexcept override { return Version; }

 private:
  /// @brief Method for ExportASN1CertSignRequest is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::ExportASN1CertSignRequest, ara::crypto::ipccom::x509::csr::proxy::methods::ExportASN1CertSignRequest::signature_type> ExportASN1CertSignRequest;
  /// @brief Method for ExportPublicly is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::ExportPublicly, ara::crypto::ipccom::x509::csr::proxy::methods::ExportPublicly::signature_type> ExportPublicly;
  /// @brief Method for GetConstraints is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::GetConstraints, ara::crypto::ipccom::x509::csr::proxy::methods::GetConstraints::signature_type> GetConstraints;
  /// @brief Method for GetPathLimit is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::GetPathLimit, ara::crypto::ipccom::x509::csr::proxy::methods::GetPathLimit::signature_type> GetPathLimit;
  /// @brief Method for GetSignature is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::GetSignature, ara::crypto::ipccom::x509::csr::proxy::methods::GetSignature::signature_type> GetSignature;
  /// @brief Method for IsCa is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::IsCa, ara::crypto::ipccom::x509::csr::proxy::methods::IsCa::signature_type> IsCa;
  /// @brief Method for MyProvider is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::MyProvider, ara::crypto::ipccom::x509::csr::proxy::methods::MyProvider::signature_type> MyProvider;
  /// @brief Method for SubjectDn is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::SubjectDn, ara::crypto::ipccom::x509::csr::proxy::methods::SubjectDn::signature_type> SubjectDn;
  /// @brief Method for SubjectPubKey is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::SubjectPubKey, ara::crypto::ipccom::x509::csr::proxy::methods::SubjectPubKey::signature_type> SubjectPubKey;
  /// @brief Method for Verify is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::Verify, ara::crypto::ipccom::x509::csr::proxy::methods::Verify::signature_type> Verify;
  /// @brief Method for Version is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::Version, ara::crypto::ipccom::x509::csr::proxy::methods::Version::signature_type> Version;
};

} // namespace vsomeip
} // namespace certsignrequest_binding
} // namespace csr
} // namespace x509
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_VSOMEIP_ARA_CRYPTO_IPCCOM_X509_CSR_PROXY_VSOMEIP_CERTSIGNREQUEST_H_

