// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : verifierpubliccontext_common.h
//
// Purpose     : Implementation of file verifierpubliccontext_common.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_VERIFIERPUBLICCONTEXT_VERIFIERPUBLICCONTEXT_COMMON_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_VERIFIERPUBLICCONTEXT_VERIFIERPUBLICCONTEXT_COMMON_H_

#include <cstring>
#include <ara/core/array.h>

#include <ara/com/types.h>

#include <ara/com/exception.h>
#include <ara/core/error_code.h>

#include "ara/crypto/ipccom/common/error/error_domain_cryptoerrordomain.h"
#include "impl_type_boolean.h"
#include "impl_type_cryptoalgid.h"
#include "impl_type_cryptoprimitiveiduptrstructure.h"
#include "impl_type_cryptoreadonlymemregion.h"
#include "impl_type_cryptoserviceinstanceid.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace verifierpubliccontext
{

/// @brief Class for VerifierPublicContext.
class  VerifierPublicContext {
 public:
  /// @brief Definition for VerifierPublicContext.
  virtual ~VerifierPublicContext() noexcept
  {}
  static constexpr ara::com::internal::ServiceId service_id{0x7BB0};
  static constexpr ara::com::internal::ServiceVersion service_version_major{0x1};
  static constexpr ara::com::internal::ServiceVersion service_version_minor{0x0};
  /// @brief class for GetCryptoPrimitiveIdOutput.
  class GetCryptoPrimitiveIdOutput
  {
    public:
    /// @brief Argument for cryptoPrimitiveIdUptrStruct.
    cryptoPrimitiveIdUptrStructure cryptoPrimitiveIdUptrStruct;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(cryptoPrimitiveIdUptrStruct);
    }
  };
  /// @brief class for GetSignatureServiceOutput.
  class GetSignatureServiceOutput
  {
    public:
    /// @brief Argument for signatureServiceInstanceId.
    CryptoServiceInstanceId signatureServiceInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(signatureServiceInstanceId);
    }
  };
  /// @brief class for IsInitializedOutput.
  class IsInitializedOutput
  {
    public:
    /// @brief Argument for result.
    Boolean result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>SetKey_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kIncompatibleObject, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUsageViolation, 0),
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>VerifyPrehashedHashFunction_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kProcessingNotFinished, 0),
    }
  };
  /// @brief class for VerifyPrehashedHashFunctionOutput.
  class VerifyPrehashedHashFunctionOutput
  {
    public:
    /// @brief Argument for result.
    Boolean result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>VerifyPrehashedHashFunctionSignature_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kProcessingNotFinished, 0),
    }
  };
  /// @brief class for VerifyPrehashedHashFunctionSignatureOutput.
  class VerifyPrehashedHashFunctionSignatureOutput
  {
    public:
    /// @brief Argument for result.
    Boolean result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 3>VerifyPrehashedReadOnly_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kIncompatibleArguments, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kBadObjectReference, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kIncompatibleObject, 0),
    }
  };
  /// @brief class for VerifyPrehashedReadOnlyOutput.
  class VerifyPrehashedReadOnlyOutput
  {
    public:
    /// @brief Argument for result.
    Boolean result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>VerifyReadOnly_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidInputSize, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUninitializedContext, 0),
    }
  };
  /// @brief class for VerifyReadOnlyOutput.
  class VerifyReadOnlyOutput
  {
    public:
    /// @brief Argument for result.
    Boolean result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
};

} // namespace verifierpubliccontext
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_VERIFIERPUBLICCONTEXT_VERIFIERPUBLICCONTEXT_COMMON_H_

