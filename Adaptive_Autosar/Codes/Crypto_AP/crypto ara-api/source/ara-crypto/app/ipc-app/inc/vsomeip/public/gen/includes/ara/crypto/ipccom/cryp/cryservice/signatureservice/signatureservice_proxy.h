// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : signatureservice_proxy.h
//
// Purpose     : Implementation of file signatureservice_proxy.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-03-08T13:50:38+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYSERVICE_SIGNATURESERVICE_SIGNATURESERVICE_PROXY_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYSERVICE_SIGNATURESERVICE_SIGNATURESERVICE_PROXY_H_

#include <ara/com/internal/proxy/ara_proxy_base.h>
#include "ara/crypto/ipccom/cryp/cryservice/signatureservice/signatureservice_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace cryservice
{
namespace signatureservice
{
namespace proxy
{

namespace methods
{
  /// @brief Using for GetActualKeyBitLength.
  using GetActualKeyBitLength = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::GetActualKeyBitLengthOutput()>;
  /// @brief Using for GetActualKeyCOUID.
  using GetActualKeyCOUID = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::GetActualKeyCOUIDOutput()>;
  /// @brief Using for GetAllowedUsage.
  using GetAllowedUsage = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::GetAllowedUsageOutput()>;
  /// @brief Using for GetMaxKeyBitLength.
  using GetMaxKeyBitLength = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::GetMaxKeyBitLengthOutput()>;
  /// @brief Using for GetMinKeyBitLength.
  using GetMinKeyBitLength = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::GetMinKeyBitLengthOutput()>;
  /// @brief Using for GetRequiredHashAlgId.
  using GetRequiredHashAlgId = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::GetRequiredHashAlgIdOutput()>;
  /// @brief Using for GetRequiredHashSize.
  using GetRequiredHashSize = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::GetRequiredHashSizeOutput()>;
  /// @brief Using for GetSignatureSize.
  using GetSignatureSize = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::GetSignatureSizeOutput()>;
  /// @brief Using for IsKeyAvailable.
  using IsKeyAvailable = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::IsKeyAvailableOutput()>;
  /// @brief Using for IsKeyBitLengthSupported.
  using IsKeyBitLengthSupported = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::IsKeyBitLengthSupportedOutput(const uint64& )>;
} // namespace methods



/// @brief Class for SignatureServiceProxyBase.
class SignatureServiceProxyBase : public ara::com::internal::proxy::ProxyBindingBase, public ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService {
 public:
  /// @brief Method for GetActualKeyBitLength.
  virtual methods::GetActualKeyBitLength& GetGetActualKeyBitLength() = 0;
  /// @brief Method for GetActualKeyCOUID.
  virtual methods::GetActualKeyCOUID& GetGetActualKeyCOUID() = 0;
  /// @brief Method for GetAllowedUsage.
  virtual methods::GetAllowedUsage& GetGetAllowedUsage() = 0;
  /// @brief Method for GetMaxKeyBitLength.
  virtual methods::GetMaxKeyBitLength& GetGetMaxKeyBitLength() = 0;
  /// @brief Method for GetMinKeyBitLength.
  virtual methods::GetMinKeyBitLength& GetGetMinKeyBitLength() = 0;
  /// @brief Method for GetRequiredHashAlgId.
  virtual methods::GetRequiredHashAlgId& GetGetRequiredHashAlgId() = 0;
  /// @brief Method for GetRequiredHashSize.
  virtual methods::GetRequiredHashSize& GetGetRequiredHashSize() = 0;
  /// @brief Method for GetSignatureSize.
  virtual methods::GetSignatureSize& GetGetSignatureSize() = 0;
  /// @brief Method for IsKeyAvailable.
  virtual methods::IsKeyAvailable& GetIsKeyAvailable() = 0;
  /// @brief Method for IsKeyBitLengthSupported.
  virtual methods::IsKeyBitLengthSupported& GetIsKeyBitLengthSupported() = 0;
};

/// @brief Class for SignatureServiceProxy.
class SignatureServiceProxy : public ara::com::internal::proxy::ProxyBase<SignatureServiceProxyBase>, public ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService {
 public:
  /// @brief Definition for SignatureServiceProxy.
  explicit SignatureServiceProxy(const HandleType& proxy_base_factory) :
    ara::com::internal::proxy::ProxyBase<SignatureServiceProxyBase>(proxy_base_factory),
    /// @brief Function GetGetActualKeyBitLength.
    GetActualKeyBitLength(proxy_base_->GetGetActualKeyBitLength()),
    /// @brief Function GetGetActualKeyCOUID.
    GetActualKeyCOUID(proxy_base_->GetGetActualKeyCOUID()),
    /// @brief Function GetGetAllowedUsage.
    GetAllowedUsage(proxy_base_->GetGetAllowedUsage()),
    /// @brief Function GetGetMaxKeyBitLength.
    GetMaxKeyBitLength(proxy_base_->GetGetMaxKeyBitLength()),
    /// @brief Function GetGetMinKeyBitLength.
    GetMinKeyBitLength(proxy_base_->GetGetMinKeyBitLength()),
    /// @brief Function GetGetRequiredHashAlgId.
    GetRequiredHashAlgId(proxy_base_->GetGetRequiredHashAlgId()),
    /// @brief Function GetGetRequiredHashSize.
    GetRequiredHashSize(proxy_base_->GetGetRequiredHashSize()),
    /// @brief Function GetGetSignatureSize.
    GetSignatureSize(proxy_base_->GetGetSignatureSize()),
    /// @brief Function GetIsKeyAvailable.
    IsKeyAvailable(proxy_base_->GetIsKeyAvailable()),
    /// @brief Function GetIsKeyBitLengthSupported.
    IsKeyBitLengthSupported(proxy_base_->GetIsKeyBitLengthSupported())
  {}

  /// @brief Proxy shall be move constructable.
  explicit SignatureServiceProxy(SignatureServiceProxy&&) = default;

  /// @brief Proxy shall be move assignable.
  SignatureServiceProxy& operator=(SignatureServiceProxy&&) = default;

  /// @brief Proxy shall not be copy constructable.
  explicit SignatureServiceProxy(const SignatureServiceProxy&) = delete;

  /// @brief Proxy shall not be copy assignable.
  SignatureServiceProxy& operator=(const SignatureServiceProxy&) = delete;

  /// @brief Method for GetActualKeyBitLength.
  methods::GetActualKeyBitLength& GetActualKeyBitLength;
  /// @brief Method for GetActualKeyCOUID.
  methods::GetActualKeyCOUID& GetActualKeyCOUID;
  /// @brief Method for GetAllowedUsage.
  methods::GetAllowedUsage& GetAllowedUsage;
  /// @brief Method for GetMaxKeyBitLength.
  methods::GetMaxKeyBitLength& GetMaxKeyBitLength;
  /// @brief Method for GetMinKeyBitLength.
  methods::GetMinKeyBitLength& GetMinKeyBitLength;
  /// @brief Method for GetRequiredHashAlgId.
  methods::GetRequiredHashAlgId& GetRequiredHashAlgId;
  /// @brief Method for GetRequiredHashSize.
  methods::GetRequiredHashSize& GetRequiredHashSize;
  /// @brief Method for GetSignatureSize.
  methods::GetSignatureSize& GetSignatureSize;
  /// @brief Method for IsKeyAvailable.
  methods::IsKeyAvailable& IsKeyAvailable;
  /// @brief Method for IsKeyBitLengthSupported.
  methods::IsKeyBitLengthSupported& IsKeyBitLengthSupported;
};
} // namespace proxy

} // namespace signatureservice
} // namespace cryservice
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYSERVICE_SIGNATURESERVICE_SIGNATURESERVICE_PROXY_H_

