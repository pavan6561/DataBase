// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : proxy_vsomeip_certificate.h
//
// Purpose     : Implementation of file proxy_vsomeip_certificate.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_VSOMEIP_ARA_CRYPTO_IPCCOM_X509_CERTIFICATE_PROXY_VSOMEIP_CERTIFICATE_H_
#define CRYPTOCLIENTEXE_VSOMEIP_ARA_CRYPTO_IPCCOM_X509_CERTIFICATE_PROXY_VSOMEIP_CERTIFICATE_H_

#include "service_desc_certificate.h"
#include "ara/crypto/ipccom/x509/certificate/certificate_proxy.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace x509
{
namespace certificate
{
namespace certificate_binding
{
namespace vsomeip
{

/// @brief Class for CertificateImpl.
class CertificateImpl : public proxy::CertificateProxyBase, public ::ara::com::internal::vsomeip::proxy::ProxyImplBase {
 public :
  /// @brief Using for ProxyInterface.
  using ProxyInterface = proxy::CertificateProxy;
  /// @brief Using for ServiceDescriptor.
  using ServiceDescriptor = descriptors::internal::Service;

  /// @brief Definition for CertificateImpl.
  explicit CertificateImpl(ara::com::internal::vsomeip::types::InstanceId instance) :
  ::ara::com::internal::vsomeip::proxy::ProxyImplBase(ServiceDescriptor::service_id, instance, ServiceDescriptor::service_version_major, ServiceDescriptor::service_version_minor),
  /// @brief Definition for AuthorityKeyId(instance).
    AuthorityKeyId(instance),
  /// @brief Definition for EndTime(instance).
    EndTime(instance),
  /// @brief Definition for ExportPublicly(instance).
    ExportPublicly(instance),
  /// @brief Definition for GetConstraints(instance).
    GetConstraints(instance),
  /// @brief Definition for GetFingerprint(instance).
    GetFingerprint(instance),
  /// @brief Definition for GetPathLimit(instance).
    GetPathLimit(instance),
  /// @brief Definition for GetStatus(instance).
    GetStatus(instance),
  /// @brief Definition for IsCa(instance).
    IsCa(instance),
  /// @brief Definition for IsRoot(instance).
    IsRoot(instance),
  /// @brief Definition for IssuerDn(instance).
    IssuerDn(instance),
  /// @brief Definition for MyProvider(instance).
    MyProvider(instance),
  /// @brief Definition for SerialNumber(instance).
    SerialNumber(instance),
  /// @brief Definition for StartTime(instance).
    StartTime(instance),
  /// @brief Definition for SubjectDn(instance).
    SubjectDn(instance),
  /// @brief Definition for SubjectKeyId(instance).
    SubjectKeyId(instance),
  /// @brief Definition for SubjectPubKey(instance).
    SubjectPubKey(instance),
  /// @brief Definition for VerifyMe(instance).
    VerifyMe(instance),
  /// @brief Definition for X509Version(instance).
    X509Version(instance)
  {}
  /// @brief Definition for CertificateImpl.
  ~CertificateImpl() noexcept override {}

  /// @brief Definition for GetAuthorityKeyId.
        ara::crypto::ipccom::x509::certificate::proxy::methods::AuthorityKeyId& GetAuthorityKeyId() noexcept override { return AuthorityKeyId; }
  /// @brief Definition for GetEndTime.
        ara::crypto::ipccom::x509::certificate::proxy::methods::EndTime& GetEndTime() noexcept override { return EndTime; }
  /// @brief Definition for GetExportPublicly.
        ara::crypto::ipccom::x509::certificate::proxy::methods::ExportPublicly& GetExportPublicly() noexcept override { return ExportPublicly; }
  /// @brief Definition for GetGetConstraints.
        ara::crypto::ipccom::x509::certificate::proxy::methods::GetConstraints& GetGetConstraints() noexcept override { return GetConstraints; }
  /// @brief Definition for GetGetFingerprint.
        ara::crypto::ipccom::x509::certificate::proxy::methods::GetFingerprint& GetGetFingerprint() noexcept override { return GetFingerprint; }
  /// @brief Definition for GetGetPathLimit.
        ara::crypto::ipccom::x509::certificate::proxy::methods::GetPathLimit& GetGetPathLimit() noexcept override { return GetPathLimit; }
  /// @brief Definition for GetGetStatus.
        ara::crypto::ipccom::x509::certificate::proxy::methods::GetStatus& GetGetStatus() noexcept override { return GetStatus; }
  /// @brief Definition for GetIsCa.
        ara::crypto::ipccom::x509::certificate::proxy::methods::IsCa& GetIsCa() noexcept override { return IsCa; }
  /// @brief Definition for GetIsRoot.
        ara::crypto::ipccom::x509::certificate::proxy::methods::IsRoot& GetIsRoot() noexcept override { return IsRoot; }
  /// @brief Definition for GetIssuerDn.
        ara::crypto::ipccom::x509::certificate::proxy::methods::IssuerDn& GetIssuerDn() noexcept override { return IssuerDn; }
  /// @brief Definition for GetMyProvider.
        ara::crypto::ipccom::x509::certificate::proxy::methods::MyProvider& GetMyProvider() noexcept override { return MyProvider; }
  /// @brief Definition for GetSerialNumber.
        ara::crypto::ipccom::x509::certificate::proxy::methods::SerialNumber& GetSerialNumber() noexcept override { return SerialNumber; }
  /// @brief Definition for GetStartTime.
        ara::crypto::ipccom::x509::certificate::proxy::methods::StartTime& GetStartTime() noexcept override { return StartTime; }
  /// @brief Definition for GetSubjectDn.
        ara::crypto::ipccom::x509::certificate::proxy::methods::SubjectDn& GetSubjectDn() noexcept override { return SubjectDn; }
  /// @brief Definition for GetSubjectKeyId.
        ara::crypto::ipccom::x509::certificate::proxy::methods::SubjectKeyId& GetSubjectKeyId() noexcept override { return SubjectKeyId; }
  /// @brief Definition for GetSubjectPubKey.
        ara::crypto::ipccom::x509::certificate::proxy::methods::SubjectPubKey& GetSubjectPubKey() noexcept override { return SubjectPubKey; }
  /// @brief Definition for GetVerifyMe.
        ara::crypto::ipccom::x509::certificate::proxy::methods::VerifyMe& GetVerifyMe() noexcept override { return VerifyMe; }
  /// @brief Definition for GetX509Version.
        ara::crypto::ipccom::x509::certificate::proxy::methods::X509Version& GetX509Version() noexcept override { return X509Version; }

 private:
  /// @brief Method for AuthorityKeyId is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::AuthorityKeyId, ara::crypto::ipccom::x509::certificate::proxy::methods::AuthorityKeyId::signature_type> AuthorityKeyId;
  /// @brief Method for EndTime is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::EndTime, ara::crypto::ipccom::x509::certificate::proxy::methods::EndTime::signature_type> EndTime;
  /// @brief Method for ExportPublicly is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::ExportPublicly, ara::crypto::ipccom::x509::certificate::proxy::methods::ExportPublicly::signature_type> ExportPublicly;
  /// @brief Method for GetConstraints is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::GetConstraints, ara::crypto::ipccom::x509::certificate::proxy::methods::GetConstraints::signature_type> GetConstraints;
  /// @brief Method for GetFingerprint is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::GetFingerprint, ara::crypto::ipccom::x509::certificate::proxy::methods::GetFingerprint::signature_type> GetFingerprint;
  /// @brief Method for GetPathLimit is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::GetPathLimit, ara::crypto::ipccom::x509::certificate::proxy::methods::GetPathLimit::signature_type> GetPathLimit;
  /// @brief Method for GetStatus is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::GetStatus, ara::crypto::ipccom::x509::certificate::proxy::methods::GetStatus::signature_type> GetStatus;
  /// @brief Method for IsCa is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::IsCa, ara::crypto::ipccom::x509::certificate::proxy::methods::IsCa::signature_type> IsCa;
  /// @brief Method for IsRoot is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::IsRoot, ara::crypto::ipccom::x509::certificate::proxy::methods::IsRoot::signature_type> IsRoot;
  /// @brief Method for IssuerDn is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::IssuerDn, ara::crypto::ipccom::x509::certificate::proxy::methods::IssuerDn::signature_type> IssuerDn;
  /// @brief Method for MyProvider is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::MyProvider, ara::crypto::ipccom::x509::certificate::proxy::methods::MyProvider::signature_type> MyProvider;
  /// @brief Method for SerialNumber is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::SerialNumber, ara::crypto::ipccom::x509::certificate::proxy::methods::SerialNumber::signature_type> SerialNumber;
  /// @brief Method for StartTime is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::StartTime, ara::crypto::ipccom::x509::certificate::proxy::methods::StartTime::signature_type> StartTime;
  /// @brief Method for SubjectDn is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::SubjectDn, ara::crypto::ipccom::x509::certificate::proxy::methods::SubjectDn::signature_type> SubjectDn;
  /// @brief Method for SubjectKeyId is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::SubjectKeyId, ara::crypto::ipccom::x509::certificate::proxy::methods::SubjectKeyId::signature_type> SubjectKeyId;
  /// @brief Method for SubjectPubKey is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::SubjectPubKey, ara::crypto::ipccom::x509::certificate::proxy::methods::SubjectPubKey::signature_type> SubjectPubKey;
  /// @brief Method for VerifyMe is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::VerifyMe, ara::crypto::ipccom::x509::certificate::proxy::methods::VerifyMe::signature_type> VerifyMe;
  /// @brief Method for X509Version is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::X509Version, ara::crypto::ipccom::x509::certificate::proxy::methods::X509Version::signature_type> X509Version;
};

} // namespace vsomeip
} // namespace certificate_binding
} // namespace certificate
} // namespace x509
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_VSOMEIP_ARA_CRYPTO_IPCCOM_X509_CERTIFICATE_PROXY_VSOMEIP_CERTIFICATE_H_

