// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : signatureservice_common.h
//
// Purpose     : Implementation of file signatureservice_common.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-03-08T13:50:38+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYSERVICE_SIGNATURESERVICE_SIGNATURESERVICE_COMMON_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYSERVICE_SIGNATURESERVICE_SIGNATURESERVICE_COMMON_H_

#include <cstring>
#include <ara/core/array.h>

#include <ara/com/types.h>

#include <ara/com/exception.h>
#include <ara/core/error_code.h>

#include "impl_type_boolean.h"
#include "impl_type_cryptoallowedusageflags.h"
#include "impl_type_cryptoobjectuidipc.h"
#include "impl_type_uint64.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace cryservice
{
namespace signatureservice
{

/// @brief Class for SignatureService.
class  SignatureService {
 public:
  /// @brief Definition for SignatureService.
  virtual ~SignatureService() noexcept
  {}
  static constexpr ara::com::internal::ServiceId service_id{0xFF90};
  static constexpr ara::com::internal::ServiceVersion service_version_major{0x1};
  static constexpr ara::com::internal::ServiceVersion service_version_minor{0x0};
  /// @brief class for GetActualKeyBitLengthOutput.
  class GetActualKeyBitLengthOutput
  {
    public:
    /// @brief Argument for response.
    uint64 response;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(response);
    }
  };
  /// @brief class for GetActualKeyCOUIDOutput.
  class GetActualKeyCOUIDOutput
  {
    public:
    /// @brief Argument for response.
    CryptoObjectUidIPC response;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(response);
    }
  };
  /// @brief class for GetAllowedUsageOutput.
  class GetAllowedUsageOutput
  {
    public:
    /// @brief Argument for response.
    CryptoAllowedUsageFlags response;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(response);
    }
  };
  /// @brief class for GetMaxKeyBitLengthOutput.
  class GetMaxKeyBitLengthOutput
  {
    public:
    /// @brief Argument for response.
    uint64 response;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(response);
    }
  };
  /// @brief class for GetMinKeyBitLengthOutput.
  class GetMinKeyBitLengthOutput
  {
    public:
    /// @brief Argument for response.
    uint64 response;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(response);
    }
  };
  /// @brief class for GetRequiredHashAlgIdOutput.
  class GetRequiredHashAlgIdOutput
  {
    public:
    /// @brief Argument for response.
    uint64 response;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(response);
    }
  };
  /// @brief class for GetRequiredHashSizeOutput.
  class GetRequiredHashSizeOutput
  {
    public:
    /// @brief Argument for result.
    uint64 result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  /// @brief class for GetSignatureSizeOutput.
  class GetSignatureSizeOutput
  {
    public:
    /// @brief Argument for response.
    uint64 response;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(response);
    }
  };
  /// @brief class for IsKeyAvailableOutput.
  class IsKeyAvailableOutput
  {
    public:
    /// @brief Argument for response.
    boolean response;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(response);
    }
  };
  /// @brief class for IsKeyBitLengthSupportedOutput.
  class IsKeyBitLengthSupportedOutput
  {
    public:
    /// @brief Argument for response.
    boolean response;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(response);
    }
  };
};

} // namespace signatureservice
} // namespace cryservice
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYSERVICE_SIGNATURESERVICE_SIGNATURESERVICE_COMMON_H_

