// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : proxy_vsomeip_keystorageprovider.h
//
// Purpose     : Implementation of file proxy_vsomeip_keystorageprovider.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_VSOMEIP_ARA_CRYPTO_IPCCOM_KEYS_KEYSTORAGEPROVIDER_PROXY_VSOMEIP_KEYSTORAGEPROVIDER_H_
#define CRYPTOCLIENTEXE_VSOMEIP_ARA_CRYPTO_IPCCOM_KEYS_KEYSTORAGEPROVIDER_PROXY_VSOMEIP_KEYSTORAGEPROVIDER_H_

#include "service_desc_keystorageprovider.h"
#include "ara/crypto/ipccom/keys/keystorageprovider/keystorageprovider_proxy.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace keys
{
namespace keystorageprovider
{
namespace keystorageprovider_binding
{
namespace vsomeip
{

/// @brief Class for KeyStorageProviderImpl.
class KeyStorageProviderImpl : public proxy::KeyStorageProviderProxyBase, public ::ara::com::internal::vsomeip::proxy::ProxyImplBase {
 public :
  /// @brief Using for ProxyInterface.
  using ProxyInterface = proxy::KeyStorageProviderProxy;
  /// @brief Using for ServiceDescriptor.
  using ServiceDescriptor = descriptors::internal::Service;

  /// @brief Definition for KeyStorageProviderImpl.
  explicit KeyStorageProviderImpl(ara::com::internal::vsomeip::types::InstanceId instance) :
  ::ara::com::internal::vsomeip::proxy::ProxyImplBase(ServiceDescriptor::service_id, instance, ServiceDescriptor::service_version_major, ServiceDescriptor::service_version_minor),
  /// @brief Definition for BeginTransaction(instance).
    BeginTransaction(instance),
  /// @brief Definition for GetRegisteredObserver(instance).
    GetRegisteredObserver(instance),
  /// @brief Definition for LoadKeySlot(instance).
    LoadKeySlot(instance),
  /// @brief Definition for RegisterObserver(instance).
    RegisterObserver(instance),
  /// @brief Definition for RollbackTransaction(instance).
    RollbackTransaction(instance),
  /// @brief Definition for UnsubscribeObserver(instance).
    UnsubscribeObserver(instance)
  {}
  /// @brief Definition for KeyStorageProviderImpl.
  ~KeyStorageProviderImpl() noexcept override {}

  /// @brief Definition for GetBeginTransaction.
        ara::crypto::ipccom::keys::keystorageprovider::proxy::methods::BeginTransaction& GetBeginTransaction() noexcept override { return BeginTransaction; }
  /// @brief Definition for GetGetRegisteredObserver.
        ara::crypto::ipccom::keys::keystorageprovider::proxy::methods::GetRegisteredObserver& GetGetRegisteredObserver() noexcept override { return GetRegisteredObserver; }
  /// @brief Definition for GetLoadKeySlot.
        ara::crypto::ipccom::keys::keystorageprovider::proxy::methods::LoadKeySlot& GetLoadKeySlot() noexcept override { return LoadKeySlot; }
  /// @brief Definition for GetRegisterObserver.
        ara::crypto::ipccom::keys::keystorageprovider::proxy::methods::RegisterObserver& GetRegisterObserver() noexcept override { return RegisterObserver; }
  /// @brief Definition for GetRollbackTransaction.
        ara::crypto::ipccom::keys::keystorageprovider::proxy::methods::RollbackTransaction& GetRollbackTransaction() noexcept override { return RollbackTransaction; }
  /// @brief Definition for GetUnsubscribeObserver.
        ara::crypto::ipccom::keys::keystorageprovider::proxy::methods::UnsubscribeObserver& GetUnsubscribeObserver() noexcept override { return UnsubscribeObserver; }

 private:
  /// @brief Method for BeginTransaction is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::BeginTransaction, ara::crypto::ipccom::keys::keystorageprovider::proxy::methods::BeginTransaction::signature_type> BeginTransaction;
  /// @brief Method for GetRegisteredObserver is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::GetRegisteredObserver, ara::crypto::ipccom::keys::keystorageprovider::proxy::methods::GetRegisteredObserver::signature_type> GetRegisteredObserver;
  /// @brief Method for LoadKeySlot is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::LoadKeySlot, ara::crypto::ipccom::keys::keystorageprovider::proxy::methods::LoadKeySlot::signature_type> LoadKeySlot;
  /// @brief Method for RegisterObserver is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::RegisterObserver, ara::crypto::ipccom::keys::keystorageprovider::proxy::methods::RegisterObserver::signature_type> RegisterObserver;
  /// @brief Method for RollbackTransaction is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::RollbackTransaction, ara::crypto::ipccom::keys::keystorageprovider::proxy::methods::RollbackTransaction::signature_type> RollbackTransaction;
  /// @brief Method for UnsubscribeObserver is fire & forget: false.
  ara::com::internal::vsomeip::proxy::MethodImpl<descriptors::UnsubscribeObserver, ara::crypto::ipccom::keys::keystorageprovider::proxy::methods::UnsubscribeObserver::signature_type> UnsubscribeObserver;
};

} // namespace vsomeip
} // namespace keystorageprovider_binding
} // namespace keystorageprovider
} // namespace keys
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_VSOMEIP_ARA_CRYPTO_IPCCOM_KEYS_KEYSTORAGEPROVIDER_PROXY_VSOMEIP_KEYSTORAGEPROVIDER_H_

