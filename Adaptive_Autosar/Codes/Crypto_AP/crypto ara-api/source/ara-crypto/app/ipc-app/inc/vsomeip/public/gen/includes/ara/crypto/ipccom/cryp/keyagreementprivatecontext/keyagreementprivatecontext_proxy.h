// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : keyagreementprivatecontext_proxy.h
//
// Purpose     : Implementation of file keyagreementprivatecontext_proxy.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_KEYAGREEMENTPRIVATECONTEXT_KEYAGREEMENTPRIVATECONTEXT_PROXY_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_KEYAGREEMENTPRIVATECONTEXT_KEYAGREEMENTPRIVATECONTEXT_PROXY_H_

#include <ara/com/internal/proxy/ara_proxy_base.h>
#include "ara/crypto/ipccom/cryp/keyagreementprivatecontext/keyagreementprivatecontext_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace keyagreementprivatecontext
{
namespace proxy
{

namespace methods
{
  /// @brief Using for AgreeKey.
  using AgreeKey = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::keyagreementprivatecontext::KeyAgreementPrivateContext::AgreeKeyOutput(const CryptoServiceInstanceId& ,const CryptoServiceInstanceId& ,const CryptoAlgId& ,const ContentAllowedUsage& ,const CryptoReadOnlyMemRegion& ,const CryptoReadOnlyMemRegion& )>;
  /// @brief Using for AgreeSeed.
  using AgreeSeed = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::keyagreementprivatecontext::KeyAgreementPrivateContext::AgreeSeedOutput(const CryptoServiceInstanceId& ,const CryptoAllowedUsageFlags& )>;
  /// @brief Using for GetCryptoPrimitiveId.
  using GetCryptoPrimitiveId = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::keyagreementprivatecontext::KeyAgreementPrivateContext::GetCryptoPrimitiveIdOutput()>;
  /// @brief Using for GetExtensionService.
  using GetExtensionService = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::keyagreementprivatecontext::KeyAgreementPrivateContext::GetExtensionServiceOutput()>;
  /// @brief Using for IsInitialized.
  using IsInitialized = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::keyagreementprivatecontext::KeyAgreementPrivateContext::IsInitializedOutput()>;
  /// @brief Using for Reset.
  using Reset = ara::com::internal::proxy::Method<void()>;
  /// @brief Using for SetKey.
  using SetKey = ara::com::internal::proxy::Method<void(const CryptoServiceInstanceId& )>;
} // namespace methods



/// @brief Class for KeyAgreementPrivateContextProxyBase.
class KeyAgreementPrivateContextProxyBase : public ara::com::internal::proxy::ProxyBindingBase, public ara::crypto::ipccom::cryp::keyagreementprivatecontext::KeyAgreementPrivateContext {
 public:
  /// @brief Method for AgreeKey.
  virtual methods::AgreeKey& GetAgreeKey() = 0;
  /// @brief Method for AgreeSeed.
  virtual methods::AgreeSeed& GetAgreeSeed() = 0;
  /// @brief Method for GetCryptoPrimitiveId.
  virtual methods::GetCryptoPrimitiveId& GetGetCryptoPrimitiveId() = 0;
  /// @brief Method for GetExtensionService.
  virtual methods::GetExtensionService& GetGetExtensionService() = 0;
  /// @brief Method for IsInitialized.
  virtual methods::IsInitialized& GetIsInitialized() = 0;
  /// @brief Method for Reset.
  virtual methods::Reset& GetReset() = 0;
  /// @brief Method for SetKey.
  virtual methods::SetKey& GetSetKey() = 0;
};

/// @brief Class for KeyAgreementPrivateContextProxy.
class KeyAgreementPrivateContextProxy : public ara::com::internal::proxy::ProxyBase<KeyAgreementPrivateContextProxyBase>, public ara::crypto::ipccom::cryp::keyagreementprivatecontext::KeyAgreementPrivateContext {
 public:
  /// @brief Definition for KeyAgreementPrivateContextProxy.
  explicit KeyAgreementPrivateContextProxy(const HandleType& proxy_base_factory) :
    ara::com::internal::proxy::ProxyBase<KeyAgreementPrivateContextProxyBase>(proxy_base_factory),
    /// @brief Function GetAgreeKey.
    AgreeKey(proxy_base_->GetAgreeKey()),
    /// @brief Function GetAgreeSeed.
    AgreeSeed(proxy_base_->GetAgreeSeed()),
    /// @brief Function GetGetCryptoPrimitiveId.
    GetCryptoPrimitiveId(proxy_base_->GetGetCryptoPrimitiveId()),
    /// @brief Function GetGetExtensionService.
    GetExtensionService(proxy_base_->GetGetExtensionService()),
    /// @brief Function GetIsInitialized.
    IsInitialized(proxy_base_->GetIsInitialized()),
    /// @brief Function GetReset.
    Reset(proxy_base_->GetReset()),
    /// @brief Function GetSetKey.
    SetKey(proxy_base_->GetSetKey())
  {}

  /// @brief Proxy shall be move constructable.
  explicit KeyAgreementPrivateContextProxy(KeyAgreementPrivateContextProxy&&) = default;

  /// @brief Proxy shall be move assignable.
  KeyAgreementPrivateContextProxy& operator=(KeyAgreementPrivateContextProxy&&) = default;

  /// @brief Proxy shall not be copy constructable.
  explicit KeyAgreementPrivateContextProxy(const KeyAgreementPrivateContextProxy&) = delete;

  /// @brief Proxy shall not be copy assignable.
  KeyAgreementPrivateContextProxy& operator=(const KeyAgreementPrivateContextProxy&) = delete;

  /// @brief Method for AgreeKey.
  methods::AgreeKey& AgreeKey;
  /// @brief Method for AgreeSeed.
  methods::AgreeSeed& AgreeSeed;
  /// @brief Method for GetCryptoPrimitiveId.
  methods::GetCryptoPrimitiveId& GetCryptoPrimitiveId;
  /// @brief Method for GetExtensionService.
  methods::GetExtensionService& GetExtensionService;
  /// @brief Method for IsInitialized.
  methods::IsInitialized& IsInitialized;
  /// @brief Method for Reset.
  methods::Reset& Reset;
  /// @brief Method for SetKey.
  methods::SetKey& SetKey;
};
} // namespace proxy

} // namespace keyagreementprivatecontext
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_KEYAGREEMENTPRIVATECONTEXT_KEYAGREEMENTPRIVATECONTEXT_PROXY_H_

