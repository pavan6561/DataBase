// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : authciphercontext_proxy.h
//
// Purpose     : Implementation of file authciphercontext_proxy.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_AUTHENTICATIONCIPHER_AUTHCIPHERCONTEXT_PROXY_H_
#define CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_AUTHENTICATIONCIPHER_AUTHCIPHERCONTEXT_PROXY_H_

#include <ara/com/internal/proxy/ara_proxy_base.h>
#include "ara/crypto/ipccom/cryp/authenticationcipher/authciphercontext_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace authenticationcipher
{
namespace proxy
{

namespace methods
{
  /// @brief Using for Check.
  using Check = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::authenticationcipher::AuthCipherContext::CheckOutput(const CryptoServiceInstanceId& )>;
  /// @brief Using for GetBlockService.
  using GetBlockService = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::authenticationcipher::AuthCipherContext::GetBlockServiceOutput()>;
  /// @brief Using for GetCryptoPrimitiveId.
  using GetCryptoPrimitiveId = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::authenticationcipher::AuthCipherContext::GetCryptoPrimitiveIdOutput()>;
  /// @brief Using for GetDigest.
  using GetDigest = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::authenticationcipher::AuthCipherContext::GetDigestOutput(const uint64& )>;
  /// @brief Using for GetMaxAssociatedDataSize.
  using GetMaxAssociatedDataSize = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::authenticationcipher::AuthCipherContext::GetMaxAssociatedDataSizeOutput()>;
  /// @brief Using for GetTransformation.
  using GetTransformation = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::authenticationcipher::AuthCipherContext::GetTransformationOutput()>;
  /// @brief Using for IsInitialized.
  using IsInitialized = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::authenticationcipher::AuthCipherContext::IsInitializedOutput()>;
  /// @brief Using for ProcessConfidentialDataReadOnlyMem.
  using ProcessConfidentialDataReadOnlyMem = ara::com::internal::proxy::Method<ara::crypto::ipccom::cryp::authenticationcipher::AuthCipherContext::ProcessConfidentialDataReadOnlyMemOutput(const CryptoReadOnlyMemRegion& ,const CryptoReadOnlyMemRegion& )>;
  /// @brief Using for Reset.
  using Reset = ara::com::internal::proxy::Method<void()>;
  /// @brief Using for SetKey.
  using SetKey = ara::com::internal::proxy::Method<void(const CryptoServiceInstanceId& ,const CryptoTransformDataType& )>;
  /// @brief Using for StartReadOnlyMem.
  using StartReadOnlyMem = ara::com::internal::proxy::Method<void(const CryptoReadOnlyMemRegion& )>;
  /// @brief Using for StartSecretSeed.
  using StartSecretSeed = ara::com::internal::proxy::Method<void(const CryptoServiceInstanceId& )>;
  /// @brief Using for UpdateAssociatedData.
  using UpdateAssociatedData = ara::com::internal::proxy::Method<void(const uint8& )>;
  /// @brief Using for UpdateAssociatedDataReadOnlyMem.
  using UpdateAssociatedDataReadOnlyMem = ara::com::internal::proxy::Method<void(const CryptoReadOnlyMemRegion& )>;
  /// @brief Using for UpdateAssociatedDataResUseObj.
  using UpdateAssociatedDataResUseObj = ara::com::internal::proxy::Method<void(const RestrictedUseObjectStructure& )>;
} // namespace methods



/// @brief Class for AuthCipherContextProxyBase.
class AuthCipherContextProxyBase : public ara::com::internal::proxy::ProxyBindingBase, public ara::crypto::ipccom::cryp::authenticationcipher::AuthCipherContext {
 public:
  /// @brief Method for Check.
  virtual methods::Check& GetCheck() = 0;
  /// @brief Method for GetBlockService.
  virtual methods::GetBlockService& GetGetBlockService() = 0;
  /// @brief Method for GetCryptoPrimitiveId.
  virtual methods::GetCryptoPrimitiveId& GetGetCryptoPrimitiveId() = 0;
  /// @brief Method for GetDigest.
  virtual methods::GetDigest& GetGetDigest() = 0;
  /// @brief Method for GetMaxAssociatedDataSize.
  virtual methods::GetMaxAssociatedDataSize& GetGetMaxAssociatedDataSize() = 0;
  /// @brief Method for GetTransformation.
  virtual methods::GetTransformation& GetGetTransformation() = 0;
  /// @brief Method for IsInitialized.
  virtual methods::IsInitialized& GetIsInitialized() = 0;
  /// @brief Method for ProcessConfidentialDataReadOnlyMem.
  virtual methods::ProcessConfidentialDataReadOnlyMem& GetProcessConfidentialDataReadOnlyMem() = 0;
  /// @brief Method for Reset.
  virtual methods::Reset& GetReset() = 0;
  /// @brief Method for SetKey.
  virtual methods::SetKey& GetSetKey() = 0;
  /// @brief Method for StartReadOnlyMem.
  virtual methods::StartReadOnlyMem& GetStartReadOnlyMem() = 0;
  /// @brief Method for StartSecretSeed.
  virtual methods::StartSecretSeed& GetStartSecretSeed() = 0;
  /// @brief Method for UpdateAssociatedData.
  virtual methods::UpdateAssociatedData& GetUpdateAssociatedData() = 0;
  /// @brief Method for UpdateAssociatedDataReadOnlyMem.
  virtual methods::UpdateAssociatedDataReadOnlyMem& GetUpdateAssociatedDataReadOnlyMem() = 0;
  /// @brief Method for UpdateAssociatedDataResUseObj.
  virtual methods::UpdateAssociatedDataResUseObj& GetUpdateAssociatedDataResUseObj() = 0;
};

/// @brief Class for AuthCipherContextProxy.
class AuthCipherContextProxy : public ara::com::internal::proxy::ProxyBase<AuthCipherContextProxyBase>, public ara::crypto::ipccom::cryp::authenticationcipher::AuthCipherContext {
 public:
  /// @brief Definition for AuthCipherContextProxy.
  explicit AuthCipherContextProxy(const HandleType& proxy_base_factory) :
    ara::com::internal::proxy::ProxyBase<AuthCipherContextProxyBase>(proxy_base_factory),
    /// @brief Function GetCheck.
    Check(proxy_base_->GetCheck()),
    /// @brief Function GetGetBlockService.
    GetBlockService(proxy_base_->GetGetBlockService()),
    /// @brief Function GetGetCryptoPrimitiveId.
    GetCryptoPrimitiveId(proxy_base_->GetGetCryptoPrimitiveId()),
    /// @brief Function GetGetDigest.
    GetDigest(proxy_base_->GetGetDigest()),
    /// @brief Function GetGetMaxAssociatedDataSize.
    GetMaxAssociatedDataSize(proxy_base_->GetGetMaxAssociatedDataSize()),
    /// @brief Function GetGetTransformation.
    GetTransformation(proxy_base_->GetGetTransformation()),
    /// @brief Function GetIsInitialized.
    IsInitialized(proxy_base_->GetIsInitialized()),
    /// @brief Function GetProcessConfidentialDataReadOnlyMem.
    ProcessConfidentialDataReadOnlyMem(proxy_base_->GetProcessConfidentialDataReadOnlyMem()),
    /// @brief Function GetReset.
    Reset(proxy_base_->GetReset()),
    /// @brief Function GetSetKey.
    SetKey(proxy_base_->GetSetKey()),
    /// @brief Function GetStartReadOnlyMem.
    StartReadOnlyMem(proxy_base_->GetStartReadOnlyMem()),
    /// @brief Function GetStartSecretSeed.
    StartSecretSeed(proxy_base_->GetStartSecretSeed()),
    /// @brief Function GetUpdateAssociatedData.
    UpdateAssociatedData(proxy_base_->GetUpdateAssociatedData()),
    /// @brief Function GetUpdateAssociatedDataReadOnlyMem.
    UpdateAssociatedDataReadOnlyMem(proxy_base_->GetUpdateAssociatedDataReadOnlyMem()),
    /// @brief Function GetUpdateAssociatedDataResUseObj.
    UpdateAssociatedDataResUseObj(proxy_base_->GetUpdateAssociatedDataResUseObj())
  {}

  /// @brief Proxy shall be move constructable.
  explicit AuthCipherContextProxy(AuthCipherContextProxy&&) = default;

  /// @brief Proxy shall be move assignable.
  AuthCipherContextProxy& operator=(AuthCipherContextProxy&&) = default;

  /// @brief Proxy shall not be copy constructable.
  explicit AuthCipherContextProxy(const AuthCipherContextProxy&) = delete;

  /// @brief Proxy shall not be copy assignable.
  AuthCipherContextProxy& operator=(const AuthCipherContextProxy&) = delete;

  /// @brief Method for Check.
  methods::Check& Check;
  /// @brief Method for GetBlockService.
  methods::GetBlockService& GetBlockService;
  /// @brief Method for GetCryptoPrimitiveId.
  methods::GetCryptoPrimitiveId& GetCryptoPrimitiveId;
  /// @brief Method for GetDigest.
  methods::GetDigest& GetDigest;
  /// @brief Method for GetMaxAssociatedDataSize.
  methods::GetMaxAssociatedDataSize& GetMaxAssociatedDataSize;
  /// @brief Method for GetTransformation.
  methods::GetTransformation& GetTransformation;
  /// @brief Method for IsInitialized.
  methods::IsInitialized& IsInitialized;
  /// @brief Method for ProcessConfidentialDataReadOnlyMem.
  methods::ProcessConfidentialDataReadOnlyMem& ProcessConfidentialDataReadOnlyMem;
  /// @brief Method for Reset.
  methods::Reset& Reset;
  /// @brief Method for SetKey.
  methods::SetKey& SetKey;
  /// @brief Method for StartReadOnlyMem.
  methods::StartReadOnlyMem& StartReadOnlyMem;
  /// @brief Method for StartSecretSeed.
  methods::StartSecretSeed& StartSecretSeed;
  /// @brief Method for UpdateAssociatedData.
  methods::UpdateAssociatedData& UpdateAssociatedData;
  /// @brief Method for UpdateAssociatedDataReadOnlyMem.
  methods::UpdateAssociatedDataReadOnlyMem& UpdateAssociatedDataReadOnlyMem;
  /// @brief Method for UpdateAssociatedDataResUseObj.
  methods::UpdateAssociatedDataResUseObj& UpdateAssociatedDataResUseObj;
};
} // namespace proxy

} // namespace authenticationcipher
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOCLIENTEXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_AUTHENTICATIONCIPHER_AUTHCIPHERCONTEXT_PROXY_H_

