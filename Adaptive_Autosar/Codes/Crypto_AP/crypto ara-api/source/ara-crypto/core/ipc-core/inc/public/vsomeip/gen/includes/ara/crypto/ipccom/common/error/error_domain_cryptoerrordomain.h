// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : error_domain_cryptoerrordomain.h
//
// Purpose     : Implementation of file error_domain_cryptoerrordomain.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_COMMON_ERROR_ERROR_DOMAIN_CRYPTOERRORDOMAIN_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_COMMON_ERROR_ERROR_DOMAIN_CRYPTOERRORDOMAIN_H_

#include <ara/core/error_code.h>
#include <ara/core/error_domain.h>
#include <ara/core/exception.h>

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace common
{
namespace error
{

/// @brief Class for CryptoErrorDomainErrc.
enum class CryptoErrorDomainErrc : ara::core::ErrorDomain::CodeType
{
  kBusyResource = 0x1000001,
  kUnreservedResource = 0x1000003,
  kModifiedResource = 0x1000004,
  kInvalidArgument = 0x2010000,
  kUnknownIdentifier = 0x2010001,
  kInsufficientCapacity = 0x2010002,
  kInvalidInputSize = 0x2010003,
  kIncompatibleArguments = 0x2010004,
  kInOutBuffersIntersect = 0x2010005,
  kBelowBoundary = 0x2010006,
  kAboveBoundary = 0x2010007,
  kAuthTagNotValid = 0x2010008,
  kUnsupported = 0x2010100,
  kInvalidUsageOrder = 0x2020000,
  kUninitializedContext = 0x2020001,
  kProcessingNotStarted = 0x2020002,
  kProcessingNotFinished = 0x2020003,
  kRuntimeFault = 0x3000000,
  kUnsupportedFormat = 0x3000001,
  kBruteForceRisk = 0x3000002,
  kContentRestrictions = 0x3000003,
  kBadObjectReference = 0x3000004,
  kContentDuplication = 0x3000006,
  kUnexpectedValue = 0x3010000,
  kIncompatibleObject = 0x3010001,
  kIncompleteArgState = 0x3010002,
  kEmptyContainer = 0x3010003,
  kMissingArgument = 0x3010004,
  kUsageViolation = 0x3020000,
  kAccessViolation = 0x3030000,
};

/// @brief Class for CryptoErrorDomainException.
class CryptoErrorDomainException : public ara::core::Exception
{
 public:
  /// @brief throw the exception CryptoErrorDomainException.
  explicit CryptoErrorDomainException(ara::core::ErrorCode err) noexcept
    : ara::core::Exception(err)
  {}
};

/// @brief Class for CryptoErrorDomainErrorDomain.
class CryptoErrorDomainErrorDomain final : public ara::core::ErrorDomain
{
  constexpr static ara::core::ErrorDomain::IdType kId{34};
 public:
  /// @brief Using for Errc.
  using Errc = CryptoErrorDomainErrc;
  /// @brief Using for Exception.
  using Exception = CryptoErrorDomainException;

  /// @brief Definition for CryptoErrorDomainErrorDomain.
  constexpr CryptoErrorDomainErrorDomain() noexcept
  : ara::core::ErrorDomain(kId)
  {}

  /// @brief Definition for Name.
  char const* Name() const noexcept final override;

  /// @brief Definition for Message.
  char const* Message(ara::core::ErrorDomain::CodeType errorCode) const noexcept final override;

  /// @brief Definition for ThrowAsException.
  void ThrowAsException(ara::core::ErrorCode const& errorCode) const noexcept(false) final override;
};

namespace internal
{
  constexpr CryptoErrorDomainErrorDomain g_CryptoErrorDomainErrorDomain;
}

/// brief Definition for GetCryptoErrorDomainErrorDomain.
inline constexpr ara::core::ErrorDomain const& GetCryptoErrorDomainErrorDomain() noexcept
{
  return internal::g_CryptoErrorDomainErrorDomain;
}

/// @brief Definition for MakeErrorCode.
inline constexpr ara::core::ErrorCode MakeErrorCode(CryptoErrorDomainErrc code,
  ara::core::ErrorDomain::SupportDataType data) noexcept
{
  return ara::core::ErrorCode(static_cast<ara::core::ErrorDomain::CodeType>(code), GetCryptoErrorDomainErrorDomain(), data);
}

} // namespace error
} // namespace common
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_COMMON_ERROR_ERROR_DOMAIN_CRYPTOERRORDOMAIN_H_


