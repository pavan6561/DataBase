// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : cryptoproviderinterface_skeleton.h
//
// Purpose     : Implementation of file cryptoproviderinterface_skeleton.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-03-14T12:58:58+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYPTOPROVIDER_CRYPTOPROVIDERINTERFACE_SKELETON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYPTOPROVIDER_CRYPTOPROVIDERINTERFACE_SKELETON_H_

#include <ara/com/internal/skeleton/ara_skeleton_base.h>
#include <ara/com/illegal_state_exception.h>
#include "ara/crypto/ipccom/cryp/cryptoprovider/cryptoproviderinterface_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace cryptoprovider
{
namespace skeleton
{



/// @brief Class for CryptoProviderInterfaceSkeleton.
class CryptoProviderInterfaceSkeleton : public ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface, public ara::com::internal::skeleton::TypedServiceImplBase<CryptoProviderInterfaceSkeleton> {
 public:
  /// @uptrace{SWS_CM_00130}
  CryptoProviderInterfaceSkeleton(ara::com::InstanceIdentifier instance_id, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<CryptoProviderInterfaceSkeleton>(instance_id, mode) {}
  /// @brief CryptoProviderInterfaceSkeleton Destructor.

  /// @uptrace{SWS_CM_00152, 4ff7c3aec9fce6d3819bb320c152ce9c410cbe74}
  CryptoProviderInterfaceSkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<CryptoProviderInterfaceSkeleton>(std::move(instanceSpec), mode) {}

  /// @uptrace{SWS_CM_00153, 791854b84a101bd8d4a5e0e90bb3fb34c1fafd6f}
  CryptoProviderInterfaceSkeleton(ara::com::InstanceIdentifierContainer instanceIDs, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<CryptoProviderInterfaceSkeleton>(std::move(instanceIDs), mode) {}

  /// @brief Skeleton shall be move constructable.
  explicit CryptoProviderInterfaceSkeleton(CryptoProviderInterfaceSkeleton&&) = default;

  /// @brief Skeleton shall be move assignable.
  CryptoProviderInterfaceSkeleton& operator=(CryptoProviderInterfaceSkeleton&&) = default;

  /// @brief Skeleton shall not be copy constructable.
  explicit CryptoProviderInterfaceSkeleton(const CryptoProviderInterfaceSkeleton&) = delete;

  /// @brief Virtual function.
virtual ~CryptoProviderInterfaceSkeleton() noexcept override;

  /// @brief Skeleton shall not be copy assignable.
  CryptoProviderInterfaceSkeleton& operator=(const CryptoProviderInterfaceSkeleton&) = delete;

  /// @brief Definition for OfferService.
  void OfferService();
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateAuthCipherOutput;
  /// @brief Definition for CreateAuthCipher.
  virtual ara::core::Future<CreateAuthCipherOutput>CreateAuthCipher(const CryptoAlgId& algId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateDecryptorPrivateOutput;
  /// @brief Definition for CreateDecryptorPrivate.
  virtual ara::core::Future<CreateDecryptorPrivateOutput>CreateDecryptorPrivate(const CryptoAlgId& algId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateEncryptorPublicOutput;
  /// @brief Definition for CreateEncryptorPublic.
  virtual ara::core::Future<CreateEncryptorPublicOutput>CreateEncryptorPublic(const CryptoAlgId& algId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateHashDigestOutput;
  /// @brief Definition for CreateHashDigest.
  virtual ara::core::Future<CreateHashDigestOutput>CreateHashDigest(const CryptoAlgId& hashAlgId,const CryptoReadOnlyMemRegion& readOnlyValue)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateHashFunctionOutput;
  /// @brief Definition for CreateHashFunction.
  virtual ara::core::Future<CreateHashFunctionOutput>CreateHashFunction(const CryptoAlgId& algId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateKeyAgreementPrivateOutput;
  /// @brief Definition for CreateKeyAgreementPrivate.
  virtual ara::core::Future<CreateKeyAgreementPrivateOutput>CreateKeyAgreementPrivate(const CryptoAlgId& algId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateKeyDecapsulatorPrivateOutput;
  /// @brief Definition for CreateKeyDecapsulatorPrivate.
  virtual ara::core::Future<CreateKeyDecapsulatorPrivateOutput>CreateKeyDecapsulatorPrivate(const CryptoAlgId& algId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateKeyDerivationFunctionOutput;
  /// @brief Definition for CreateKeyDerivationFunction.
  virtual ara::core::Future<CreateKeyDerivationFunctionOutput>CreateKeyDerivationFunction(const CryptoAlgId& algId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateKeyEncapsulatorPublicOutput;
  /// @brief Definition for CreateKeyEncapsulatorPublic.
  virtual ara::core::Future<CreateKeyEncapsulatorPublicOutput>CreateKeyEncapsulatorPublic(const CryptoAlgId& algId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateMessageAuthCodeOutput;
  /// @brief Definition for CreateMessageAuthCode.
  virtual ara::core::Future<CreateMessageAuthCodeOutput>CreateMessageAuthCode(const CryptoAlgId& algId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateMsgRecoveryPublicOutput;
  /// @brief Definition for CreateMsgRecoveryPublic.
  virtual ara::core::Future<CreateMsgRecoveryPublicOutput>CreateMsgRecoveryPublic(const CryptoAlgId& algId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateRandomGeneratorOutput;
  /// @brief Definition for CreateRandomGenerator.
  virtual ara::core::Future<CreateRandomGeneratorOutput>CreateRandomGenerator(const CryptoAlgId& algId,const Boolean& initialize)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateSigEncodePrivateOutput;
  /// @brief Definition for CreateSigEncodePrivate.
  virtual ara::core::Future<CreateSigEncodePrivateOutput>CreateSigEncodePrivate(const CryptoAlgId& algId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateSignatureOutput;
  /// @brief Definition for CreateSignature.
  virtual ara::core::Future<CreateSignatureOutput>CreateSignature(const CryptoAlgId& signAlgId,const CryptoReadOnlyMemRegion& readOnlyValue,const RestrictedUseObjectStructure& restrictedUseObjStruct,const CryptoAlgId& hashAlgId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateSignerPrivateOutput;
  /// @brief Definition for CreateSignerPrivate.
  virtual ara::core::Future<CreateSignerPrivateOutput>CreateSignerPrivate(const CryptoAlgId& algId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateStreamCipherOutput;
  /// @brief Definition for CreateStreamCipher.
  virtual ara::core::Future<CreateStreamCipherOutput>CreateStreamCipher(const CryptoAlgId& algId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateSymmetricBlockCipherOutput;
  /// @brief Definition for CreateSymmetricBlockCipher.
  virtual ara::core::Future<CreateSymmetricBlockCipherOutput>CreateSymmetricBlockCipher(const CryptoAlgId& algId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateSymmetricKeyWrapperOutput;
  /// @brief Definition for CreateSymmetricKeyWrapper.
  virtual ara::core::Future<CreateSymmetricKeyWrapperOutput>CreateSymmetricKeyWrapper(const CryptoAlgId& algId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::CreateVerifierPublicOutput;
  /// @brief Definition for CreateVerifierPublic.
  virtual ara::core::Future<CreateVerifierPublicOutput>CreateVerifierPublic(const CryptoAlgId& algId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::GenPrivateKeyOutput;
  /// @brief Definition for GenPrivateKey.
  virtual ara::core::Future<GenPrivateKeyOutput>GenPrivateKey(const CryptoAlgId& algId,const CryptoAllowedUsageFlags& allowedUsages,const Boolean& isSession,const Boolean& isExportable)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::GenSeedOutput;
  /// @brief Definition for GenSeed.
  virtual ara::core::Future<GenSeedOutput>GenSeed(const CryptoAlgId& algId,const CryptoAllowedUsageFlags& secretSeedAllowedUsages,const Boolean& isSession,const Boolean& isExportable)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::GenSymmetricKeyOutput;
  /// @brief Definition for GenSymmetricKey.
  virtual ara::core::Future<GenSymmetricKeyOutput>GenSymmetricKey(const CryptoAlgId& algId,const CryptoAllowedUsageFlags& allowedUsage,const Boolean& isSession,const Boolean& isExportable)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::LoadObjectOutput;
  /// @brief Definition for LoadObject.
  virtual ara::core::Future<LoadObjectOutput>LoadObject(const CryptoServiceInstanceId& IOInterfaceContainerInstanceId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::LoadPrivateKeyOutput;
  /// @brief Definition for LoadPrivateKey.
  virtual ara::core::Future<LoadPrivateKeyOutput>LoadPrivateKey(const CryptoServiceInstanceId& IOInterfaceContainerInstanceId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::LoadPublicKeyOutput;
  /// @brief Definition for LoadPublicKey.
  virtual ara::core::Future<LoadPublicKeyOutput>LoadPublicKey(const CryptoServiceInstanceId& IOInterfaceContainerInstanceId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::LoadSecretSeedOutput;
  /// @brief Definition for LoadSecretSeed.
  virtual ara::core::Future<LoadSecretSeedOutput>LoadSecretSeed(const CryptoServiceInstanceId& IOInterfaceContainerInstanceId)=0 ;
  using ara::crypto::ipccom::cryp::cryptoprovider::CryptoProviderInterface::LoadSymmetricKeyOutput;
  /// @brief Definition for LoadSymmetricKey.
  virtual ara::core::Future<LoadSymmetricKeyOutput>LoadSymmetricKey(const CryptoServiceInstanceId& IOInterfaceContainerInstanceId)=0 ;
  /// @brief Definition for StopCryptoProviderService.
  virtual ara::core::Future<void> StopCryptoProviderService(const CryptoProviderServiceType& cpServiceId,const CryptoServiceInstanceId& instanceId) = 0;
};

} // namespace skeleton
} // namespace cryptoprovider
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYPTOPROVIDER_CRYPTOPROVIDERINTERFACE_SKELETON_H_

