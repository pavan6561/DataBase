// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : adapter_msgrecoverypubliccontext.cpp
//
// Purpose     : Implementation of file adapter_msgrecoverypubliccontext.cpp
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-03-14T12:58:58+05:30
// -----------------------------------------------------------------------------------------------------------

#include "adapter_msgrecoverypubliccontext.h"
namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace msgrecoverypubliccontext
{
namespace msgrecoverypubliccontext_binding
{
namespace vsomeip
{

MsgRecoveryPublicContextServiceAdapter::~MsgRecoveryPublicContextServiceAdapter() noexcept {
  StopOfferService(ServiceDescriptor::service_id, GetInstanceId());
  UnregisterMethodDispatcher(ServiceDescriptor::service_id);
  Disconnect(dynamic_cast<ServiceInterface&>(service_));
}

void MsgRecoveryPublicContextServiceAdapter::DispatchMethodCall(const std::shared_ptr<::vsomeip::message>& msg)
{
  ServiceInterface& service{dynamic_cast<ServiceInterface&>(service_)};
  switch(msg->get_method()) {
    case descriptors::DecodeAndVerify::method_id:
      HandleCall(service, &ServiceInterface::DecodeAndVerify, msg);
    break;
    case descriptors::GetCryptoPrimitiveId::method_id:
      HandleCall(service, &ServiceInterface::GetCryptoPrimitiveId, msg);
    break;
    case descriptors::GetExtensionService::method_id:
      HandleCall(service, &ServiceInterface::GetExtensionService, msg);
    break;
    case descriptors::GetMaxInputSize::method_id:
      HandleCall(service, &ServiceInterface::GetMaxInputSize, msg);
    break;
    case descriptors::GetMaxOutputSize::method_id:
      HandleCall(service, &ServiceInterface::GetMaxOutputSize, msg);
    break;
    case descriptors::IsInitialized::method_id:
      HandleCall(service, &ServiceInterface::IsInitialized, msg);
    break;
    case descriptors::Reset::method_id:
      HandleCall(service, &ServiceInterface::Reset, msg);
    break;
    case descriptors::SetKey::method_id:
      HandleCall(service, &ServiceInterface::SetKey, msg);
    break;
    default:
    // Avoid Warning.
    break;
  }
}

void MsgRecoveryPublicContextServiceAdapter::Connect(ServiceInterface& service) {
  service.AddDelegate(*this);
}

void MsgRecoveryPublicContextServiceAdapter::Disconnect(ServiceInterface& service) {
  service.RemoveDelegate(*this);
}

void MsgRecoveryPublicContextServiceAdapter::SendInitialNotification(ServiceInterface& service) {
}

} // namespace vsomeip
} // namespace msgrecoverypubliccontext_binding
} // namespace msgrecoverypubliccontext
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara


