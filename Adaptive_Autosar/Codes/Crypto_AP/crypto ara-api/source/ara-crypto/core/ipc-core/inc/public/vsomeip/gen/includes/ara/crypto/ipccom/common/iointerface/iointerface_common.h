// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : iointerface_common.h
//
// Purpose     : Implementation of file iointerface_common.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_COMMON_IOINTERFACE_IOINTERFACE_COMMON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_COMMON_IOINTERFACE_IOINTERFACE_COMMON_H_

#include <cstring>
#include <ara/core/array.h>

#include <ara/com/types.h>

#include <ara/com/exception.h>
#include <ara/core/error_code.h>

#include "impl_type_boolean.h"
#include "impl_type_cryptoalgid.h"
#include "impl_type_cryptoallowedusageflags.h"
#include "impl_type_cryptoobjectuidipc.h"
#include "impl_type_objecttypeipc.h"
#include "impl_type_uint32.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace common
{
namespace iointerface
{

/// @brief Class for IOInterface.
class  IOInterface {
 public:
  /// @brief Definition for IOInterface.
  virtual ~IOInterface() noexcept
  {}
  static constexpr ara::com::internal::ServiceId service_id{0xCD77};
  static constexpr ara::com::internal::ServiceVersion service_version_major{0x1};
  static constexpr ara::com::internal::ServiceVersion service_version_minor{0x0};
  /// @brief class for GetAllowedUsageOutput.
  class GetAllowedUsageOutput
  {
    public:
    /// @brief Argument for AllowedUsageFlags.
    CryptoAllowedUsageFlags AllowedUsageFlags;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(AllowedUsageFlags);
    }
  };
  /// @brief class for GetCapacityOutput.
  class GetCapacityOutput
  {
    public:
    /// @brief Argument for Size.
    uint32 Size;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(Size);
    }
  };
  /// @brief class for GetCryptoObjectTypeOutput.
  class GetCryptoObjectTypeOutput
  {
    public:
    /// @brief Argument for CryptoObjectType.
    ObjectTypeIPC CryptoObjectType;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(CryptoObjectType);
    }
  };
  /// @brief class for GetObjectIdOutput.
  class GetObjectIdOutput
  {
    public:
    /// @brief Argument for CryptoObjectUid.
    CryptoObjectUidIPC CryptoObjectUid;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(CryptoObjectUid);
    }
  };
  /// @brief class for GetPayloadSizeOutput.
  class GetPayloadSizeOutput
  {
    public:
    /// @brief Argument for PayloadSize.
    uint32 PayloadSize;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(PayloadSize);
    }
  };
  /// @brief class for GetPrimitiveIdOutput.
  class GetPrimitiveIdOutput
  {
    public:
    /// @brief Argument for cryptoAlgId.
    CryptoAlgId cryptoAlgId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(cryptoAlgId);
    }
  };
  /// @brief class for GetTypeRestrictionOutput.
  class GetTypeRestrictionOutput
  {
    public:
    /// @brief Argument for CryptoObjectType.
    ObjectTypeIPC CryptoObjectType;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(CryptoObjectType);
    }
  };
  /// @brief class for IsObjectExportableOutput.
  class IsObjectExportableOutput
  {
    public:
    /// @brief Argument for Bool.
    Boolean Bool;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(Bool);
    }
  };
  /// @brief class for IsObjectSessionOutput.
  class IsObjectSessionOutput
  {
    public:
    /// @brief Argument for Bool.
    Boolean Bool;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(Bool);
    }
  };
  /// @brief class for IsValidOutput.
  class IsValidOutput
  {
    public:
    /// @brief Argument for Bool.
    Boolean Bool;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(Bool);
    }
  };
  /// @brief class for IsVolatileOutput.
  class IsVolatileOutput
  {
    public:
    /// @brief Argument for Bool.
    Boolean Bool;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(Bool);
    }
  };
  /// @brief class for IsWritableOutput.
  class IsWritableOutput
  {
    public:
    /// @brief Argument for Bool.
    Boolean Bool;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(Bool);
    }
  };
};

} // namespace iointerface
} // namespace common
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_COMMON_IOINTERFACE_IOINTERFACE_COMMON_H_

