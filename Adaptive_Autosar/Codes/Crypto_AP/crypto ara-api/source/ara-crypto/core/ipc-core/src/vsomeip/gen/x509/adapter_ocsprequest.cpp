// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : adapter_ocsprequest.cpp
//
// Purpose     : Implementation of file adapter_ocsprequest.cpp
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#include "adapter_ocsprequest.h"
namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace x509
{
namespace ocspreq
{
namespace ocsprequest_binding
{
namespace vsomeip
{

OcspRequestServiceAdapter::~OcspRequestServiceAdapter() noexcept {
  StopOfferService(ServiceDescriptor::service_id, GetInstanceId());
  UnregisterMethodDispatcher(ServiceDescriptor::service_id);
  Disconnect(dynamic_cast<ServiceInterface&>(service_));
}

void OcspRequestServiceAdapter::DispatchMethodCall(const std::shared_ptr<::vsomeip::message>& msg)
{
  ServiceInterface& service{dynamic_cast<ServiceInterface&>(service_)};
  switch(msg->get_method()) {
    case descriptors::ExportPublicly::method_id:
      HandleCall(service, &ServiceInterface::ExportPublicly, msg);
    break;
    case descriptors::MyProvider::method_id:
      HandleCall(service, &ServiceInterface::MyProvider, msg);
    break;
    case descriptors::Version::method_id:
      HandleCall(service, &ServiceInterface::Version, msg);
    break;
    default:
    // Avoid Warning.
    break;
  }
}

void OcspRequestServiceAdapter::Connect(ServiceInterface& service) {
  service.AddDelegate(*this);
}

void OcspRequestServiceAdapter::Disconnect(ServiceInterface& service) {
  service.RemoveDelegate(*this);
}

void OcspRequestServiceAdapter::SendInitialNotification(ServiceInterface& service) {
}

} // namespace vsomeip
} // namespace ocsprequest_binding
} // namespace ocspreq
} // namespace x509
} // namespace ipccom
} // namespace crypto
} // namespace ara


