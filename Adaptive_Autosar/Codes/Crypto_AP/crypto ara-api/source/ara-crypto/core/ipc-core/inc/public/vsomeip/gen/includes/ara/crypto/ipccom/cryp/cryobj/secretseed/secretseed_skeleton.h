// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : secretseed_skeleton.h
//
// Purpose     : Implementation of file secretseed_skeleton.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYOBJ_SECRETSEED_SECRETSEED_SKELETON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYOBJ_SECRETSEED_SECRETSEED_SKELETON_H_

#include <ara/com/internal/skeleton/ara_skeleton_base.h>
#include <ara/com/illegal_state_exception.h>
#include "ara/crypto/ipccom/cryp/cryobj/secretseed/secretseed_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace cryobj
{
namespace secretseed
{
namespace skeleton
{



/// @brief Class for SecretSeedSkeleton.
class SecretSeedSkeleton : public ara::crypto::ipccom::cryp::cryobj::secretseed::SecretSeed, public ara::com::internal::skeleton::TypedServiceImplBase<SecretSeedSkeleton> {
 public:
  /// @uptrace{SWS_CM_00130}
  SecretSeedSkeleton(ara::com::InstanceIdentifier instance_id, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<SecretSeedSkeleton>(instance_id, mode) {}
  /// @brief SecretSeedSkeleton Destructor.

  /// @uptrace{SWS_CM_00152, 4ff7c3aec9fce6d3819bb320c152ce9c410cbe74}
  SecretSeedSkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<SecretSeedSkeleton>(std::move(instanceSpec), mode) {}

  /// @uptrace{SWS_CM_00153, 791854b84a101bd8d4a5e0e90bb3fb34c1fafd6f}
  SecretSeedSkeleton(ara::com::InstanceIdentifierContainer instanceIDs, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<SecretSeedSkeleton>(std::move(instanceIDs), mode) {}

  /// @brief Skeleton shall be move constructable.
  explicit SecretSeedSkeleton(SecretSeedSkeleton&&) = default;

  /// @brief Skeleton shall be move assignable.
  SecretSeedSkeleton& operator=(SecretSeedSkeleton&&) = default;

  /// @brief Skeleton shall not be copy constructable.
  explicit SecretSeedSkeleton(const SecretSeedSkeleton&) = delete;

  /// @brief Virtual function.
virtual ~SecretSeedSkeleton() noexcept override;

  /// @brief Skeleton shall not be copy assignable.
  SecretSeedSkeleton& operator=(const SecretSeedSkeleton&) = delete;

  /// @brief Definition for OfferService.
  void OfferService();
  using ara::crypto::ipccom::cryp::cryobj::secretseed::SecretSeed::CloneOutput;
  /// @brief Definition for Clone.
  virtual ara::core::Future<CloneOutput>Clone(const CryptoReadOnlyMemRegion& xorDelta)=0 ;
  using ara::crypto::ipccom::cryp::cryobj::secretseed::SecretSeed::GetAllowedUsageOutput;
  /// @brief Definition for GetAllowedUsage.
  virtual ara::core::Future<GetAllowedUsageOutput>GetAllowedUsage()=0 ;
  using ara::crypto::ipccom::cryp::cryobj::secretseed::SecretSeed::GetCryptoPrimitiveIdOutput;
  /// @brief Definition for GetCryptoPrimitiveId.
  virtual ara::core::Future<GetCryptoPrimitiveIdOutput>GetCryptoPrimitiveId()=0 ;
  using ara::crypto::ipccom::cryp::cryobj::secretseed::SecretSeed::GetObjectIdOutput;
  /// @brief Definition for GetObjectId.
  virtual ara::core::Future<GetObjectIdOutput>GetObjectId()=0 ;
  using ara::crypto::ipccom::cryp::cryobj::secretseed::SecretSeed::GetPayloadSizeOutput;
  /// @brief Definition for GetPayloadSize.
  virtual ara::core::Future<GetPayloadSizeOutput>GetPayloadSize()=0 ;
  using ara::crypto::ipccom::cryp::cryobj::secretseed::SecretSeed::HasDependenceOutput;
  /// @brief Definition for HasDependence.
  virtual ara::core::Future<HasDependenceOutput>HasDependence()=0 ;
  using ara::crypto::ipccom::cryp::cryobj::secretseed::SecretSeed::IsExportableOutput;
  /// @brief Definition for IsExportable.
  virtual ara::core::Future<IsExportableOutput>IsExportable()=0 ;
  using ara::crypto::ipccom::cryp::cryobj::secretseed::SecretSeed::IsSessionOutput;
  /// @brief Definition for IsSession.
  virtual ara::core::Future<IsSessionOutput>IsSession()=0 ;
  /// @brief Definition for Jump.
  virtual ara::core::Future<void> Jump(const Int64& Steps) = 0;
  /// @brief Definition for JumpFrom.
  virtual ara::core::Future<void> JumpFrom(const CryptoServiceInstanceId& SecretSeedInstanceId,const Int64& steps) = 0;
  /// @brief Definition for Next.
  virtual ara::core::Future<void> Next() = 0;
  /// @brief Definition for Save.
  virtual ara::core::Future<void> Save(const CryptoServiceInstanceId& IOInterfaceInstanceId) = 0;
  /// @brief Definition for XorEqualReadOnlyMemRegion.
  virtual ara::core::Future<void> XorEqualReadOnlyMemRegion(const CryptoReadOnlyMemRegion& source) = 0;
  /// @brief Definition for XorEqualSecretSeed.
  virtual ara::core::Future<void> XorEqualSecretSeed(const CryptoServiceInstanceId& seedInstanceId) = 0;
};

} // namespace skeleton
} // namespace secretseed
} // namespace cryobj
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYOBJ_SECRETSEED_SECRETSEED_SKELETON_H_

