// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : signatureservice_skeleton.h
//
// Purpose     : Implementation of file signatureservice_skeleton.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-03-08T09:56:00+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYSERVICE_SIGNATURESERVICE_SIGNATURESERVICE_SKELETON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYSERVICE_SIGNATURESERVICE_SIGNATURESERVICE_SKELETON_H_

#include <ara/com/internal/skeleton/ara_skeleton_base.h>
#include <ara/com/illegal_state_exception.h>
#include "ara/crypto/ipccom/cryp/cryservice/signatureservice/signatureservice_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace cryservice
{
namespace signatureservice
{
namespace skeleton
{



/// @brief Class for SignatureServiceSkeleton.
class SignatureServiceSkeleton : public ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService, public ara::com::internal::skeleton::TypedServiceImplBase<SignatureServiceSkeleton> {
 public:
  /// @uptrace{SWS_CM_00130}
  SignatureServiceSkeleton(ara::com::InstanceIdentifier instance_id, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<SignatureServiceSkeleton>(instance_id, mode) {}
  /// @brief SignatureServiceSkeleton Destructor.

  /// @uptrace{SWS_CM_00152, 4ff7c3aec9fce6d3819bb320c152ce9c410cbe74}
  SignatureServiceSkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<SignatureServiceSkeleton>(std::move(instanceSpec), mode) {}

  /// @uptrace{SWS_CM_00153, 791854b84a101bd8d4a5e0e90bb3fb34c1fafd6f}
  SignatureServiceSkeleton(ara::com::InstanceIdentifierContainer instanceIDs, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<SignatureServiceSkeleton>(std::move(instanceIDs), mode) {}

  /// @brief Skeleton shall be move constructable.
  explicit SignatureServiceSkeleton(SignatureServiceSkeleton&&) = default;

  /// @brief Skeleton shall be move assignable.
  SignatureServiceSkeleton& operator=(SignatureServiceSkeleton&&) = default;

  /// @brief Skeleton shall not be copy constructable.
  explicit SignatureServiceSkeleton(const SignatureServiceSkeleton&) = delete;

  /// @brief Virtual function.
virtual ~SignatureServiceSkeleton() noexcept override;

  /// @brief Skeleton shall not be copy assignable.
  SignatureServiceSkeleton& operator=(const SignatureServiceSkeleton&) = delete;

  /// @brief Definition for OfferService.
  void OfferService();
  using ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::GetActualKeyBitLengthOutput;
  /// @brief Definition for GetActualKeyBitLength.
  virtual ara::core::Future<GetActualKeyBitLengthOutput>GetActualKeyBitLength()=0 ;
  using ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::GetActualKeyCOUIDOutput;
  /// @brief Definition for GetActualKeyCOUID.
  virtual ara::core::Future<GetActualKeyCOUIDOutput>GetActualKeyCOUID()=0 ;
  using ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::GetAllowedUsageOutput;
  /// @brief Definition for GetAllowedUsage.
  virtual ara::core::Future<GetAllowedUsageOutput>GetAllowedUsage()=0 ;
  using ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::GetMaxKeyBitLengthOutput;
  /// @brief Definition for GetMaxKeyBitLength.
  virtual ara::core::Future<GetMaxKeyBitLengthOutput>GetMaxKeyBitLength()=0 ;
  using ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::GetMinKeyBitLengthOutput;
  /// @brief Definition for GetMinKeyBitLength.
  virtual ara::core::Future<GetMinKeyBitLengthOutput>GetMinKeyBitLength()=0 ;
  using ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::GetRequiredHashAlgIdOutput;
  /// @brief Definition for GetRequiredHashAlgId.
  virtual ara::core::Future<GetRequiredHashAlgIdOutput>GetRequiredHashAlgId()=0 ;
  using ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::GetRequiredHashSizeOutput;
  /// @brief Definition for GetRequiredHashSize.
  virtual ara::core::Future<GetRequiredHashSizeOutput>GetRequiredHashSize()=0 ;
  using ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::GetSignatureSizeOutput;
  /// @brief Definition for GetSignatureSize.
  virtual ara::core::Future<GetSignatureSizeOutput>GetSignatureSize()=0 ;
  using ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::IsKeyAvailableOutput;
  /// @brief Definition for IsKeyAvailable.
  virtual ara::core::Future<IsKeyAvailableOutput>IsKeyAvailable()=0 ;
  using ara::crypto::ipccom::cryp::cryservice::signatureservice::SignatureService::IsKeyBitLengthSupportedOutput;
  /// @brief Definition for IsKeyBitLengthSupported.
  virtual ara::core::Future<IsKeyBitLengthSupportedOutput>IsKeyBitLengthSupported(const uint64& keyBitLength)=0 ;
};

} // namespace skeleton
} // namespace signatureservice
} // namespace cryservice
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYSERVICE_SIGNATURESERVICE_SIGNATURESERVICE_SKELETON_H_

