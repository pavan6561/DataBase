// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : iointerface_skeleton.h
//
// Purpose     : Implementation of file iointerface_skeleton.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_COMMON_IOINTERFACE_IOINTERFACE_SKELETON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_COMMON_IOINTERFACE_IOINTERFACE_SKELETON_H_

#include <ara/com/internal/skeleton/ara_skeleton_base.h>
#include <ara/com/illegal_state_exception.h>
#include "ara/crypto/ipccom/common/iointerface/iointerface_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace common
{
namespace iointerface
{
namespace skeleton
{



/// @brief Class for IOInterfaceSkeleton.
class IOInterfaceSkeleton : public ara::crypto::ipccom::common::iointerface::IOInterface, public ara::com::internal::skeleton::TypedServiceImplBase<IOInterfaceSkeleton> {
 public:
  /// @uptrace{SWS_CM_00130}
  IOInterfaceSkeleton(ara::com::InstanceIdentifier instance_id, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<IOInterfaceSkeleton>(instance_id, mode) {}
  /// @brief IOInterfaceSkeleton Destructor.

  /// @uptrace{SWS_CM_00152, 4ff7c3aec9fce6d3819bb320c152ce9c410cbe74}
  IOInterfaceSkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<IOInterfaceSkeleton>(std::move(instanceSpec), mode) {}

  /// @uptrace{SWS_CM_00153, 791854b84a101bd8d4a5e0e90bb3fb34c1fafd6f}
  IOInterfaceSkeleton(ara::com::InstanceIdentifierContainer instanceIDs, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<IOInterfaceSkeleton>(std::move(instanceIDs), mode) {}

  /// @brief Skeleton shall be move constructable.
  explicit IOInterfaceSkeleton(IOInterfaceSkeleton&&) = default;

  /// @brief Skeleton shall be move assignable.
  IOInterfaceSkeleton& operator=(IOInterfaceSkeleton&&) = default;

  /// @brief Skeleton shall not be copy constructable.
  explicit IOInterfaceSkeleton(const IOInterfaceSkeleton&) = delete;

  /// @brief Virtual function.
virtual ~IOInterfaceSkeleton() noexcept override;

  /// @brief Skeleton shall not be copy assignable.
  IOInterfaceSkeleton& operator=(const IOInterfaceSkeleton&) = delete;

  /// @brief Definition for OfferService.
  void OfferService();
  using ara::crypto::ipccom::common::iointerface::IOInterface::GetAllowedUsageOutput;
  /// @brief Definition for GetAllowedUsage.
  virtual ara::core::Future<GetAllowedUsageOutput>GetAllowedUsage()=0 ;
  using ara::crypto::ipccom::common::iointerface::IOInterface::GetCapacityOutput;
  /// @brief Definition for GetCapacity.
  virtual ara::core::Future<GetCapacityOutput>GetCapacity()=0 ;
  using ara::crypto::ipccom::common::iointerface::IOInterface::GetCryptoObjectTypeOutput;
  /// @brief Definition for GetCryptoObjectType.
  virtual ara::core::Future<GetCryptoObjectTypeOutput>GetCryptoObjectType()=0 ;
  using ara::crypto::ipccom::common::iointerface::IOInterface::GetObjectIdOutput;
  /// @brief Definition for GetObjectId.
  virtual ara::core::Future<GetObjectIdOutput>GetObjectId()=0 ;
  using ara::crypto::ipccom::common::iointerface::IOInterface::GetPayloadSizeOutput;
  /// @brief Definition for GetPayloadSize.
  virtual ara::core::Future<GetPayloadSizeOutput>GetPayloadSize()=0 ;
  using ara::crypto::ipccom::common::iointerface::IOInterface::GetPrimitiveIdOutput;
  /// @brief Definition for GetPrimitiveId.
  virtual ara::core::Future<GetPrimitiveIdOutput>GetPrimitiveId()=0 ;
  using ara::crypto::ipccom::common::iointerface::IOInterface::GetTypeRestrictionOutput;
  /// @brief Definition for GetTypeRestriction.
  virtual ara::core::Future<GetTypeRestrictionOutput>GetTypeRestriction()=0 ;
  using ara::crypto::ipccom::common::iointerface::IOInterface::IsObjectExportableOutput;
  /// @brief Definition for IsObjectExportable.
  virtual ara::core::Future<IsObjectExportableOutput>IsObjectExportable()=0 ;
  using ara::crypto::ipccom::common::iointerface::IOInterface::IsObjectSessionOutput;
  /// @brief Definition for IsObjectSession.
  virtual ara::core::Future<IsObjectSessionOutput>IsObjectSession()=0 ;
  using ara::crypto::ipccom::common::iointerface::IOInterface::IsValidOutput;
  /// @brief Definition for IsValid.
  virtual ara::core::Future<IsValidOutput>IsValid()=0 ;
  using ara::crypto::ipccom::common::iointerface::IOInterface::IsVolatileOutput;
  /// @brief Definition for IsVolatile.
  virtual ara::core::Future<IsVolatileOutput>IsVolatile()=0 ;
  using ara::crypto::ipccom::common::iointerface::IOInterface::IsWritableOutput;
  /// @brief Definition for IsWritable.
  virtual ara::core::Future<IsWritableOutput>IsWritable()=0 ;
};

} // namespace skeleton
} // namespace iointerface
} // namespace common
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_COMMON_IOINTERFACE_IOINTERFACE_SKELETON_H_

