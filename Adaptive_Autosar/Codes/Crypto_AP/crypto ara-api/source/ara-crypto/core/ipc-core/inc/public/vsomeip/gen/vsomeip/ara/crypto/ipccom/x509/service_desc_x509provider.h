// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : service_desc_x509provider.h
//
// Purpose     : Implementation of file service_desc_x509provider.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_VSOMEIP_ARA_CRYPTO_IPCCOM_X509_SERVICE_DESC_X509PROVIDER_H_
#define CRYPTOSERVEREXE_VSOMEIP_ARA_CRYPTO_IPCCOM_X509_SERVICE_DESC_X509PROVIDER_H_

#include "ara/crypto/ipccom/x509/x509provider_common.h"


#include <ara/com/internal/vsomeip/vsomeip_types.h>


namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace x509
{

namespace x509provider_binding
{
namespace vsomeip
{
namespace descriptors
{

namespace internal
{

/// @brief class for Service.
class Service {
 public:
  /// @brief Service Destructor.
  virtual ~Service() noexcept {};
  static constexpr ara::com::internal::vsomeip::types::ServiceId service_id{0x26B1};
  static constexpr ara::com::internal::vsomeip::types::ServiceVersionMajor service_version_major{0x1};
  static constexpr ara::com::internal::vsomeip::types::ServiceVersionMinor service_version_minor{0x0};
  static constexpr ara::com::internal::vsomeip::types::ServiceVersionMinor required_minimum_minor_version{0xFFFFFFFFU};
  
  static constexpr bool is_minimum_minor_policy_enabled{false};
  static constexpr uint32_t blacklisted_versions_length{0};
  static constexpr ara::com::internal::vsomeip::types::BlacklistedVersion blacklisted_versions[1] {
            // If blacklistedVersions are absence then just a placeholder  { 0x0, 0x0 } is added. Value will never be used but required for compilation.
            { 0x0, 0x0 }
      };
    };
}
/// @brief class for BuildDn.
class BuildDn : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x2};
  static constexpr bool is_reliable{false};
};
/// @brief class for CheckCertStatus.
class CheckCertStatus : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x11};
  static constexpr bool is_reliable{false};
};
/// @brief class for CheckCertStatusWithCertList.
class CheckCertStatusWithCertList : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x12};
  static constexpr bool is_reliable{false};
};
/// @brief class for CleanupVolatileStorage.
class CleanupVolatileStorage : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x16};
  static constexpr bool is_reliable{false};
};
/// @brief class for CountCertsInChain.
class CountCertsInChain : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x1B};
  static constexpr bool is_reliable{false};
};
/// @brief class for CreateCertSignRequest.
class CreateCertSignRequest : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x18};
  static constexpr bool is_reliable{false};
};
/// @brief class for CreateEmptyDn.
class CreateEmptyDn : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x1};
  static constexpr bool is_reliable{false};
};
/// @brief class for CreateEmptyExtensions.
class CreateEmptyExtensions : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x17};
  static constexpr bool is_reliable{false};
};
/// @brief class for CreateOcspRequest.
class CreateOcspRequest : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0xE};
  static constexpr bool is_reliable{false};
};
/// @brief class for CreateOcspRequestWithCertList.
class CreateOcspRequestWithCertList : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0xF};
  static constexpr bool is_reliable{false};
};
/// @brief class for DecodeDn.
class DecodeDn : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x3};
  static constexpr bool is_reliable{false};
};
/// @brief class for FindCertByDn.
class FindCertByDn : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x13};
  static constexpr bool is_reliable{false};
};
/// @brief class for FindCertByKeyIds.
class FindCertByKeyIds : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x14};
  static constexpr bool is_reliable{false};
};
/// @brief class for FindCertBySn.
class FindCertBySn : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x15};
  static constexpr bool is_reliable{false};
};
/// @brief class for Import.
class Import : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0xA};
  static constexpr bool is_reliable{false};
};
/// @brief class for ImportCrl.
class ImportCrl : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0xB};
  static constexpr bool is_reliable{false};
};
/// @brief class for LoadCertificate.
class LoadCertificate : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x19};
  static constexpr bool is_reliable{false};
};
/// @brief class for ParseCert.
class ParseCert : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x4};
  static constexpr bool is_reliable{false};
};
/// @brief class for ParseCertChain.
class ParseCertChain : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x6};
  static constexpr bool is_reliable{false};
};
/// @brief class for ParseCertChainVectorReadOnlyMemRegion.
class ParseCertChainVectorReadOnlyMemRegion : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x7};
  static constexpr bool is_reliable{false};
};
/// @brief class for ParseCertSignRequest.
class ParseCertSignRequest : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x5};
  static constexpr bool is_reliable{false};
};
/// @brief class for ParseOcspResponse.
class ParseOcspResponse : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x10};
  static constexpr bool is_reliable{false};
};
/// @brief class for Remove.
class Remove : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0xC};
  static constexpr bool is_reliable{false};
};
/// @brief class for SetAsRootOfTrust.
class SetAsRootOfTrust : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x1A};
  static constexpr bool is_reliable{false};
};
/// @brief class for SetPendingStatus.
class SetPendingStatus : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0xD};
  static constexpr bool is_reliable{false};
};
/// @brief class for VerifyCert.
class VerifyCert : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x8};
  static constexpr bool is_reliable{false};
};
/// @brief class for VerifyCertChain.
class VerifyCertChain : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x9};
  static constexpr bool is_reliable{false};
};



} // namespace descriptors
} // namespace vsomeip
} // namespace x509provider_binding
} // namespace x509
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_VSOMEIP_ARA_CRYPTO_IPCCOM_X509_SERVICE_DESC_X509PROVIDER_H_


