// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : certificate_common.h
//
// Purpose     : Implementation of file certificate_common.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_CERTIFICATE_CERTIFICATE_COMMON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_CERTIFICATE_CERTIFICATE_COMMON_H_

#include <cstring>
#include <ara/core/array.h>

#include <ara/com/types.h>

#include <ara/com/exception.h>
#include <ara/core/error_code.h>

#include "ara/crypto/ipccom/common/error/error_domain_cryptoerrordomain.h"
#include "impl_type_boolean.h"
#include "impl_type_bytevectortype.h"
#include "impl_type_cryptoreadonlymemregion.h"
#include "impl_type_cryptoserviceinstanceid.h"
#include "impl_type_int64.h"
#include "impl_type_uint32.h"
#include "impl_type_uint64.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace x509
{
namespace certificate
{

/// @brief Class for Certificate.
class  Certificate {
 public:
  /// @brief Definition for Certificate.
  virtual ~Certificate() noexcept
  {}
  static constexpr ara::com::internal::ServiceId service_id{0xAF67};
  static constexpr ara::com::internal::ServiceVersion service_version_major{0x1};
  static constexpr ara::com::internal::ServiceVersion service_version_minor{0x0};
  static constexpr ara::core::Array<ara::core::ErrorCode, 1>AuthorityKeyId_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInsufficientCapacity, 0),
    }
  };
  /// @brief class for AuthorityKeyIdOutput.
  class AuthorityKeyIdOutput
  {
    public:
    /// @brief Argument for result.
    ByteVectorType result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  /// @brief class for EndTimeOutput.
  class EndTimeOutput
  {
    public:
    /// @brief Argument for time_t.
    Int64 time_t;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(time_t);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 3>ExportPublicly_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnknownIdentifier, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInsufficientCapacity, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnsupportedFormat, 0),
    }
  };
  /// @brief class for ExportPubliclyOutput.
  class ExportPubliclyOutput
  {
    public:
    /// @brief Argument for resultByteVector.
    ByteVectorType resultByteVector;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(resultByteVector);
    }
  };
  /// @brief class for GetConstraintsOutput.
  class GetConstraintsOutput
  {
    public:
    /// @brief Argument for keyConstraints.
    uint32 keyConstraints;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(keyConstraints);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 1>GetFingerprint_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kIncompleteArgState, 0),
    }
  };
  /// @brief class for GetFingerprintOutput.
  class GetFingerprintOutput
  {
    public:
    /// @brief Argument for fingerprint.
    CryptoReadOnlyMemRegion fingerprint;    
    /// @brief Argument for size_t.
    uint64 size_t;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(fingerprint);
      fun(size_t);
    }
  };
  /// @brief class for GetPathLimitOutput.
  class GetPathLimitOutput
  {
    public:
    /// @brief Argument for pathLimit.
    uint32 pathLimit;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(pathLimit);
    }
  };
  /// @brief class for GetStatusOutput.
  class GetStatusOutput
  {
    public:
    /// @brief Argument for status.
    uint32 status;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(status);
    }
  };
  /// @brief class for IsCaOutput.
  class IsCaOutput
  {
    public:
    /// @brief Argument for result.
    Boolean result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  /// @brief class for IsRootOutput.
  class IsRootOutput
  {
    public:
    /// @brief Argument for response.
    Boolean response;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(response);
    }
  };
  /// @brief class for IssuerDnOutput.
  class IssuerDnOutput
  {
    public:
    /// @brief Argument for response.
    CryptoServiceInstanceId response;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(response);
    }
  };
  /// @brief class for MyProviderOutput.
  class MyProviderOutput
  {
    public:
    /// @brief Argument for myProviderInstanceId.
    CryptoServiceInstanceId myProviderInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(myProviderInstanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 1>SerialNumber_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInsufficientCapacity, 0),
    }
  };
  /// @brief class for SerialNumberOutput.
  class SerialNumberOutput
  {
    public:
    /// @brief Argument for result.
    ByteVectorType result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  /// @brief class for StartTimeOutput.
  class StartTimeOutput
  {
    public:
    /// @brief Argument for time_t.
    Int64 time_t;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(time_t);
    }
  };
  /// @brief class for SubjectDnOutput.
  class SubjectDnOutput
  {
    public:
    /// @brief Argument for x509DnInstanceId.
    CryptoServiceInstanceId x509DnInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(x509DnInstanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 1>SubjectKeyId_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInsufficientCapacity, 0),
    }
  };
  /// @brief class for SubjectKeyIdOutput.
  class SubjectKeyIdOutput
  {
    public:
    /// @brief Argument for result.
    ByteVectorType result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  /// @brief class for SubjectPubKeyOutput.
  class SubjectPubKeyOutput
  {
    public:
    /// @brief Argument for x509PublicKeyInfoInstanceId.
    CryptoServiceInstanceId x509PublicKeyInfoInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(x509PublicKeyInfoInstanceId);
    }
  };
  /// @brief class for VerifyMeOutput.
  class VerifyMeOutput
  {
    public:
    /// @brief Argument for result.
    Boolean result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  /// @brief class for X509VersionOutput.
  class X509VersionOutput
  {
    public:
    /// @brief Argument for response.
    uint32 response;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(response);
    }
  };
};

} // namespace certificate
} // namespace x509
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_CERTIFICATE_CERTIFICATE_COMMON_H_

