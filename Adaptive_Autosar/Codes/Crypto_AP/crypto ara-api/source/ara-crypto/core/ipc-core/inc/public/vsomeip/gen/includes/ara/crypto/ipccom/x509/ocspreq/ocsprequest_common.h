// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : ocsprequest_common.h
//
// Purpose     : Implementation of file ocsprequest_common.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_OCSPREQ_OCSPREQUEST_COMMON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_OCSPREQ_OCSPREQUEST_COMMON_H_

#include <cstring>
#include <ara/core/array.h>

#include <ara/com/types.h>

#include <ara/com/exception.h>
#include <ara/core/error_code.h>

#include "ara/crypto/ipccom/common/error/error_domain_cryptoerrordomain.h"
#include "impl_type_bytevectortype.h"
#include "impl_type_cryptoserviceinstanceid.h"
#include "impl_type_uint32.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace x509
{
namespace ocspreq
{

/// @brief Class for OcspRequest.
class  OcspRequest {
 public:
  /// @brief Definition for OcspRequest.
  virtual ~OcspRequest() noexcept
  {}
  static constexpr ara::com::internal::ServiceId service_id{0xDCC9};
  static constexpr ara::com::internal::ServiceVersion service_version_major{0x1};
  static constexpr ara::com::internal::ServiceVersion service_version_minor{0x0};
  static constexpr ara::core::Array<ara::core::ErrorCode, 3>ExportPublicly_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnknownIdentifier, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInsufficientCapacity, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnsupportedFormat, 0),
    }
  };
  /// @brief class for ExportPubliclyOutput.
  class ExportPubliclyOutput
  {
    public:
    /// @brief Argument for result.
    ByteVectorType result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  /// @brief class for MyProviderOutput.
  class MyProviderOutput
  {
    public:
    /// @brief Argument for resultInstanceId.
    CryptoServiceInstanceId resultInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(resultInstanceId);
    }
  };
  /// @brief class for VersionOutput.
  class VersionOutput
  {
    public:
    /// @brief Argument for response.
    uint32 response;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(response);
    }
  };
};

} // namespace ocspreq
} // namespace x509
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_OCSPREQ_OCSPREQUEST_COMMON_H_

