// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : keyslotinterface_common.h
//
// Purpose     : Implementation of file keyslotinterface_common.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_KEYS_KEYSLOT_KEYSLOTINTERFACE_COMMON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_KEYS_KEYSLOT_KEYSLOTINTERFACE_COMMON_H_

#include <cstring>
#include <ara/core/array.h>

#include <ara/com/types.h>

#include <ara/com/exception.h>
#include <ara/core/error_code.h>

#include "ara/crypto/ipccom/common/error/error_domain_cryptoerrordomain.h"
#include "impl_type_boolean.h"
#include "impl_type_cryptokeyslotcontentprops.h"
#include "impl_type_cryptokeyslotprototypeprops.h"
#include "impl_type_cryptoserviceinstanceid.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace keys
{
namespace keyslot
{

/// @brief Class for KeySlotInterface.
class  KeySlotInterface {
 public:
  /// @brief Definition for KeySlotInterface.
  virtual ~KeySlotInterface() noexcept
  {}
  static constexpr ara::com::internal::ServiceId service_id{0x1AE8};
  static constexpr ara::com::internal::ServiceVersion service_version_major{0x1};
  static constexpr ara::com::internal::ServiceVersion service_version_minor{0x0};
  static constexpr ara::core::Array<ara::core::ErrorCode, 1>Clear_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnreservedResource, 0),
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>GetContentProps_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kEmptyContainer, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kAccessViolation, 0),
    }
  };
  /// @brief class for GetContentPropsOutput.
  class GetContentPropsOutput
  {
    public:
    /// @brief Argument for KeySlotContentProps.
    CryptoKeySlotContentProps KeySlotContentProps;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(KeySlotContentProps);
    }
  };
  /// @brief class for GetPrototypedPropsOutput.
  class GetPrototypedPropsOutput
  {
    public:
    /// @brief Argument for KeySlotPrototypeProps.
    CryptoKeySlotPrototypeProps KeySlotPrototypeProps;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(KeySlotPrototypeProps);
    }
  };
  /// @brief class for IsEmptyOutput.
  class IsEmptyOutput
  {
    public:
    /// @brief Argument for isTrue.
    Boolean isTrue;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(isTrue);
    }
  };
  /// @brief class for MyProviderOutput.
  class MyProviderOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  /// @brief class for OpenOutput.
  class OpenOutput
  {
    public:
    /// @brief Argument for IoInterfaceInstanceId.
    CryptoServiceInstanceId IoInterfaceInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(IoInterfaceInstanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 4>SaveCopy_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnreservedResource, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kContentRestrictions, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kIncompatibleObject, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kEmptyContainer, 0),
    }
  };
};

} // namespace keyslot
} // namespace keys
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_KEYS_KEYSLOT_KEYSLOTINTERFACE_COMMON_H_

