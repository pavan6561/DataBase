// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : keyslotinterface_skeleton.h
//
// Purpose     : Implementation of file keyslotinterface_skeleton.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_KEYS_KEYSLOT_KEYSLOTINTERFACE_SKELETON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_KEYS_KEYSLOT_KEYSLOTINTERFACE_SKELETON_H_

#include <ara/com/internal/skeleton/ara_skeleton_base.h>
#include <ara/com/illegal_state_exception.h>
#include "ara/crypto/ipccom/keys/keyslot/keyslotinterface_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace keys
{
namespace keyslot
{
namespace skeleton
{



/// @brief Class for KeySlotInterfaceSkeleton.
class KeySlotInterfaceSkeleton : public ara::crypto::ipccom::keys::keyslot::KeySlotInterface, public ara::com::internal::skeleton::TypedServiceImplBase<KeySlotInterfaceSkeleton> {
 public:
  /// @uptrace{SWS_CM_00130}
  KeySlotInterfaceSkeleton(ara::com::InstanceIdentifier instance_id, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<KeySlotInterfaceSkeleton>(instance_id, mode) {}
  /// @brief KeySlotInterfaceSkeleton Destructor.

  /// @uptrace{SWS_CM_00152, 4ff7c3aec9fce6d3819bb320c152ce9c410cbe74}
  KeySlotInterfaceSkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<KeySlotInterfaceSkeleton>(std::move(instanceSpec), mode) {}

  /// @uptrace{SWS_CM_00153, 791854b84a101bd8d4a5e0e90bb3fb34c1fafd6f}
  KeySlotInterfaceSkeleton(ara::com::InstanceIdentifierContainer instanceIDs, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<KeySlotInterfaceSkeleton>(std::move(instanceIDs), mode) {}

  /// @brief Skeleton shall be move constructable.
  explicit KeySlotInterfaceSkeleton(KeySlotInterfaceSkeleton&&) = default;

  /// @brief Skeleton shall be move assignable.
  KeySlotInterfaceSkeleton& operator=(KeySlotInterfaceSkeleton&&) = default;

  /// @brief Skeleton shall not be copy constructable.
  explicit KeySlotInterfaceSkeleton(const KeySlotInterfaceSkeleton&) = delete;

  /// @brief Virtual function.
virtual ~KeySlotInterfaceSkeleton() noexcept override;

  /// @brief Skeleton shall not be copy assignable.
  KeySlotInterfaceSkeleton& operator=(const KeySlotInterfaceSkeleton&) = delete;

  /// @brief Definition for OfferService.
  void OfferService();
  /// @brief Definition for Clear.
  virtual ara::core::Future<void> Clear() = 0;
  using ara::crypto::ipccom::keys::keyslot::KeySlotInterface::GetContentPropsOutput;
  /// @brief Definition for GetContentProps.
  virtual ara::core::Future<GetContentPropsOutput>GetContentProps()=0 ;
  using ara::crypto::ipccom::keys::keyslot::KeySlotInterface::GetPrototypedPropsOutput;
  /// @brief Definition for GetPrototypedProps.
  virtual ara::core::Future<GetPrototypedPropsOutput>GetPrototypedProps()=0 ;
  using ara::crypto::ipccom::keys::keyslot::KeySlotInterface::IsEmptyOutput;
  /// @brief Definition for IsEmpty.
  virtual ara::core::Future<IsEmptyOutput>IsEmpty()=0 ;
  using ara::crypto::ipccom::keys::keyslot::KeySlotInterface::MyProviderOutput;
  /// @brief Definition for MyProvider.
  virtual ara::core::Future<MyProviderOutput>MyProvider()=0 ;
  using ara::crypto::ipccom::keys::keyslot::KeySlotInterface::OpenOutput;
  /// @brief Definition for Open.
  virtual ara::core::Future<OpenOutput>Open(const boolean& subscribeForUpdates,const boolean& writeable)=0 ;
  /// @brief Definition for SaveCopy.
  virtual ara::core::Future<void> SaveCopy(const CryptoServiceInstanceId& instanceId) = 0;
};

} // namespace skeleton
} // namespace keyslot
} // namespace keys
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_KEYS_KEYSLOT_KEYSLOTINTERFACE_SKELETON_H_

