// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : symmetrickeywrappercontext_skeleton.h
//
// Purpose     : Implementation of file symmetrickeywrappercontext_skeleton.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-03-14T12:58:58+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_SYMMETRICKEYWRAPPER_SYMMETRICKEYWRAPPERCONTEXT_SKELETON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_SYMMETRICKEYWRAPPER_SYMMETRICKEYWRAPPERCONTEXT_SKELETON_H_

#include <ara/com/internal/skeleton/ara_skeleton_base.h>
#include <ara/com/illegal_state_exception.h>
#include "ara/crypto/ipccom/cryp/symmetrickeywrapper/symmetrickeywrappercontext_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace symmetrickeywrapper
{
namespace skeleton
{



/// @brief Class for SymmetricKeyWrapperContextSkeleton.
class SymmetricKeyWrapperContextSkeleton : public ara::crypto::ipccom::cryp::symmetrickeywrapper::SymmetricKeyWrapperContext, public ara::com::internal::skeleton::TypedServiceImplBase<SymmetricKeyWrapperContextSkeleton> {
 public:
  /// @uptrace{SWS_CM_00130}
  SymmetricKeyWrapperContextSkeleton(ara::com::InstanceIdentifier instance_id, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<SymmetricKeyWrapperContextSkeleton>(instance_id, mode) {}
  /// @brief SymmetricKeyWrapperContextSkeleton Destructor.

  /// @uptrace{SWS_CM_00152, 4ff7c3aec9fce6d3819bb320c152ce9c410cbe74}
  SymmetricKeyWrapperContextSkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<SymmetricKeyWrapperContextSkeleton>(std::move(instanceSpec), mode) {}

  /// @uptrace{SWS_CM_00153, 791854b84a101bd8d4a5e0e90bb3fb34c1fafd6f}
  SymmetricKeyWrapperContextSkeleton(ara::com::InstanceIdentifierContainer instanceIDs, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<SymmetricKeyWrapperContextSkeleton>(std::move(instanceIDs), mode) {}

  /// @brief Skeleton shall be move constructable.
  explicit SymmetricKeyWrapperContextSkeleton(SymmetricKeyWrapperContextSkeleton&&) = default;

  /// @brief Skeleton shall be move assignable.
  SymmetricKeyWrapperContextSkeleton& operator=(SymmetricKeyWrapperContextSkeleton&&) = default;

  /// @brief Skeleton shall not be copy constructable.
  explicit SymmetricKeyWrapperContextSkeleton(const SymmetricKeyWrapperContextSkeleton&) = delete;

  /// @brief Virtual function.
virtual ~SymmetricKeyWrapperContextSkeleton() noexcept override;

  /// @brief Skeleton shall not be copy assignable.
  SymmetricKeyWrapperContextSkeleton& operator=(const SymmetricKeyWrapperContextSkeleton&) = delete;

  /// @brief Definition for OfferService.
  void OfferService();
  using ara::crypto::ipccom::cryp::symmetrickeywrapper::SymmetricKeyWrapperContext::CalculateWrappedKeySizeOutput;
  /// @brief Definition for CalculateWrappedKeySize.
  virtual ara::core::Future<CalculateWrappedKeySizeOutput>CalculateWrappedKeySize(const uint64& keyLength)=0 ;
  using ara::crypto::ipccom::cryp::symmetrickeywrapper::SymmetricKeyWrapperContext::GetCryptoPrimitiveIdOutput;
  /// @brief Definition for GetCryptoPrimitiveId.
  virtual ara::core::Future<GetCryptoPrimitiveIdOutput>GetCryptoPrimitiveId()=0 ;
  using ara::crypto::ipccom::cryp::symmetrickeywrapper::SymmetricKeyWrapperContext::GetExtensionServiceOutput;
  /// @brief Definition for GetExtensionService.
  virtual ara::core::Future<GetExtensionServiceOutput>GetExtensionService()=0 ;
  using ara::crypto::ipccom::cryp::symmetrickeywrapper::SymmetricKeyWrapperContext::GetMaxTargetKeyLengthOutput;
  /// @brief Definition for GetMaxTargetKeyLength.
  virtual ara::core::Future<GetMaxTargetKeyLengthOutput>GetMaxTargetKeyLength()=0 ;
  using ara::crypto::ipccom::cryp::symmetrickeywrapper::SymmetricKeyWrapperContext::GetTargetKeyGranularityOutput;
  /// @brief Definition for GetTargetKeyGranularity.
  virtual ara::core::Future<GetTargetKeyGranularityOutput>GetTargetKeyGranularity()=0 ;
  using ara::crypto::ipccom::cryp::symmetrickeywrapper::SymmetricKeyWrapperContext::IsInitializedOutput;
  /// @brief Definition for IsInitialized.
  virtual ara::core::Future<IsInitializedOutput>IsInitialized()=0 ;
  /// @brief Definition for Reset.
  virtual ara::core::Future<void> Reset() = 0;
  /// @brief Definition for SetKey.
  virtual ara::core::Future<void> SetKey(const CryptoServiceInstanceId& keyInstanceId,const CryptoTransformDataType& transform) = 0;
  using ara::crypto::ipccom::cryp::symmetrickeywrapper::SymmetricKeyWrapperContext::UnwrapKeyOutput;
  /// @brief Definition for UnwrapKey.
  virtual ara::core::Future<UnwrapKeyOutput>UnwrapKey(const CryptoReadOnlyMemRegion& wrappedKey,const CryptoAlgId& algId,const CryptoAllowedUsageFlags& allowedUsage)=0 ;
  using ara::crypto::ipccom::cryp::symmetrickeywrapper::SymmetricKeyWrapperContext::UnwrapSeedOutput;
  /// @brief Definition for UnwrapSeed.
  virtual ara::core::Future<UnwrapSeedOutput>UnwrapSeed(const CryptoReadOnlyMemRegion& wrappedSeed,const CryptoAlgId& targetAlgId,const CryptoAllowedUsageFlags& allowedUsage)=0 ;
  using ara::crypto::ipccom::cryp::symmetrickeywrapper::SymmetricKeyWrapperContext::WrapKeyMaterialOutput;
  /// @brief Definition for WrapKeyMaterial.
  virtual ara::core::Future<WrapKeyMaterialOutput>WrapKeyMaterial(const RestrictedUseObjectStructure& restrictedUseObjStruct)=0 ;
};

} // namespace skeleton
} // namespace symmetrickeywrapper
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_SYMMETRICKEYWRAPPER_SYMMETRICKEYWRAPPERCONTEXT_SKELETON_H_

