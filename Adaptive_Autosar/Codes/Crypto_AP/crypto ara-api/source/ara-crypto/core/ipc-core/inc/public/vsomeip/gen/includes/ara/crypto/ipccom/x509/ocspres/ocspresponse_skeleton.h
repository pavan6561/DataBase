// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : ocspresponse_skeleton.h
//
// Purpose     : Implementation of file ocspresponse_skeleton.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_OCSPRES_OCSPRESPONSE_SKELETON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_OCSPRES_OCSPRESPONSE_SKELETON_H_

#include <ara/com/internal/skeleton/ara_skeleton_base.h>
#include <ara/com/illegal_state_exception.h>
#include "ara/crypto/ipccom/x509/ocspres/ocspresponse_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace x509
{
namespace ocspres
{
namespace skeleton
{



/// @brief Class for OcspResponseSkeleton.
class OcspResponseSkeleton : public ara::crypto::ipccom::x509::ocspres::OcspResponse, public ara::com::internal::skeleton::TypedServiceImplBase<OcspResponseSkeleton> {
 public:
  /// @uptrace{SWS_CM_00130}
  OcspResponseSkeleton(ara::com::InstanceIdentifier instance_id, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<OcspResponseSkeleton>(instance_id, mode) {}
  /// @brief OcspResponseSkeleton Destructor.

  /// @uptrace{SWS_CM_00152, 4ff7c3aec9fce6d3819bb320c152ce9c410cbe74}
  OcspResponseSkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<OcspResponseSkeleton>(std::move(instanceSpec), mode) {}

  /// @uptrace{SWS_CM_00153, 791854b84a101bd8d4a5e0e90bb3fb34c1fafd6f}
  OcspResponseSkeleton(ara::com::InstanceIdentifierContainer instanceIDs, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<OcspResponseSkeleton>(std::move(instanceIDs), mode) {}

  /// @brief Skeleton shall be move constructable.
  explicit OcspResponseSkeleton(OcspResponseSkeleton&&) = default;

  /// @brief Skeleton shall be move assignable.
  OcspResponseSkeleton& operator=(OcspResponseSkeleton&&) = default;

  /// @brief Skeleton shall not be copy constructable.
  explicit OcspResponseSkeleton(const OcspResponseSkeleton&) = delete;

  /// @brief Virtual function.
virtual ~OcspResponseSkeleton() noexcept override;

  /// @brief Skeleton shall not be copy assignable.
  OcspResponseSkeleton& operator=(const OcspResponseSkeleton&) = delete;

  /// @brief Definition for OfferService.
  void OfferService();
  using ara::crypto::ipccom::x509::ocspres::OcspResponse::ExportPubliclyOutput;
  /// @brief Definition for ExportPublicly.
  virtual ara::core::Future<ExportPubliclyOutput>ExportPublicly(const uint32& formatId)=0 ;
  using ara::crypto::ipccom::x509::ocspres::OcspResponse::MyProviderOutput;
  /// @brief Definition for MyProvider.
  virtual ara::core::Future<MyProviderOutput>MyProvider()=0 ;
  using ara::crypto::ipccom::x509::ocspres::OcspResponse::VersionOutput;
  /// @brief Definition for Version.
  virtual ara::core::Future<VersionOutput>Version()=0 ;
};

} // namespace skeleton
} // namespace ocspres
} // namespace x509
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_OCSPRES_OCSPRESPONSE_SKELETON_H_

