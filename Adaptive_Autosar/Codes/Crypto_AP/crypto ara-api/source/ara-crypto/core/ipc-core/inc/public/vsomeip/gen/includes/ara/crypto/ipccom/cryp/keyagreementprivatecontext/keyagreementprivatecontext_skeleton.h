// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : keyagreementprivatecontext_skeleton.h
//
// Purpose     : Implementation of file keyagreementprivatecontext_skeleton.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-03-14T12:58:58+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_KEYAGREEMENTPRIVATECONTEXT_KEYAGREEMENTPRIVATECONTEXT_SKELETON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_KEYAGREEMENTPRIVATECONTEXT_KEYAGREEMENTPRIVATECONTEXT_SKELETON_H_

#include <ara/com/internal/skeleton/ara_skeleton_base.h>
#include <ara/com/illegal_state_exception.h>
#include "ara/crypto/ipccom/cryp/keyagreementprivatecontext/keyagreementprivatecontext_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace keyagreementprivatecontext
{
namespace skeleton
{



/// @brief Class for KeyAgreementPrivateContextSkeleton.
class KeyAgreementPrivateContextSkeleton : public ara::crypto::ipccom::cryp::keyagreementprivatecontext::KeyAgreementPrivateContext, public ara::com::internal::skeleton::TypedServiceImplBase<KeyAgreementPrivateContextSkeleton> {
 public:
  /// @uptrace{SWS_CM_00130}
  KeyAgreementPrivateContextSkeleton(ara::com::InstanceIdentifier instance_id, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<KeyAgreementPrivateContextSkeleton>(instance_id, mode) {}
  /// @brief KeyAgreementPrivateContextSkeleton Destructor.

  /// @uptrace{SWS_CM_00152, 4ff7c3aec9fce6d3819bb320c152ce9c410cbe74}
  KeyAgreementPrivateContextSkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<KeyAgreementPrivateContextSkeleton>(std::move(instanceSpec), mode) {}

  /// @uptrace{SWS_CM_00153, 791854b84a101bd8d4a5e0e90bb3fb34c1fafd6f}
  KeyAgreementPrivateContextSkeleton(ara::com::InstanceIdentifierContainer instanceIDs, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<KeyAgreementPrivateContextSkeleton>(std::move(instanceIDs), mode) {}

  /// @brief Skeleton shall be move constructable.
  explicit KeyAgreementPrivateContextSkeleton(KeyAgreementPrivateContextSkeleton&&) = default;

  /// @brief Skeleton shall be move assignable.
  KeyAgreementPrivateContextSkeleton& operator=(KeyAgreementPrivateContextSkeleton&&) = default;

  /// @brief Skeleton shall not be copy constructable.
  explicit KeyAgreementPrivateContextSkeleton(const KeyAgreementPrivateContextSkeleton&) = delete;

  /// @brief Virtual function.
virtual ~KeyAgreementPrivateContextSkeleton() noexcept override;

  /// @brief Skeleton shall not be copy assignable.
  KeyAgreementPrivateContextSkeleton& operator=(const KeyAgreementPrivateContextSkeleton&) = delete;

  /// @brief Definition for OfferService.
  void OfferService();
  using ara::crypto::ipccom::cryp::keyagreementprivatecontext::KeyAgreementPrivateContext::AgreeKeyOutput;
  /// @brief Definition for AgreeKey.
  virtual ara::core::Future<AgreeKeyOutput>AgreeKey(const CryptoServiceInstanceId& publicKeyInstanceId,const CryptoServiceInstanceId& kdfInstanceId,const CryptoAlgId& targetAlgId,const ContentAllowedUsage& allowedUsage,const CryptoReadOnlyMemRegion& saltReadOnly,const CryptoReadOnlyMemRegion& ctxLabelReadOnly)=0 ;
  using ara::crypto::ipccom::cryp::keyagreementprivatecontext::KeyAgreementPrivateContext::AgreeSeedOutput;
  /// @brief Definition for AgreeSeed.
  virtual ara::core::Future<AgreeSeedOutput>AgreeSeed(const CryptoServiceInstanceId& publicKeyInstanceId,const CryptoAllowedUsageFlags& allowedUsage)=0 ;
  using ara::crypto::ipccom::cryp::keyagreementprivatecontext::KeyAgreementPrivateContext::GetCryptoPrimitiveIdOutput;
  /// @brief Definition for GetCryptoPrimitiveId.
  virtual ara::core::Future<GetCryptoPrimitiveIdOutput>GetCryptoPrimitiveId()=0 ;
  using ara::crypto::ipccom::cryp::keyagreementprivatecontext::KeyAgreementPrivateContext::GetExtensionServiceOutput;
  /// @brief Definition for GetExtensionService.
  virtual ara::core::Future<GetExtensionServiceOutput>GetExtensionService()=0 ;
  using ara::crypto::ipccom::cryp::keyagreementprivatecontext::KeyAgreementPrivateContext::IsInitializedOutput;
  /// @brief Definition for IsInitialized.
  virtual ara::core::Future<IsInitializedOutput>IsInitialized()=0 ;
  /// @brief Definition for Reset.
  virtual ara::core::Future<void> Reset() = 0;
  /// @brief Definition for SetKey.
  virtual ara::core::Future<void> SetKey(const CryptoServiceInstanceId& privateKeyInstanceId) = 0;
};

} // namespace skeleton
} // namespace keyagreementprivatecontext
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_KEYAGREEMENTPRIVATECONTEXT_KEYAGREEMENTPRIVATECONTEXT_SKELETON_H_

