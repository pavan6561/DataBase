// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : streamciphercontext_skeleton.h
//
// Purpose     : Implementation of file streamciphercontext_skeleton.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-03-14T12:58:58+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_STREAMCIPHER_STREAMCIPHERCONTEXT_SKELETON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_STREAMCIPHER_STREAMCIPHERCONTEXT_SKELETON_H_

#include <ara/com/internal/skeleton/ara_skeleton_base.h>
#include <ara/com/illegal_state_exception.h>
#include "ara/crypto/ipccom/cryp/streamcipher/streamciphercontext_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace streamcipher
{
namespace skeleton
{



/// @brief Class for StreamCipherContextSkeleton.
class StreamCipherContextSkeleton : public ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext, public ara::com::internal::skeleton::TypedServiceImplBase<StreamCipherContextSkeleton> {
 public:
  /// @uptrace{SWS_CM_00130}
  StreamCipherContextSkeleton(ara::com::InstanceIdentifier instance_id, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<StreamCipherContextSkeleton>(instance_id, mode) {}
  /// @brief StreamCipherContextSkeleton Destructor.

  /// @uptrace{SWS_CM_00152, 4ff7c3aec9fce6d3819bb320c152ce9c410cbe74}
  StreamCipherContextSkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<StreamCipherContextSkeleton>(std::move(instanceSpec), mode) {}

  /// @uptrace{SWS_CM_00153, 791854b84a101bd8d4a5e0e90bb3fb34c1fafd6f}
  StreamCipherContextSkeleton(ara::com::InstanceIdentifierContainer instanceIDs, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<StreamCipherContextSkeleton>(std::move(instanceIDs), mode) {}

  /// @brief Skeleton shall be move constructable.
  explicit StreamCipherContextSkeleton(StreamCipherContextSkeleton&&) = default;

  /// @brief Skeleton shall be move assignable.
  StreamCipherContextSkeleton& operator=(StreamCipherContextSkeleton&&) = default;

  /// @brief Skeleton shall not be copy constructable.
  explicit StreamCipherContextSkeleton(const StreamCipherContextSkeleton&) = delete;

  /// @brief Virtual function.
virtual ~StreamCipherContextSkeleton() noexcept override;

  /// @brief Skeleton shall not be copy assignable.
  StreamCipherContextSkeleton& operator=(const StreamCipherContextSkeleton&) = delete;

  /// @brief Definition for OfferService.
  void OfferService();
  using ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::CountBytesInCacheOutput;
  /// @brief Definition for CountBytesInCache.
  virtual ara::core::Future<CountBytesInCacheOutput>CountBytesInCache()=0 ;
  using ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::FinishBytesOutput;
  /// @brief Definition for FinishBytes.
  virtual ara::core::Future<FinishBytesOutput>FinishBytes(const CryptoReadOnlyMemRegion& in)=0 ;
  using ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::GetBlockServiceOutput;
  /// @brief Definition for GetBlockService.
  virtual ara::core::Future<GetBlockServiceOutput>GetBlockService()=0 ;
  using ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::GetCryptoPrimitiveIdOutput;
  /// @brief Definition for GetCryptoPrimitiveId.
  virtual ara::core::Future<GetCryptoPrimitiveIdOutput>GetCryptoPrimitiveId()=0 ;
  using ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::GetTransformationOutput;
  /// @brief Definition for GetTransformation.
  virtual ara::core::Future<GetTransformationOutput>GetTransformation()=0 ;
  using ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::IsBytewiseModeOutput;
  /// @brief Definition for IsBytewiseMode.
  virtual ara::core::Future<IsBytewiseModeOutput>IsBytewiseMode()=0 ;
  using ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::IsInitializedOutput;
  /// @brief Definition for IsInitialized.
  virtual ara::core::Future<IsInitializedOutput>IsInitialized()=0 ;
  using ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::IsSeekableModeOutput;
  /// @brief Definition for IsSeekableMode.
  virtual ara::core::Future<IsSeekableModeOutput>IsSeekableMode()=0 ;
  using ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::ProcessBlocksOutput;
  /// @brief Definition for ProcessBlocks.
  virtual ara::core::Future<ProcessBlocksOutput>ProcessBlocks(const CryptoReadOnlyMemRegion& in)=0 ;
  using ara::crypto::ipccom::cryp::streamcipher::StreamCipherContext::ProcessByteOutput;
  /// @brief Definition for ProcessByte.
  virtual ara::core::Future<ProcessByteOutput>ProcessByte(const CryptoReadOnlyMemRegion& in)=0 ;
  /// @brief Definition for Reset.
  virtual ara::core::Future<void> Reset() = 0;
  /// @brief Definition for Seek.
  virtual ara::core::Future<void> Seek(const Int64& offset,const Boolean& fromBegin) = 0;
  /// @brief Definition for SetKey.
  virtual ara::core::Future<void> SetKey(const CryptoServiceInstanceId& instanceId,const CryptoTransformDataType& transform) = 0;
  /// @brief Definition for StartReadOnlyMem.
  virtual ara::core::Future<void> StartReadOnlyMem(const CryptoReadOnlyMemRegion& iv) = 0;
  /// @brief Definition for StartSecretSeed.
  virtual ara::core::Future<void> StartSecretSeed(const CryptoServiceInstanceId& iv) = 0;
};

} // namespace skeleton
} // namespace streamcipher
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_STREAMCIPHER_STREAMCIPHERCONTEXT_SKELETON_H_

