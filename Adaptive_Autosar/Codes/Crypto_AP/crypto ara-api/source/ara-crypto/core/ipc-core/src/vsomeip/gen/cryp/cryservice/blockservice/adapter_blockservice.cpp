// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : adapter_blockservice.cpp
//
// Purpose     : Implementation of file adapter_blockservice.cpp
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-03-08T13:50:38+05:30
// -----------------------------------------------------------------------------------------------------------

#include "adapter_blockservice.h"
namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace cryservice
{
namespace blockservice
{
namespace blockservice_binding
{
namespace vsomeip
{

BlockServiceServiceAdapter::~BlockServiceServiceAdapter() noexcept {
  StopOfferService(ServiceDescriptor::service_id, GetInstanceId());
  UnregisterMethodDispatcher(ServiceDescriptor::service_id);
  Disconnect(dynamic_cast<ServiceInterface&>(service_));
}

void BlockServiceServiceAdapter::DispatchMethodCall(const std::shared_ptr<::vsomeip::message>& msg)
{
  ServiceInterface& service{dynamic_cast<ServiceInterface&>(service_)};
  switch(msg->get_method()) {
    case descriptors::GetActualIvBitLength::method_id:
      HandleCall(service, &ServiceInterface::GetActualIvBitLength, msg);
    break;
    case descriptors::GetActualKeyBitLength::method_id:
      HandleCall(service, &ServiceInterface::GetActualKeyBitLength, msg);
    break;
    case descriptors::GetActualKeyCOUID::method_id:
      HandleCall(service, &ServiceInterface::GetActualKeyCOUID, msg);
    break;
    case descriptors::GetAllowedUsage::method_id:
      HandleCall(service, &ServiceInterface::GetAllowedUsage, msg);
    break;
    case descriptors::GetBlockSize::method_id:
      HandleCall(service, &ServiceInterface::GetBlockSize, msg);
    break;
    case descriptors::GetIvSize::method_id:
      HandleCall(service, &ServiceInterface::GetIvSize, msg);
    break;
    case descriptors::GetMaxKeyBitLength::method_id:
      HandleCall(service, &ServiceInterface::GetMaxKeyBitLength, msg);
    break;
    case descriptors::GetMinKeyBitLength::method_id:
      HandleCall(service, &ServiceInterface::GetMinKeyBitLength, msg);
    break;
    case descriptors::IsKeyAvailable::method_id:
      HandleCall(service, &ServiceInterface::IsKeyAvailable, msg);
    break;
    case descriptors::IsKeyBitLengthSupported::method_id:
      HandleCall(service, &ServiceInterface::IsKeyBitLengthSupported, msg);
    break;
    case descriptors::IsValidIvSize::method_id:
      HandleCall(service, &ServiceInterface::IsValidIvSize, msg);
    break;
    default:
    // Avoid Warning.
    break;
  }
}

void BlockServiceServiceAdapter::Connect(ServiceInterface& service) {
  service.AddDelegate(*this);
}

void BlockServiceServiceAdapter::Disconnect(ServiceInterface& service) {
  service.RemoveDelegate(*this);
}

void BlockServiceServiceAdapter::SendInitialNotification(ServiceInterface& service) {
}

} // namespace vsomeip
} // namespace blockservice_binding
} // namespace blockservice
} // namespace cryservice
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara


