// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : publickey_skeleton.h
//
// Purpose     : Implementation of file publickey_skeleton.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYOBJ_PUBILCKEY_PUBLICKEY_SKELETON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYOBJ_PUBILCKEY_PUBLICKEY_SKELETON_H_

#include <ara/com/internal/skeleton/ara_skeleton_base.h>
#include <ara/com/illegal_state_exception.h>
#include "ara/crypto/ipccom/cryp/cryobj/pubilckey/publickey_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace cryobj
{
namespace pubilckey
{
namespace skeleton
{



/// @brief Class for PublicKeySkeleton.
class PublicKeySkeleton : public ara::crypto::ipccom::cryp::cryobj::pubilckey::PublicKey, public ara::com::internal::skeleton::TypedServiceImplBase<PublicKeySkeleton> {
 public:
  /// @uptrace{SWS_CM_00130}
  PublicKeySkeleton(ara::com::InstanceIdentifier instance_id, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<PublicKeySkeleton>(instance_id, mode) {}
  /// @brief PublicKeySkeleton Destructor.

  /// @uptrace{SWS_CM_00152, 4ff7c3aec9fce6d3819bb320c152ce9c410cbe74}
  PublicKeySkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<PublicKeySkeleton>(std::move(instanceSpec), mode) {}

  /// @uptrace{SWS_CM_00153, 791854b84a101bd8d4a5e0e90bb3fb34c1fafd6f}
  PublicKeySkeleton(ara::com::InstanceIdentifierContainer instanceIDs, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<PublicKeySkeleton>(std::move(instanceIDs), mode) {}

  /// @brief Skeleton shall be move constructable.
  explicit PublicKeySkeleton(PublicKeySkeleton&&) = default;

  /// @brief Skeleton shall be move assignable.
  PublicKeySkeleton& operator=(PublicKeySkeleton&&) = default;

  /// @brief Skeleton shall not be copy constructable.
  explicit PublicKeySkeleton(const PublicKeySkeleton&) = delete;

  /// @brief Virtual function.
virtual ~PublicKeySkeleton() noexcept override;

  /// @brief Skeleton shall not be copy assignable.
  PublicKeySkeleton& operator=(const PublicKeySkeleton&) = delete;

  /// @brief Definition for OfferService.
  void OfferService();
  using ara::crypto::ipccom::cryp::cryobj::pubilckey::PublicKey::CheckKeyOutput;
  /// @brief Definition for CheckKey.
  virtual ara::core::Future<CheckKeyOutput>CheckKey(const Boolean& strongCheck)=0 ;
  using ara::crypto::ipccom::cryp::cryobj::pubilckey::PublicKey::ExportPubliclyOutput;
  /// @brief Definition for ExportPublicly.
  virtual ara::core::Future<ExportPubliclyOutput>ExportPublicly(const CryptoFormatId& FormatId)=0 ;
  using ara::crypto::ipccom::cryp::cryobj::pubilckey::PublicKey::GetAllowedUsageOutput;
  /// @brief Definition for GetAllowedUsage.
  virtual ara::core::Future<GetAllowedUsageOutput>GetAllowedUsage()=0 ;
  using ara::crypto::ipccom::cryp::cryobj::pubilckey::PublicKey::GetCryptoPrimitiveIdOutput;
  /// @brief Definition for GetCryptoPrimitiveId.
  virtual ara::core::Future<GetCryptoPrimitiveIdOutput>GetCryptoPrimitiveId()=0 ;
  using ara::crypto::ipccom::cryp::cryobj::pubilckey::PublicKey::GetObjectIdOutput;
  /// @brief Definition for GetObjectId.
  virtual ara::core::Future<GetObjectIdOutput>GetObjectId()=0 ;
  using ara::crypto::ipccom::cryp::cryobj::pubilckey::PublicKey::GetPayloadSizeOutput;
  /// @brief Definition for GetPayloadSize.
  virtual ara::core::Future<GetPayloadSizeOutput>GetPayloadSize()=0 ;
  using ara::crypto::ipccom::cryp::cryobj::pubilckey::PublicKey::HasDependenceOutput;
  /// @brief Definition for HasDependence.
  virtual ara::core::Future<HasDependenceOutput>HasDependence()=0 ;
  using ara::crypto::ipccom::cryp::cryobj::pubilckey::PublicKey::HashPublicKeyOutput;
  /// @brief Definition for HashPublicKey.
  virtual ara::core::Future<HashPublicKeyOutput>HashPublicKey(const CryptoServiceInstanceId& HashFunctionCtxInstanceId)=0 ;
  using ara::crypto::ipccom::cryp::cryobj::pubilckey::PublicKey::IsExportableOutput;
  /// @brief Definition for IsExportable.
  virtual ara::core::Future<IsExportableOutput>IsExportable()=0 ;
  using ara::crypto::ipccom::cryp::cryobj::pubilckey::PublicKey::IsSessionOutput;
  /// @brief Definition for IsSession.
  virtual ara::core::Future<IsSessionOutput>IsSession()=0 ;
  /// @brief Definition for Save.
  virtual ara::core::Future<void> Save(const CryptoServiceInstanceId& IOInterfaceInstanceId) = 0;
};

} // namespace skeleton
} // namespace pubilckey
} // namespace cryobj
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYOBJ_PUBILCKEY_PUBLICKEY_SKELETON_H_

