// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : x509provider_skeleton.h
//
// Purpose     : Implementation of file x509provider_skeleton.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-10T22:51:22+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_X509PROVIDER_SKELETON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_X509PROVIDER_SKELETON_H_

#include <ara/com/internal/skeleton/ara_skeleton_base.h>
#include <ara/com/illegal_state_exception.h>
#include "ara/crypto/ipccom/x509/x509provider_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace x509
{
namespace skeleton
{



/// @brief Class for X509ProviderSkeleton.
class X509ProviderSkeleton : public ara::crypto::ipccom::x509::X509Provider, public ara::com::internal::skeleton::TypedServiceImplBase<X509ProviderSkeleton> {
 public:
  /// @uptrace{SWS_CM_00130}
  X509ProviderSkeleton(ara::com::InstanceIdentifier instance_id, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<X509ProviderSkeleton>(instance_id, mode) {}
  /// @brief X509ProviderSkeleton Destructor.

  /// @uptrace{SWS_CM_00152, 4ff7c3aec9fce6d3819bb320c152ce9c410cbe74}
  X509ProviderSkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<X509ProviderSkeleton>(std::move(instanceSpec), mode) {}

  /// @uptrace{SWS_CM_00153, 791854b84a101bd8d4a5e0e90bb3fb34c1fafd6f}
  X509ProviderSkeleton(ara::com::InstanceIdentifierContainer instanceIDs, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<X509ProviderSkeleton>(std::move(instanceIDs), mode) {}

  /// @brief Skeleton shall be move constructable.
  explicit X509ProviderSkeleton(X509ProviderSkeleton&&) = default;

  /// @brief Skeleton shall be move assignable.
  X509ProviderSkeleton& operator=(X509ProviderSkeleton&&) = default;

  /// @brief Skeleton shall not be copy constructable.
  explicit X509ProviderSkeleton(const X509ProviderSkeleton&) = delete;

  /// @brief Virtual function.
virtual ~X509ProviderSkeleton() noexcept override;

  /// @brief Skeleton shall not be copy assignable.
  X509ProviderSkeleton& operator=(const X509ProviderSkeleton&) = delete;

  /// @brief Definition for OfferService.
  void OfferService();
  using ara::crypto::ipccom::x509::X509Provider::BuildDnOutput;
  /// @brief Definition for BuildDn.
  virtual ara::core::Future<BuildDnOutput>BuildDn(const String& dn)=0 ;
  using ara::crypto::ipccom::x509::X509Provider::CheckCertStatusOutput;
  /// @brief Definition for CheckCertStatus.
  virtual ara::core::Future<CheckCertStatusOutput>CheckCertStatus(const CryptoServiceInstanceId& certInstanceId,const CryptoServiceInstanceId& ocspResponseInstanceId)=0 ;
  using ara::crypto::ipccom::x509::X509Provider::CheckCertStatusWithCertListOutput;
  /// @brief Definition for CheckCertStatusWithCertList.
  virtual ara::core::Future<CheckCertStatusWithCertListOutput>CheckCertStatusWithCertList(const ByteVectorCertType& certInstanceId,const CryptoServiceInstanceId& ocspResponseInstanceId)=0 ;
  /// @brief Definition for CleanupVolatileStorage.
  virtual ara::core::Future<void> CleanupVolatileStorage() = 0;
  using ara::crypto::ipccom::x509::X509Provider::CountCertsInChainOutput;
  /// @brief Definition for CountCertsInChain.
  virtual ara::core::Future<CountCertsInChainOutput>CountCertsInChain(const CryptoReadOnlyMemRegion& certChain,const uint32& formatId)=0 ;
  using ara::crypto::ipccom::x509::X509Provider::CreateCertSignRequestOutput;
  /// @brief Definition for CreateCertSignRequest.
  virtual ara::core::Future<CreateCertSignRequestOutput>CreateCertSignRequest(const CryptoServiceInstanceId& signerCtx,const CryptoReadOnlyMemRegion& derSubjectDN,const CryptoReadOnlyMemRegion& x509Extensions,const uint64& version)=0 ;
  using ara::crypto::ipccom::x509::X509Provider::CreateEmptyDnOutput;
  /// @brief Definition for CreateEmptyDn.
  virtual ara::core::Future<CreateEmptyDnOutput>CreateEmptyDn(const uint64& capacity)=0 ;
  using ara::crypto::ipccom::x509::X509Provider::CreateEmptyExtensionsOutput;
  /// @brief Definition for CreateEmptyExtensions.
  virtual ara::core::Future<CreateEmptyExtensionsOutput>CreateEmptyExtensions(const uint64& capacity)=0 ;
  using ara::crypto::ipccom::x509::X509Provider::CreateOcspRequestOutput;
  /// @brief Definition for CreateOcspRequest.
  virtual ara::core::Future<CreateOcspRequestOutput>CreateOcspRequest(const CryptoServiceInstanceId& certInstanceId,const CryptoServiceInstanceId& signerInstanceId)=0 ;
  using ara::crypto::ipccom::x509::X509Provider::CreateOcspRequestWithCertListOutput;
  /// @brief Definition for CreateOcspRequestWithCertList.
  virtual ara::core::Future<CreateOcspRequestWithCertListOutput>CreateOcspRequestWithCertList(const ByteVectorCertType& certListInstanceId,const CryptoServiceInstanceId& signerInstanceId)=0 ;
  using ara::crypto::ipccom::x509::X509Provider::DecodeDnOutput;
  /// @brief Definition for DecodeDn.
  virtual ara::core::Future<DecodeDnOutput>DecodeDn(const CryptoReadOnlyMemRegion& dn,const uint32& formatId)=0 ;
  using ara::crypto::ipccom::x509::X509Provider::FindCertByDnOutput;
  /// @brief Definition for FindCertByDn.
  virtual ara::core::Future<FindCertByDnOutput>FindCertByDn(const CryptoServiceInstanceId& subjectDnInstanceId,const CryptoServiceInstanceId& issuerDnInstanceId,const Int64& validityTimePoint)=0 ;
  using ara::crypto::ipccom::x509::X509Provider::FindCertByKeyIdsOutput;
  /// @brief Definition for FindCertByKeyIds.
  virtual ara::core::Future<FindCertByKeyIdsOutput>FindCertByKeyIds(const CryptoReadOnlyMemRegion& subjectKeyId,const CryptoReadOnlyMemRegion& authorityKeyId)=0 ;
  using ara::crypto::ipccom::x509::X509Provider::FindCertBySnOutput;
  /// @brief Definition for FindCertBySn.
  virtual ara::core::Future<FindCertBySnOutput>FindCertBySn(const CryptoReadOnlyMemRegion& sn,const CryptoServiceInstanceId& issuerDnInstanceId)=0 ;
  /// @brief Definition for Import.
  virtual ara::core::Future<void> Import(const CryptoServiceInstanceId& certInstanceId,const String& iSpecify) = 0;
  using ara::crypto::ipccom::x509::X509Provider::ImportCrlOutput;
  /// @brief Definition for ImportCrl.
  virtual ara::core::Future<ImportCrlOutput>ImportCrl(const CryptoReadOnlyMemRegion& crl)=0 ;
  using ara::crypto::ipccom::x509::X509Provider::LoadCertificateOutput;
  /// @brief Definition for LoadCertificate.
  virtual ara::core::Future<LoadCertificateOutput>LoadCertificate(const String& iSpecifyInstanceId)=0 ;
  using ara::crypto::ipccom::x509::X509Provider::ParseCertOutput;
  /// @brief Definition for ParseCert.
  virtual ara::core::Future<ParseCertOutput>ParseCert(const CryptoReadOnlyMemRegion& cert,const uint32& formatId)=0 ;
  using ara::crypto::ipccom::x509::X509Provider::ParseCertChainOutput;
  /// @brief Definition for ParseCertChain.
  virtual ara::core::Future<ParseCertChainOutput>ParseCertChain(const uint32& formatId,const CryptoReadOnlyMemRegion& certChain)=0 ;
  using ara::crypto::ipccom::x509::X509Provider::ParseCertChainVectorReadOnlyMemRegionOutput;
  /// @brief Definition for ParseCertChainVectorReadOnlyMemRegion.
  virtual ara::core::Future<ParseCertChainVectorReadOnlyMemRegionOutput>ParseCertChainVectorReadOnlyMemRegion(const ByteVectorReadOnlyMemRegion& certChain,const uint32& formatId)=0 ;
  using ara::crypto::ipccom::x509::X509Provider::ParseCertSignRequestOutput;
  /// @brief Definition for ParseCertSignRequest.
  virtual ara::core::Future<ParseCertSignRequestOutput>ParseCertSignRequest(const CryptoReadOnlyMemRegion& csr,const Boolean& withMetaData)=0 ;
  using ara::crypto::ipccom::x509::X509Provider::ParseOcspResponseOutput;
  /// @brief Definition for ParseOcspResponse.
  virtual ara::core::Future<ParseOcspResponseOutput>ParseOcspResponse(const CryptoReadOnlyMemRegion& response)=0 ;
  using ara::crypto::ipccom::x509::X509Provider::RemoveOutput;
  /// @brief Definition for Remove.
  virtual ara::core::Future<RemoveOutput>Remove(const CryptoServiceInstanceId& certInstanceId)=0 ;
  /// @brief Definition for SetAsRootOfTrust.
  virtual ara::core::Future<void> SetAsRootOfTrust(const CryptoServiceInstanceId& caCertInstanceId) = 0;
  /// @brief Definition for SetPendingStatus.
  virtual ara::core::Future<void> SetPendingStatus(const CryptoServiceInstanceId& csrInstanceId) = 0;
  using ara::crypto::ipccom::x509::X509Provider::VerifyCertOutput;
  /// @brief Definition for VerifyCert.
  virtual ara::core::Future<VerifyCertOutput>VerifyCert(const CryptoServiceInstanceId& certInstanceId,const CryptoServiceInstanceId& myRootInstanceId)=0 ;
  using ara::crypto::ipccom::x509::X509Provider::VerifyCertChainOutput;
  /// @brief Definition for VerifyCertChain.
  virtual ara::core::Future<VerifyCertChainOutput>VerifyCertChain(const ByteVectorCertType& chain,const CryptoServiceInstanceId& myRootInstanceId)=0 ;
};

} // namespace skeleton
} // namespace x509
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_X509PROVIDER_SKELETON_H_

