// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : certificate_skeleton.h
//
// Purpose     : Implementation of file certificate_skeleton.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_CERTIFICATE_CERTIFICATE_SKELETON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_CERTIFICATE_CERTIFICATE_SKELETON_H_

#include <ara/com/internal/skeleton/ara_skeleton_base.h>
#include <ara/com/illegal_state_exception.h>
#include "ara/crypto/ipccom/x509/certificate/certificate_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace x509
{
namespace certificate
{
namespace skeleton
{



/// @brief Class for CertificateSkeleton.
class CertificateSkeleton : public ara::crypto::ipccom::x509::certificate::Certificate, public ara::com::internal::skeleton::TypedServiceImplBase<CertificateSkeleton> {
 public:
  /// @uptrace{SWS_CM_00130}
  CertificateSkeleton(ara::com::InstanceIdentifier instance_id, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<CertificateSkeleton>(instance_id, mode) {}
  /// @brief CertificateSkeleton Destructor.

  /// @uptrace{SWS_CM_00152, 4ff7c3aec9fce6d3819bb320c152ce9c410cbe74}
  CertificateSkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<CertificateSkeleton>(std::move(instanceSpec), mode) {}

  /// @uptrace{SWS_CM_00153, 791854b84a101bd8d4a5e0e90bb3fb34c1fafd6f}
  CertificateSkeleton(ara::com::InstanceIdentifierContainer instanceIDs, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<CertificateSkeleton>(std::move(instanceIDs), mode) {}

  /// @brief Skeleton shall be move constructable.
  explicit CertificateSkeleton(CertificateSkeleton&&) = default;

  /// @brief Skeleton shall be move assignable.
  CertificateSkeleton& operator=(CertificateSkeleton&&) = default;

  /// @brief Skeleton shall not be copy constructable.
  explicit CertificateSkeleton(const CertificateSkeleton&) = delete;

  /// @brief Virtual function.
virtual ~CertificateSkeleton() noexcept override;

  /// @brief Skeleton shall not be copy assignable.
  CertificateSkeleton& operator=(const CertificateSkeleton&) = delete;

  /// @brief Definition for OfferService.
  void OfferService();
  using ara::crypto::ipccom::x509::certificate::Certificate::AuthorityKeyIdOutput;
  /// @brief Definition for AuthorityKeyId.
  virtual ara::core::Future<AuthorityKeyIdOutput>AuthorityKeyId()=0 ;
  using ara::crypto::ipccom::x509::certificate::Certificate::EndTimeOutput;
  /// @brief Definition for EndTime.
  virtual ara::core::Future<EndTimeOutput>EndTime()=0 ;
  using ara::crypto::ipccom::x509::certificate::Certificate::ExportPubliclyOutput;
  /// @brief Definition for ExportPublicly.
  virtual ara::core::Future<ExportPubliclyOutput>ExportPublicly(const uint32& formatId)=0 ;
  using ara::crypto::ipccom::x509::certificate::Certificate::GetConstraintsOutput;
  /// @brief Definition for GetConstraints.
  virtual ara::core::Future<GetConstraintsOutput>GetConstraints()=0 ;
  using ara::crypto::ipccom::x509::certificate::Certificate::GetFingerprintOutput;
  /// @brief Definition for GetFingerprint.
  virtual ara::core::Future<GetFingerprintOutput>GetFingerprint(const CryptoServiceInstanceId& hashCtxInstanceId,const uint32& fingerPrintSize)=0 ;
  using ara::crypto::ipccom::x509::certificate::Certificate::GetPathLimitOutput;
  /// @brief Definition for GetPathLimit.
  virtual ara::core::Future<GetPathLimitOutput>GetPathLimit()=0 ;
  using ara::crypto::ipccom::x509::certificate::Certificate::GetStatusOutput;
  /// @brief Definition for GetStatus.
  virtual ara::core::Future<GetStatusOutput>GetStatus()=0 ;
  using ara::crypto::ipccom::x509::certificate::Certificate::IsCaOutput;
  /// @brief Definition for IsCa.
  virtual ara::core::Future<IsCaOutput>IsCa()=0 ;
  using ara::crypto::ipccom::x509::certificate::Certificate::IsRootOutput;
  /// @brief Definition for IsRoot.
  virtual ara::core::Future<IsRootOutput>IsRoot()=0 ;
  using ara::crypto::ipccom::x509::certificate::Certificate::IssuerDnOutput;
  /// @brief Definition for IssuerDn.
  virtual ara::core::Future<IssuerDnOutput>IssuerDn()=0 ;
  using ara::crypto::ipccom::x509::certificate::Certificate::MyProviderOutput;
  /// @brief Definition for MyProvider.
  virtual ara::core::Future<MyProviderOutput>MyProvider()=0 ;
  using ara::crypto::ipccom::x509::certificate::Certificate::SerialNumberOutput;
  /// @brief Definition for SerialNumber.
  virtual ara::core::Future<SerialNumberOutput>SerialNumber()=0 ;
  using ara::crypto::ipccom::x509::certificate::Certificate::StartTimeOutput;
  /// @brief Definition for StartTime.
  virtual ara::core::Future<StartTimeOutput>StartTime()=0 ;
  using ara::crypto::ipccom::x509::certificate::Certificate::SubjectDnOutput;
  /// @brief Definition for SubjectDn.
  virtual ara::core::Future<SubjectDnOutput>SubjectDn()=0 ;
  using ara::crypto::ipccom::x509::certificate::Certificate::SubjectKeyIdOutput;
  /// @brief Definition for SubjectKeyId.
  virtual ara::core::Future<SubjectKeyIdOutput>SubjectKeyId()=0 ;
  using ara::crypto::ipccom::x509::certificate::Certificate::SubjectPubKeyOutput;
  /// @brief Definition for SubjectPubKey.
  virtual ara::core::Future<SubjectPubKeyOutput>SubjectPubKey(const CryptoServiceInstanceId& cryptoProviderInstanceId)=0 ;
  using ara::crypto::ipccom::x509::certificate::Certificate::VerifyMeOutput;
  /// @brief Definition for VerifyMe.
  virtual ara::core::Future<VerifyMeOutput>VerifyMe(const CryptoServiceInstanceId& caCertInstanceId)=0 ;
  using ara::crypto::ipccom::x509::certificate::Certificate::X509VersionOutput;
  /// @brief Definition for X509Version.
  virtual ara::core::Future<X509VersionOutput>X509Version()=0 ;
};

} // namespace skeleton
} // namespace certificate
} // namespace x509
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_CERTIFICATE_CERTIFICATE_SKELETON_H_

