// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : adapter_cryptoproviderinterface.cpp
//
// Purpose     : Implementation of file adapter_cryptoproviderinterface.cpp
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-03-14T12:58:58+05:30
// -----------------------------------------------------------------------------------------------------------

#include "adapter_cryptoproviderinterface.h"
namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace cryptoprovider
{
namespace cryptoproviderinterface_binding
{
namespace vsomeip
{

CryptoProviderInterfaceServiceAdapter::~CryptoProviderInterfaceServiceAdapter() noexcept {
  StopOfferService(ServiceDescriptor::service_id, GetInstanceId());
  UnregisterMethodDispatcher(ServiceDescriptor::service_id);
  Disconnect(dynamic_cast<ServiceInterface&>(service_));
}

void CryptoProviderInterfaceServiceAdapter::DispatchMethodCall(const std::shared_ptr<::vsomeip::message>& msg)
{
  ServiceInterface& service{dynamic_cast<ServiceInterface&>(service_)};
  switch(msg->get_method()) {
    case descriptors::CreateAuthCipher::method_id:
      HandleCall(service, &ServiceInterface::CreateAuthCipher, msg);
    break;
    case descriptors::CreateDecryptorPrivate::method_id:
      HandleCall(service, &ServiceInterface::CreateDecryptorPrivate, msg);
    break;
    case descriptors::CreateEncryptorPublic::method_id:
      HandleCall(service, &ServiceInterface::CreateEncryptorPublic, msg);
    break;
    case descriptors::CreateHashDigest::method_id:
      HandleCall(service, &ServiceInterface::CreateHashDigest, msg);
    break;
    case descriptors::CreateHashFunction::method_id:
      HandleCall(service, &ServiceInterface::CreateHashFunction, msg);
    break;
    case descriptors::CreateKeyAgreementPrivate::method_id:
      HandleCall(service, &ServiceInterface::CreateKeyAgreementPrivate, msg);
    break;
    case descriptors::CreateKeyDecapsulatorPrivate::method_id:
      HandleCall(service, &ServiceInterface::CreateKeyDecapsulatorPrivate, msg);
    break;
    case descriptors::CreateKeyDerivationFunction::method_id:
      HandleCall(service, &ServiceInterface::CreateKeyDerivationFunction, msg);
    break;
    case descriptors::CreateKeyEncapsulatorPublic::method_id:
      HandleCall(service, &ServiceInterface::CreateKeyEncapsulatorPublic, msg);
    break;
    case descriptors::CreateMessageAuthCode::method_id:
      HandleCall(service, &ServiceInterface::CreateMessageAuthCode, msg);
    break;
    case descriptors::CreateMsgRecoveryPublic::method_id:
      HandleCall(service, &ServiceInterface::CreateMsgRecoveryPublic, msg);
    break;
    case descriptors::CreateRandomGenerator::method_id:
      HandleCall(service, &ServiceInterface::CreateRandomGenerator, msg);
    break;
    case descriptors::CreateSigEncodePrivate::method_id:
      HandleCall(service, &ServiceInterface::CreateSigEncodePrivate, msg);
    break;
    case descriptors::CreateSignature::method_id:
      HandleCall(service, &ServiceInterface::CreateSignature, msg);
    break;
    case descriptors::CreateSignerPrivate::method_id:
      HandleCall(service, &ServiceInterface::CreateSignerPrivate, msg);
    break;
    case descriptors::CreateStreamCipher::method_id:
      HandleCall(service, &ServiceInterface::CreateStreamCipher, msg);
    break;
    case descriptors::CreateSymmetricBlockCipher::method_id:
      HandleCall(service, &ServiceInterface::CreateSymmetricBlockCipher, msg);
    break;
    case descriptors::CreateSymmetricKeyWrapper::method_id:
      HandleCall(service, &ServiceInterface::CreateSymmetricKeyWrapper, msg);
    break;
    case descriptors::CreateVerifierPublic::method_id:
      HandleCall(service, &ServiceInterface::CreateVerifierPublic, msg);
    break;
    case descriptors::GenPrivateKey::method_id:
      HandleCall(service, &ServiceInterface::GenPrivateKey, msg);
    break;
    case descriptors::GenSeed::method_id:
      HandleCall(service, &ServiceInterface::GenSeed, msg);
    break;
    case descriptors::GenSymmetricKey::method_id:
      HandleCall(service, &ServiceInterface::GenSymmetricKey, msg);
    break;
    case descriptors::LoadObject::method_id:
      HandleCall(service, &ServiceInterface::LoadObject, msg);
    break;
    case descriptors::LoadPrivateKey::method_id:
      HandleCall(service, &ServiceInterface::LoadPrivateKey, msg);
    break;
    case descriptors::LoadPublicKey::method_id:
      HandleCall(service, &ServiceInterface::LoadPublicKey, msg);
    break;
    case descriptors::LoadSecretSeed::method_id:
      HandleCall(service, &ServiceInterface::LoadSecretSeed, msg);
    break;
    case descriptors::LoadSymmetricKey::method_id:
      HandleCall(service, &ServiceInterface::LoadSymmetricKey, msg);
    break;
    case descriptors::StopCryptoProviderService::method_id:
      HandleCall(service, &ServiceInterface::StopCryptoProviderService, msg);
    break;
    default:
    // Avoid Warning.
    break;
  }
}

void CryptoProviderInterfaceServiceAdapter::Connect(ServiceInterface& service) {
  service.AddDelegate(*this);
}

void CryptoProviderInterfaceServiceAdapter::Disconnect(ServiceInterface& service) {
  service.RemoveDelegate(*this);
}

void CryptoProviderInterfaceServiceAdapter::SendInitialNotification(ServiceInterface& service) {
}

} // namespace vsomeip
} // namespace cryptoproviderinterface_binding
} // namespace cryptoprovider
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara


