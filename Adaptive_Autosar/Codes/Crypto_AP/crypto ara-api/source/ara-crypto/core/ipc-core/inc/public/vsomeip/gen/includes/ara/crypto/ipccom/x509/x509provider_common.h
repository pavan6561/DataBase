// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : x509provider_common.h
//
// Purpose     : Implementation of file x509provider_common.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-10T22:51:22+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_X509PROVIDER_COMMON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_X509PROVIDER_COMMON_H_

#include <cstring>
#include <ara/core/array.h>

#include <ara/com/types.h>

#include <ara/com/exception.h>
#include <ara/core/error_code.h>

#include "ara/crypto/ipccom/common/error/error_domain_cryptoerrordomain.h"
#include "impl_type_boolean.h"
#include "impl_type_bytevectorcerttype.h"
#include "impl_type_bytevectorreadonlymemregion.h"
#include "impl_type_cryptoreadonlymemregion.h"
#include "impl_type_cryptoserviceinstanceid.h"
#include "impl_type_int64.h"
#include "impl_type_string.h"
#include "impl_type_uint32.h"
#include "impl_type_uint64.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace x509
{

/// @brief Class for X509Provider.
class  X509Provider {
 public:
  /// @brief Definition for X509Provider.
  virtual ~X509Provider() noexcept
  {}
  static constexpr ara::com::internal::ServiceId service_id{0x9989};
  static constexpr ara::com::internal::ServiceVersion service_version_major{0x1};
  static constexpr ara::com::internal::ServiceVersion service_version_minor{0x0};
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>BuildDn_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidInputSize, 0),
    }
  };
  /// @brief class for BuildDnOutput.
  class BuildDnOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>CheckCertStatus_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kRuntimeFault, 0),
    }
  };
  /// @brief class for CheckCertStatusOutput.
  class CheckCertStatusOutput
  {
    public:
    /// @brief Argument for result.
    Boolean result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>CheckCertStatusWithCertList_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kRuntimeFault, 0),
    }
  };
  /// @brief class for CheckCertStatusWithCertListOutput.
  class CheckCertStatusWithCertListOutput
  {
    public:
    /// @brief Argument for result.
    Boolean result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>CountCertsInChain_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnknownIdentifier, 0),
    }
  };
  /// @brief class for CountCertsInChainOutput.
  class CountCertsInChainOutput
  {
    public:
    /// @brief Argument for size_t.
    uint64 size_t;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(size_t);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 1>CreateCertSignRequest_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnexpectedValue, 0),
    }
  };
  /// @brief class for CreateCertSignRequestOutput.
  class CreateCertSignRequestOutput
  {
    public:
    /// @brief Argument for resultInstanceId.
    CryptoServiceInstanceId resultInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(resultInstanceId);
    }
  };
  /// @brief class for CreateEmptyDnOutput.
  class CreateEmptyDnOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  /// @brief class for CreateEmptyExtensionsOutput.
  class CreateEmptyExtensionsOutput
  {
    public:
    /// @brief Argument for resultInstanceId.
    CryptoServiceInstanceId resultInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(resultInstanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>CreateOcspRequest_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kIncompleteArgState, 0),
    }
  };
  /// @brief class for CreateOcspRequestOutput.
  class CreateOcspRequestOutput
  {
    public:
    /// @brief Argument for ocspRequestInstanceId.
    CryptoServiceInstanceId ocspRequestInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(ocspRequestInstanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>CreateOcspRequestWithCertList_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kIncompleteArgState, 0),
    }
  };
  /// @brief class for CreateOcspRequestWithCertListOutput.
  class CreateOcspRequestWithCertListOutput
  {
    public:
    /// @brief Argument for ocspRequestInstanceId.
    CryptoServiceInstanceId ocspRequestInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(ocspRequestInstanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>DecodeDn_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnknownIdentifier, 0),
    }
  };
  /// @brief class for DecodeDnOutput.
  class DecodeDnOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  /// @brief class for FindCertByDnOutput.
  class FindCertByDnOutput
  {
    public:
    /// @brief Argument for reslutCertInstanceId.
    CryptoServiceInstanceId reslutCertInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(reslutCertInstanceId);
    }
  };
  /// @brief class for FindCertByKeyIdsOutput.
  class FindCertByKeyIdsOutput
  {
    public:
    /// @brief Argument for reslutCertInstanceId.
    CryptoServiceInstanceId reslutCertInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(reslutCertInstanceId);
    }
  };
  /// @brief class for FindCertBySnOutput.
  class FindCertBySnOutput
  {
    public:
    /// @brief Argument for reslutCertInstanceId.
    CryptoServiceInstanceId reslutCertInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(reslutCertInstanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 4>Import_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kContentDuplication, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kIncompatibleObject, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kAccessViolation, 0),
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>ImportCrl_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kRuntimeFault, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnexpectedValue, 0),
    }
  };
  /// @brief class for ImportCrlOutput.
  class ImportCrlOutput
  {
    public:
    /// @brief Argument for result.
    Boolean result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 1>LoadCertificate_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnreservedResource, 0),
    }
  };
  /// @brief class for LoadCertificateOutput.
  class LoadCertificateOutput
  {
    public:
    /// @brief Argument for resultInstanceId.
    CryptoServiceInstanceId resultInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(resultInstanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>ParseCert_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnknownIdentifier, 0),
    }
  };
  /// @brief class for ParseCertOutput.
  class ParseCertOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 3>ParseCertChain_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnknownIdentifier, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInsufficientCapacity, 0),
    }
  };
  /// @brief class for ParseCertChainOutput.
  class ParseCertChainOutput
  {
    public:
    /// @brief Argument for outcome.
    CryptoServiceInstanceId outcome;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(outcome);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 3>ParseCertChainVectorReadOnlyMemRegion_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnknownIdentifier, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInsufficientCapacity, 0),
    }
  };
  /// @brief class for ParseCertChainVectorReadOnlyMemRegionOutput.
  class ParseCertChainVectorReadOnlyMemRegionOutput
  {
    public:
    /// @brief Argument for outcome.
    CryptoServiceInstanceId outcome;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(outcome);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 1>ParseCertSignRequest_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnsupportedFormat, 0),
    }
  };
  /// @brief class for ParseCertSignRequestOutput.
  class ParseCertSignRequestOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 1>ParseOcspResponse_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnexpectedValue, 0),
    }
  };
  /// @brief class for ParseOcspResponseOutput.
  class ParseOcspResponseOutput
  {
    public:
    /// @brief Argument for ocspResponseInstanceId.
    CryptoServiceInstanceId ocspResponseInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(ocspResponseInstanceId);
    }
  };
  /// @brief class for RemoveOutput.
  class RemoveOutput
  {
    public:
    /// @brief Argument for result.
    Boolean result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 3>SetAsRootOfTrust_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kIncompatibleObject, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kAccessViolation, 0),
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 1>SetPendingStatus_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kAccessViolation, 0),
    }
  };
  /// @brief class for VerifyCertOutput.
  class VerifyCertOutput
  {
    public:
    /// @brief Argument for result.
    uint32 result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  /// @brief class for VerifyCertChainOutput.
  class VerifyCertChainOutput
  {
    public:
    /// @brief Argument for result.
    uint32 result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
};

} // namespace x509
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_X509_X509PROVIDER_COMMON_H_

