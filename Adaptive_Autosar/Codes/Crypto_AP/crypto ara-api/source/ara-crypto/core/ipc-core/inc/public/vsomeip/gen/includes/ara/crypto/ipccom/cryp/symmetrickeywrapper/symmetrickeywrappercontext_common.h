// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : symmetrickeywrappercontext_common.h
//
// Purpose     : Implementation of file symmetrickeywrappercontext_common.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-03-14T12:58:58+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_SYMMETRICKEYWRAPPER_SYMMETRICKEYWRAPPERCONTEXT_COMMON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_SYMMETRICKEYWRAPPER_SYMMETRICKEYWRAPPERCONTEXT_COMMON_H_

#include <cstring>
#include <ara/core/array.h>

#include <ara/com/types.h>

#include <ara/com/exception.h>
#include <ara/core/error_code.h>

#include "ara/crypto/ipccom/common/error/error_domain_cryptoerrordomain.h"
#include "impl_type_boolean.h"
#include "impl_type_bytevectortype.h"
#include "impl_type_cryptoalgid.h"
#include "impl_type_cryptoallowedusageflags.h"
#include "impl_type_cryptoprimitiveiduptrstructure.h"
#include "impl_type_cryptoreadonlymemregion.h"
#include "impl_type_cryptoserviceinstanceid.h"
#include "impl_type_cryptotransformdatatype.h"
#include "impl_type_restricteduseobjectstructure.h"
#include "impl_type_uint64.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace symmetrickeywrapper
{

/// @brief Class for SymmetricKeyWrapperContext.
class  SymmetricKeyWrapperContext {
 public:
  /// @brief Definition for SymmetricKeyWrapperContext.
  virtual ~SymmetricKeyWrapperContext() noexcept
  {}
  static constexpr ara::com::internal::ServiceId service_id{0x0EB9};
  static constexpr ara::com::internal::ServiceVersion service_version_major{0x0};
  static constexpr ara::com::internal::ServiceVersion service_version_minor{0x1};
  /// @brief class for CalculateWrappedKeySizeOutput.
  class CalculateWrappedKeySizeOutput
  {
    public:
    /// @brief Argument for calculatedSize.
    uint64 calculatedSize;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(calculatedSize);
    }
  };
  /// @brief class for GetCryptoPrimitiveIdOutput.
  class GetCryptoPrimitiveIdOutput
  {
    public:
    /// @brief Argument for cryptoPrimitiveIdUptrStruct.
    cryptoPrimitiveIdUptrStructure cryptoPrimitiveIdUptrStruct;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(cryptoPrimitiveIdUptrStruct);
    }
  };
  /// @brief class for GetExtensionServiceOutput.
  class GetExtensionServiceOutput
  {
    public:
    /// @brief Argument for extensionServiceInstanceId.
    CryptoServiceInstanceId extensionServiceInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(extensionServiceInstanceId);
    }
  };
  /// @brief class for GetMaxTargetKeyLengthOutput.
  class GetMaxTargetKeyLengthOutput
  {
    public:
    /// @brief Argument for keyLengthSize.
    uint64 keyLengthSize;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(keyLengthSize);
    }
  };
  /// @brief class for GetTargetKeyGranularityOutput.
  class GetTargetKeyGranularityOutput
  {
    public:
    /// @brief Argument for keySize.
    uint64 keySize;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(keySize);
    }
  };
  /// @brief class for IsInitializedOutput.
  class IsInitializedOutput
  {
    public:
    /// @brief Argument for result.
    Boolean result;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(result);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>SetKey_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kIncompatibleObject, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUsageViolation, 0),
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>UnwrapKey_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidInputSize, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUninitializedContext, 0),
    }
  };
  /// @brief class for UnwrapKeyOutput.
  class UnwrapKeyOutput
  {
    public:
    /// @brief Argument for restrictedUseObjStruct.
    CryptoServiceInstanceId restrictedUseObjInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(restrictedUseObjInstanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>UnwrapSeed_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidInputSize, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUninitializedContext, 0),
    }
  };
  /// @brief class for UnwrapSeedOutput.
  class UnwrapSeedOutput
  {
    public:
    /// @brief Argument for secretSeedUptrcInstanceId.
    CryptoServiceInstanceId secretSeedUptrcInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(secretSeedUptrcInstanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 3>WrapKeyMaterial_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInsufficientCapacity, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidInputSize, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUninitializedContext, 0),
    }
  };
  /// @brief class for WrapKeyMaterialOutput.
  class WrapKeyMaterialOutput
  {
    public:
    /// @brief Argument for vtrByte.
    ByteVectorType vtrByte;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(vtrByte);
    }
  };
};

} // namespace symmetrickeywrapper
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_SYMMETRICKEYWRAPPER_SYMMETRICKEYWRAPPERCONTEXT_COMMON_H_

