// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : service_desc_messageauthncode.h
//
// Purpose     : Implementation of file service_desc_messageauthncode.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-03-14T12:58:58+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_VSOMEIP_ARA_CRYPTO_IPCCOM_CRYP_MESSAGEAUTHENTICATIONCODE_SERVICE_DESC_MESSAGEAUTHNCODE_H_
#define CRYPTOSERVEREXE_VSOMEIP_ARA_CRYPTO_IPCCOM_CRYP_MESSAGEAUTHENTICATIONCODE_SERVICE_DESC_MESSAGEAUTHNCODE_H_

#include "ara/crypto/ipccom/cryp/messageauthenticationcode/messageauthncode_common.h"


#include <ara/com/internal/vsomeip/vsomeip_types.h>


namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace messageauthenticationcode
{

namespace messageauthncode_binding
{
namespace vsomeip
{
namespace descriptors
{

namespace internal
{

/// @brief class for Service.
class Service {
 public:
  /// @brief Service Destructor.
  virtual ~Service() noexcept {};
  static constexpr ara::com::internal::vsomeip::types::ServiceId service_id{0x264C};
  static constexpr ara::com::internal::vsomeip::types::ServiceVersionMajor service_version_major{0x1};
  static constexpr ara::com::internal::vsomeip::types::ServiceVersionMinor service_version_minor{0x0};
  static constexpr ara::com::internal::vsomeip::types::ServiceVersionMinor required_minimum_minor_version{0xFFFFFFFFU};
  
  static constexpr bool is_minimum_minor_policy_enabled{false};
  static constexpr uint32_t blacklisted_versions_length{0};
  static constexpr ara::com::internal::vsomeip::types::BlacklistedVersion blacklisted_versions[1] {
            // If blacklistedVersions are absence then just a placeholder  { 0x0, 0x0 } is added. Value will never be used but required for compilation.
            { 0x0, 0x0 }
      };
    };
}
/// @brief class for Check.
class Check : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x5};
  static constexpr bool is_reliable{false};
};
/// @brief class for Finish.
class Finish : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x3};
  static constexpr bool is_reliable{false};
};
/// @brief class for GetCryptoPrimitiveId.
class GetCryptoPrimitiveId : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0xD};
  static constexpr bool is_reliable{false};
};
/// @brief class for GetDigest.
class GetDigest : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x4};
  static constexpr bool is_reliable{false};
};
/// @brief class for GetDigestService.
class GetDigestService : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x7};
  static constexpr bool is_reliable{false};
};
/// @brief class for IsInitialized.
class IsInitialized : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0xC};
  static constexpr bool is_reliable{false};
};
/// @brief class for Reset.
class Reset : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x6};
  static constexpr bool is_reliable{false};
};
/// @brief class for SetKey.
class SetKey : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0xB};
  static constexpr bool is_reliable{false};
};
/// @brief class for StartReadOnlyMem.
class StartReadOnlyMem : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x1};
  static constexpr bool is_reliable{false};
};
/// @brief class for StartSecretSeed.
class StartSecretSeed : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x8};
  static constexpr bool is_reliable{false};
};
/// @brief class for Update.
class Update : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0xA};
  static constexpr bool is_reliable{false};
};
/// @brief class for UpdateReadOnlyMem.
class UpdateReadOnlyMem : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x2};
  static constexpr bool is_reliable{false};
};
/// @brief class for UpdateRestrictedUseObject.
class UpdateRestrictedUseObject : public internal::Service {
 public:
  static constexpr ara::com::internal::vsomeip::types::MethodId method_id{0x9};
  static constexpr bool is_reliable{false};
};



} // namespace descriptors
} // namespace vsomeip
} // namespace messageauthncode_binding
} // namespace messageauthenticationcode
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_VSOMEIP_ARA_CRYPTO_IPCCOM_CRYP_MESSAGEAUTHENTICATIONCODE_SERVICE_DESC_MESSAGEAUTHNCODE_H_


