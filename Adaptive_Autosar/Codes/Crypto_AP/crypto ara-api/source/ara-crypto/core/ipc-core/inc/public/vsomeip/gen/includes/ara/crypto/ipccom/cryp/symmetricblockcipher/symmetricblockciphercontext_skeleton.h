// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : symmetricblockciphercontext_skeleton.h
//
// Purpose     : Implementation of file symmetricblockciphercontext_skeleton.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-03-14T12:58:58+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_SYMMETRICBLOCKCIPHER_SYMMETRICBLOCKCIPHERCONTEXT_SKELETON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_SYMMETRICBLOCKCIPHER_SYMMETRICBLOCKCIPHERCONTEXT_SKELETON_H_

#include <ara/com/internal/skeleton/ara_skeleton_base.h>
#include <ara/com/illegal_state_exception.h>
#include "ara/crypto/ipccom/cryp/symmetricblockcipher/symmetricblockciphercontext_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace symmetricblockcipher
{
namespace skeleton
{



/// @brief Class for SymmetricBlockCipherContextSkeleton.
class SymmetricBlockCipherContextSkeleton : public ara::crypto::ipccom::cryp::symmetricblockcipher::SymmetricBlockCipherContext, public ara::com::internal::skeleton::TypedServiceImplBase<SymmetricBlockCipherContextSkeleton> {
 public:
  /// @uptrace{SWS_CM_00130}
  SymmetricBlockCipherContextSkeleton(ara::com::InstanceIdentifier instance_id, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<SymmetricBlockCipherContextSkeleton>(instance_id, mode) {}
  /// @brief SymmetricBlockCipherContextSkeleton Destructor.

  /// @uptrace{SWS_CM_00152, 4ff7c3aec9fce6d3819bb320c152ce9c410cbe74}
  SymmetricBlockCipherContextSkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<SymmetricBlockCipherContextSkeleton>(std::move(instanceSpec), mode) {}

  /// @uptrace{SWS_CM_00153, 791854b84a101bd8d4a5e0e90bb3fb34c1fafd6f}
  SymmetricBlockCipherContextSkeleton(ara::com::InstanceIdentifierContainer instanceIDs, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<SymmetricBlockCipherContextSkeleton>(std::move(instanceIDs), mode) {}

  /// @brief Skeleton shall be move constructable.
  explicit SymmetricBlockCipherContextSkeleton(SymmetricBlockCipherContextSkeleton&&) = default;

  /// @brief Skeleton shall be move assignable.
  SymmetricBlockCipherContextSkeleton& operator=(SymmetricBlockCipherContextSkeleton&&) = default;

  /// @brief Skeleton shall not be copy constructable.
  explicit SymmetricBlockCipherContextSkeleton(const SymmetricBlockCipherContextSkeleton&) = delete;

  /// @brief Virtual function.
virtual ~SymmetricBlockCipherContextSkeleton() noexcept override;

  /// @brief Skeleton shall not be copy assignable.
  SymmetricBlockCipherContextSkeleton& operator=(const SymmetricBlockCipherContextSkeleton&) = delete;

  /// @brief Definition for OfferService.
  void OfferService();
  using ara::crypto::ipccom::cryp::symmetricblockcipher::SymmetricBlockCipherContext::GetCryptoPrimitiveIdOutput;
  /// @brief Definition for GetCryptoPrimitiveId.
  virtual ara::core::Future<GetCryptoPrimitiveIdOutput>GetCryptoPrimitiveId()=0 ;
  using ara::crypto::ipccom::cryp::symmetricblockcipher::SymmetricBlockCipherContext::GetCryptoServiceOutput;
  /// @brief Definition for GetCryptoService.
  virtual ara::core::Future<GetCryptoServiceOutput>GetCryptoService()=0 ;
  using ara::crypto::ipccom::cryp::symmetricblockcipher::SymmetricBlockCipherContext::GetTransformationOutput;
  /// @brief Definition for GetTransformation.
  virtual ara::core::Future<GetTransformationOutput>GetTransformation()=0 ;
  using ara::crypto::ipccom::cryp::symmetricblockcipher::SymmetricBlockCipherContext::IsInitializedOutput;
  /// @brief Definition for IsInitialized.
  virtual ara::core::Future<IsInitializedOutput>IsInitialized()=0 ;
  using ara::crypto::ipccom::cryp::symmetricblockcipher::SymmetricBlockCipherContext::ProcessBlockOutput;
  /// @brief Definition for ProcessBlock.
  virtual ara::core::Future<ProcessBlockOutput>ProcessBlock(const CryptoReadOnlyMemRegion& in,const Boolean& suppressPadding)=0 ;
  using ara::crypto::ipccom::cryp::symmetricblockcipher::SymmetricBlockCipherContext::ProcessBlocksOutput;
  /// @brief Definition for ProcessBlocks.
  virtual ara::core::Future<ProcessBlocksOutput>ProcessBlocks(const CryptoReadOnlyMemRegion& in)=0 ;
  /// @brief Definition for Reset.
  virtual ara::core::Future<void> Reset() = 0;
  /// @brief Definition for SetKey.
  virtual ara::core::Future<void> SetKey(const CryptoServiceInstanceId& instanceId,const CryptoTransformDataType& transform) = 0;
};

} // namespace skeleton
} // namespace symmetricblockcipher
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_SYMMETRICBLOCKCIPHER_SYMMETRICBLOCKCIPHERCONTEXT_SKELETON_H_

