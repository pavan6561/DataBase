// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : keystorageprovider_skeleton.h
//
// Purpose     : Implementation of file keystorageprovider_skeleton.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-02-07T12:05:52+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_KEYS_KEYSTORAGEPROVIDER_KEYSTORAGEPROVIDER_SKELETON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_KEYS_KEYSTORAGEPROVIDER_KEYSTORAGEPROVIDER_SKELETON_H_

#include <ara/com/internal/skeleton/ara_skeleton_base.h>
#include <ara/com/illegal_state_exception.h>
#include "ara/crypto/ipccom/keys/keystorageprovider/keystorageprovider_common.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace keys
{
namespace keystorageprovider
{
namespace skeleton
{



/// @brief Class for KeyStorageProviderSkeleton.
class KeyStorageProviderSkeleton : public ara::crypto::ipccom::keys::keystorageprovider::KeyStorageProvider, public ara::com::internal::skeleton::TypedServiceImplBase<KeyStorageProviderSkeleton> {
 public:
  /// @uptrace{SWS_CM_00130}
  KeyStorageProviderSkeleton(ara::com::InstanceIdentifier instance_id, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<KeyStorageProviderSkeleton>(instance_id, mode) {}
  /// @brief KeyStorageProviderSkeleton Destructor.

  /// @uptrace{SWS_CM_00152, 4ff7c3aec9fce6d3819bb320c152ce9c410cbe74}
  KeyStorageProviderSkeleton(ara::core::InstanceSpecifier instanceSpec, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<KeyStorageProviderSkeleton>(std::move(instanceSpec), mode) {}

  /// @uptrace{SWS_CM_00153, 791854b84a101bd8d4a5e0e90bb3fb34c1fafd6f}
  KeyStorageProviderSkeleton(ara::com::InstanceIdentifierContainer instanceIDs, ara::com::MethodCallProcessingMode mode = ara::com::MethodCallProcessingMode::kEvent) : ara::com::internal::skeleton::TypedServiceImplBase<KeyStorageProviderSkeleton>(std::move(instanceIDs), mode) {}

  /// @brief Skeleton shall be move constructable.
  explicit KeyStorageProviderSkeleton(KeyStorageProviderSkeleton&&) = default;

  /// @brief Skeleton shall be move assignable.
  KeyStorageProviderSkeleton& operator=(KeyStorageProviderSkeleton&&) = default;

  /// @brief Skeleton shall not be copy constructable.
  explicit KeyStorageProviderSkeleton(const KeyStorageProviderSkeleton&) = delete;

  /// @brief Virtual function.
virtual ~KeyStorageProviderSkeleton() noexcept override;

  /// @brief Skeleton shall not be copy assignable.
  KeyStorageProviderSkeleton& operator=(const KeyStorageProviderSkeleton&) = delete;

  /// @brief Definition for OfferService.
  void OfferService();
  /// @brief Definition for BeginTransaction.
  virtual ara::core::Future<void> BeginTransaction(const uint64& id) = 0;
  using ara::crypto::ipccom::keys::keystorageprovider::KeyStorageProvider::GetRegisteredObserverOutput;
  /// @brief Definition for GetRegisteredObserver.
  virtual ara::core::Future<GetRegisteredObserverOutput>GetRegisteredObserver()=0 ;
  using ara::crypto::ipccom::keys::keystorageprovider::KeyStorageProvider::LoadKeySlotOutput;
  /// @brief Definition for LoadKeySlot.
  virtual ara::core::Future<LoadKeySlotOutput>LoadKeySlot(const String& iSpecify)=0 ;
  using ara::crypto::ipccom::keys::keystorageprovider::KeyStorageProvider::RegisterObserverOutput;
  /// @brief Definition for RegisterObserver.
  virtual ara::core::Future<RegisterObserverOutput>RegisterObserver(const CryptoServiceInstanceId& inputInstanceId)=0 ;
  /// @brief Definition for RollbackTransaction.
  virtual ara::core::Future<void> RollbackTransaction(const uint64& id) = 0;
  /// @brief Definition for UnsubscribeObserver.
  virtual ara::core::Future<void> UnsubscribeObserver(const CryptoServiceInstanceId& instanceId) = 0;
};

} // namespace skeleton
} // namespace keystorageprovider
} // namespace keys
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_KEYS_KEYSTORAGEPROVIDER_KEYSTORAGEPROVIDER_SKELETON_H_

