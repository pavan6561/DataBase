// -----------------------------------------------------------------------------------------------------------
// Copyright (C) AVIN SYSTEMS PVT LTD 2021 - All Rights Reserved Reproduction, distribution and utilization
// of this document as well as the communication of its contents to others without explicit authorization is
// prohibited. Offenders will be held liable for the payment of damages.
// -----------------------------------------------------------------------------------------------------------
// File Name   : cryptoproviderinterface_common.h
//
// Purpose     : Implementation of file cryptoproviderinterface_common.h
// -----------------------------------------------------------------------------------------------------------
// CODE GENERATED BY        : CM Code Generator
//
// CODE GENERATOR VERSION   : 1.4.0.A-006
//
// GENERATED ON             : 2022-03-14T12:58:58+05:30
// -----------------------------------------------------------------------------------------------------------

#ifndef CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYPTOPROVIDER_CRYPTOPROVIDERINTERFACE_COMMON_H_
#define CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYPTOPROVIDER_CRYPTOPROVIDERINTERFACE_COMMON_H_

#include <cstring>
#include <ara/core/array.h>

#include <ara/com/types.h>

#include <ara/com/exception.h>
#include <ara/core/error_code.h>

#include "ara/crypto/ipccom/common/error/error_domain_cryptoerrordomain.h"
#include "impl_type_boolean.h"
#include "impl_type_cryptoalgid.h"
#include "impl_type_cryptoallowedusageflags.h"
#include "impl_type_cryptoproviderservicetype.h"
#include "impl_type_cryptoreadonlymemregion.h"
#include "impl_type_cryptoserviceinstanceid.h"
#include "impl_type_restricteduseobjectstructure.h"

namespace ara
{
namespace crypto
{
namespace ipccom
{
namespace cryp
{
namespace cryptoprovider
{

/// @brief Class for CryptoProviderInterface.
class  CryptoProviderInterface {
 public:
  /// @brief Definition for CryptoProviderInterface.
  virtual ~CryptoProviderInterface() noexcept
  {}
  static constexpr ara::com::internal::ServiceId service_id{0x8EAA};
  static constexpr ara::com::internal::ServiceVersion service_version_major{0x0};
  static constexpr ara::com::internal::ServiceVersion service_version_minor{0x1};
  /// @brief class for CreateAuthCipherOutput.
  class CreateAuthCipherOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  /// @brief class for CreateDecryptorPrivateOutput.
  class CreateDecryptorPrivateOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  /// @brief class for CreateEncryptorPublicOutput.
  class CreateEncryptorPublicOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  /// @brief class for CreateHashDigestOutput.
  class CreateHashDigestOutput
  {
    public:
    /// @brief Argument for signatureUptrcInstanceId.
    CryptoServiceInstanceId signatureUptrcInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(signatureUptrcInstanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>CreateHashFunction_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnknownIdentifier, 0),
    }
  };
  /// @brief class for CreateHashFunctionOutput.
  class CreateHashFunctionOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  /// @brief class for CreateKeyAgreementPrivateOutput.
  class CreateKeyAgreementPrivateOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  /// @brief class for CreateKeyDecapsulatorPrivateOutput.
  class CreateKeyDecapsulatorPrivateOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>CreateKeyDerivationFunction_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnknownIdentifier, 0),
    }
  };
  /// @brief class for CreateKeyDerivationFunctionOutput.
  class CreateKeyDerivationFunctionOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  /// @brief class for CreateKeyEncapsulatorPublicOutput.
  class CreateKeyEncapsulatorPublicOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>CreateMessageAuthCode_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnknownIdentifier, 0),
    }
  };
  /// @brief class for CreateMessageAuthCodeOutput.
  class CreateMessageAuthCodeOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  /// @brief class for CreateMsgRecoveryPublicOutput.
  class CreateMsgRecoveryPublicOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>CreateRandomGenerator_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kBusyResource, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnknownIdentifier, 0),
    }
  };
  /// @brief class for CreateRandomGeneratorOutput.
  class CreateRandomGeneratorOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  /// @brief class for CreateSigEncodePrivateOutput.
  class CreateSigEncodePrivateOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  /// @brief class for CreateSignatureOutput.
  class CreateSignatureOutput
  {
    public:
    /// @brief Argument for signatureUptrcInstanceId.
    CryptoServiceInstanceId signatureUptrcInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(signatureUptrcInstanceId);
    }
  };
  /// @brief class for CreateSignerPrivateOutput.
  class CreateSignerPrivateOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>CreateStreamCipher_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnknownIdentifier, 0),
    }
  };
  /// @brief class for CreateStreamCipherOutput.
  class CreateStreamCipherOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 1>CreateSymmetricBlockCipher_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnknownIdentifier, 0),
    }
  };
  /// @brief class for CreateSymmetricBlockCipherOutput.
  class CreateSymmetricBlockCipherOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  static constexpr ara::core::Array<ara::core::ErrorCode, 2>CreateSymmetricKeyWrapper_PossibleErrors {
    {
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kInvalidArgument, 0),
    ::ara::crypto::ipccom::common::error::MakeErrorCode(ara::crypto::ipccom::common::error::CryptoErrorDomainErrc::kUnknownIdentifier, 0),
    }
  };
  /// @brief class for CreateSymmetricKeyWrapperOutput.
  class CreateSymmetricKeyWrapperOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  /// @brief class for CreateVerifierPublicOutput.
  class CreateVerifierPublicOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  /// @brief class for GenPrivateKeyOutput.
  class GenPrivateKeyOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  /// @brief class for GenSeedOutput.
  class GenSeedOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  /// @brief class for GenSymmetricKeyOutput.
  class GenSymmetricKeyOutput
  {
    public:
    /// @brief Argument for instanceId.
    CryptoServiceInstanceId instanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(instanceId);
    }
  };
  /// @brief class for LoadObjectOutput.
  class LoadObjectOutput
  {
    public:
    /// @brief Argument for CryptoObjectInstanceId.
    CryptoServiceInstanceId CryptoObjectInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(CryptoObjectInstanceId);
    }
  };
  /// @brief class for LoadPrivateKeyOutput.
  class LoadPrivateKeyOutput
  {
    public:
    /// @brief Argument for PrivateKeyInstanceId.
    CryptoServiceInstanceId PrivateKeyInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(PrivateKeyInstanceId);
    }
  };
  /// @brief class for LoadPublicKeyOutput.
  class LoadPublicKeyOutput
  {
    public:
    /// @brief Argument for PublicKeyInstanceId.
    CryptoServiceInstanceId PublicKeyInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(PublicKeyInstanceId);
    }
  };
  /// @brief class for LoadSecretSeedOutput.
  class LoadSecretSeedOutput
  {
    public:
    /// @brief Argument for SecretSeedInstanceId.
    CryptoServiceInstanceId SecretSeedInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(SecretSeedInstanceId);
    }
  };
  /// @brief class for LoadSymmetricKeyOutput.
  class LoadSymmetricKeyOutput
  {
    public:
    /// @brief Argument for SymmetricKeyInstanceId.
    CryptoServiceInstanceId SymmetricKeyInstanceId;
    /// @brief Using for success.
    using IsEnumerableTag = void;
    template<typename F>
    /// @brief Using for enumerate.
    void enumerate(F& fun) noexcept(false) {
      fun(SymmetricKeyInstanceId);
    }
  };
};

} // namespace cryptoprovider
} // namespace cryp
} // namespace ipccom
} // namespace crypto
} // namespace ara

#endif // CRYPTOSERVEREXE_INCLUDES_ARA_CRYPTO_IPCCOM_CRYP_CRYPTOPROVIDER_CRYPTOPROVIDERINTERFACE_COMMON_H_

