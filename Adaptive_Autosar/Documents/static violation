Static Violation Rules:
-----------------------
1. Header File Naming
The header file should be named after the type it declares.
Example:
// Person.h
class Person {
    // class definition
};

2. Naming Conventions
Camel Case:
-----------
Used for variables, function names, and sometimes for member functions.
The first letter is lowercase, and the first letter of each subsequent concatenated word is capitalized.
Example:
// Variables
int employeeCount;
double interestRate;

// Functions
void calculateInterest();

Pascal Case:
------------
Used for class names, struct names, and typedefs.
The first letter of each word is capitalized.
Example:
// Class names
class BankAccount {
    // class definition
};

// Struct names
struct EmployeeRecord {
    // struct definition
};

// Typedefs
typedef unsigned long TimeStamp;

3. Data Members Should Be Private
Member data in non-POD class types shall be private.
Example:
private:
    std::string ownerName;
    double balance;
	
4. Declared Function is Not Called
Any declared function should be called to avoid warnings or confusion.
Example:
#include <iostream>

// Function declaration
void declaredButNotCalled();

int main() {
    std::cout << "This function will not be called." << std::endl;

    // Note: The declaredButNotCalled() function is not called here
    return 0;
}

// Function definition
void declaredButNotCalled() {
    std::cout << "This message will never be displayed because the function is not called." << std::endl;
}

5. Rule of Five
The Rule of Five in C++ is a best practice guideline which states that if a class requires a user-defined:
Destructor
Copy Constructor
Copy Assignment Operator
Move Constructor
Move Assignment Operator
Then it should explicitly define all five of these special member functions to ensure proper resource management, especially for dynamic memory.

Example:
class Example {
public:
    // Constructor
    Example();

    // Destructor
    ~Example();

    // Copy Constructor
    Example(const Example& other);

    // Copy Assignment Operator
    Example& operator=(const Example& other);

    // Move Constructor
    Example(Example&& other) noexcept;

    // Move Assignment Operator
    Example& operator=(Example&& other) noexcept;
};

6. Trailing Whitespace and Line Length
Do not use trailing whitespace.
The line length should not exceed 110 characters.

7. Include Guards
Header files should have include guards to prevent multiple inclusions.
The header file should match the type name.
Example:
// Person.h
#ifndef PERSON_H
#define PERSON_H

class Person {
    // class definition
};

#endif // PERSON_H

8. Braced Initialization
Braced initialization {} without an equals sign = shall be used for variable initialization.
Example:
// Constructor
Person::Person(const char* name, int age) : name{nullptr}, age{age} {}

9. Magic Literals
Hard-coded values should be replaced with named constants to improve readability and maintainability.
Example:
// Define constants for default ages
const int DEFAULT_AGE = 30;
const int JANE_DOE_AGE = 25;
const int MIKE_SMITH_AGE = 40;

10. Return Value of Function Discarded
The return value of a function should not be ignored unless explicitly required.
Example:
int calculateSomething() {
    // Some calculation
    return 42;
}

int main() {
    calculateSomething(); // Warning: Return value of function 'calculateSomething' is not used
    return 0;
}

11. Last if in the if-Cascade Has No else
Every if-cascade should end with an else block to handle any undefined cases.
Example:
if (x > 0) {
    // do something
} else if (x < 0) {
    // do something else
} else {
    // handle case where x == 0
}

12. Last else in the if-Cascade Must Not Be Empty
The last else should have a meaningful statement instead of being left empty or containing only a comment.
Incorrect Example:
if (x > 0) {
    // do something
} else if (x < 0) {
    // do something else
} else {
    // Do nothing
}
Correct Example:
if (x > 0) {
    // do something
} else if (x < 0) {
    // do something else
} else {
    handleZeroCase(); // Proper handling instead of leaving it empty
}







